//KI-DAQX -- Experiment to control Keithley Digital Source meter via GPIB. Derived from NIDAQ, KIDAC
//	ver 1.1		07/02/1997	Waveforms used. Added stability testing
//	ver 1.2		25/02/1997	Added Hysteresis and changed calibration procedure
//	ver 1.3		02/06/1997	Added features for multiple cells
//	ver 1.4		10/09/1997	Added features for Keithley Instruments source meter
//	ver 1.5		15/10/1997	IV curves under variable intensities
//	ver 1.6		09/01/1998	Add fifth intensity and auto fitting to diode model with errors
//	ver 1.7		05/03/1998	Upgraded for LeClanche
//	ver 1.8		22/03/1999	Upgraded for Multiple Cells
//	ver 1.9		22/03/1999	Implemented Igor 4.0 features, Tab Controls, User specific
//	ver 2.0		20/12/2007	Implemented Igor 6 features and update to MacOSX
//	ver 2.1		2/10/2012	Incorporated Arduino to replace NIDAQ, 'IV_sketch'
//	ver 2.2		26/03/2013	Updated to Mac mini with Igor 6.31
//	ver 2.3		24/03/2014	Updated to Norman Specs.
//	ver=2.4		05/07/2014	Replaced Arduino sketch with 'Igor_Routines'
//	ver=2.5		16/11/2015 Updated to be compatible with Mac Mini and Igor Pro 7
//	ver=2.6		16/04/2017	Updated with PPT Routines
#pragma IgorVersion=7	//  11/06/2019	Updated to KIDAQX std
#pragma TextEncoding = "MacRoman"																											// For details execute DisplayHelpTopic "The TextEncoding Pragma"
#pragma rtGlobals=3																															// Use modern global access method.

#include <Remove Tags>, menus=0
#include <ColorWaveEditor>
#include ":Arduino:Arduino_Sequencer_Vs1"

Menu "Data"																																	// menu for DataScan  Files
	"-"
	"Load IV Data [.sIV]",/Q,S_ExptType=".sIV"; IVDataLists()
	help = {"Load IV Scan data file"}
	"Load PPT Data [.pPT]",/Q,S_ExptType=".pPT"; IVDataLists()
	option8
	"Export"
	option9,PrintSave(0)
	"Save SPEX Inits"
End

Menu "Macros",dynamic																														// menu for DataScan  experiment
	"Documentation",DoWindow/F Documentation_KIDAQ_ifn
	"-"
	submenu option1
		submenu "Cell IV Test"	
			"Default",/Q,Celltest("Marie")
			"Perovskite",/Q,Celltest("Perovskite")
			"DSC",/Q,Celltest("DSC")
			"ssDSC",/Q,Celltest("ssDSC")
		end
		submenu "Peak Power Stability"
			"100% Sun",/Q,PPTStability("100% Sun",0); LampControl("Filter",PSUSettings(10),4)
			"53% Sun",/Q,PPTStability("53% Sun",2); LampControl("Filter",PSUSettings(10),4)
			"10% Sun",/Q,PPTStability("10% Sun",4); LampControl("Filter",PSUSettings(10),4)
		end
		submenu "Device Equilibration"
			"100% Sun",/Q,PPTEquilibration("100% Sun",0)	
			"53% Sun",/Q,PPTEquilibration("53% Sun",1)	
			"10% Sun",/Q,PPTEquilibration("10% Sun",2)	
		end
		"Multiple Cell IV Test",MultiCellTest(1)
		"MultiCell Conductivity",MultiCellTest(0)
		"LeClanche Test",/Q,LeClanche()
		"Specification",/Q,DoWindow/F ConfigPanel; TabControl tab0 win=ConfigPanel,value=4; tabPanels("tab0",4)
		"Cell Area",Cell_Area()
	end
	submenu option2
		"Dark Current /F5",/Q,V_Henry=1; Sun("0% Sun",10); V_Henry=0
		submenu "Sun IV Test"
			"100% Sun /F6",/Q,Sun("100% Sun",0); LampControl("Filter",PSUSettings(10),4)
			"53% Sun",/Q,Sun("53% Sun",2); LampControl("Filter",PSUSettings(10),4)
			"10% Sun",/Q,Sun("10% Sun",4); LampControl("Filter",PSUSettings(10),4)
			"1% Sun",/Q,Sun("1% Sun",5); LampControl("Filter",PSUSettings(10),4)
		end
		"Current Dynamics",/Q,DynamicsWrapper("CURR","VOLT")
		"Voltage Dynamics",/Q,DynamicsWrapper("VOLT","CURR")
		"IPCE 550",/Q,MeasureIPCE("550",8); LampControl("Filter",PSUSettings(10),4)
		"Cell Stability",/Q,Stability("100% Sun",0)
		submenu "Time Dependence"
			submenu "Current"
				"100% Sun",/Q,TimeDependenceWrapper("100% Sun","CURR","VOLT",0)
				"53% Sun",/Q,TimeDependenceWrapper("53% Sun","CURR","VOLT",2)
				"10% Sun",/Q,TimeDependenceWrapper("10% Sun","CURR","VOLT",4)
				"1% Sun",/Q,TimeDependenceWrapper("1% Sun","CURR","VOLT",5)
				DiodeLabels[13],/Q,TimeDependenceWrapper("0% Sun","CURR","VOLT",13)
			end
			submenu "Voltage"
				"100% Sun",/Q,TimeDependenceWrapper("100% Sun","VOLT","CURR",0)
				"53% Sun",/Q,TimeDependenceWrapper("53% Sun","VOLT","CURR",2)
				"10% Sun",/Q,TimeDependenceWrapper("10% Sun","VOLT","CURR",4)
				"1% Sun",/Q,TimeDependenceWrapper("1% Sun","VOLT","CURR",5)
				DiodeLabels[13],/Q,TimeDependenceWrapper("0% Sun","VOLT",,"CURR"13)
			end
			submenu "Peak Power Tracking"
			"100% Sun",/Q,PPT("Current",0); LampControl("Filter",PSUSettings(10),4)																// Nominal value: 182% Sun
			"53% Sun",/Q,PPT("Current",2); LampControl("Filter",PSUSettings(10),4)																// @ 100% Sun
			"10% Sun",/Q,PPT("Current",4); LampControl("Filter",PSUSettings(10),4)																// @ 50% Sun
			end
		end
		submenu "Hysteresis"
			"100% Sun",/Q,HysteresisWrapper("100% Sun",0,1); LampControl("Filter",PSUSettings(10),4)
			"53% Sun",/Q,HysteresisWrapper("53% Sun",2,1); LampControl("Filter",PSUSettings(10),4)
			"10% Sun",/Q,HysteresisWrapper("10% Sun",4,1); LampControl("Filter",PSUSettings(10),4)
			"1% Sun",/Q,HysteresisWrapper("1% Sun",5,1); LampControl("Filter",PSUSettings(10),4)
			"Dark Current",/Q,HysteresisWrapper("0% Sun",10,1); LampControl("Filter",PSUSettings(10),4)
		end
		"Chrono Amperometry",/Q,LampControl("Filter",PSUSettings(10),4)
		"Charge vs Potential",/Q,LampControl("Filter",PSUSettings(10),4)
		"Profile"
	end
	submenu option3
		submenu "Datafit"
			"IV",DataFit("IV")
			option31,DataFit("IVShunt")
		end
//		"Schottky",Schottky("IV",)
		"Photodiode Current",InternalResistance()	
		"Photo Current",TruePhotoCurrent()
		"Radiant Power",RadiantPower()
		"IV Log Plot",Graph_Style1()
	end
	option4
	"-"
	option5,/Q,DoWindow/F ConfigPanel; TabControl tab0,value=4; tabPanels("tab0",4)
	option6,/Q,PrintSave(1)
End

Menu "System"																																// menu for NI-DAQ LabNB Nubus card
	"Setup",SetUpSystem()
	"Reset Keithley",SetupGPIBKeithley()
	"Setup Arduino"
	"Data Paths"
end

Function/S GetStrFromList1(str,n,separator)
	String str,separator; variable n
	Variable p1,p2,len=strlen(separator)
	do
		p2=StrSearch(str,separator,p1)
		if (p2==-1)
			p2=strlen(str)																													// so that trailing separator is not needed
		endif
		if (n==0)
			return str[p1,p2-1]
		endif
		n-=1
		p1=p2+len
	while (n>=0)
	return ""
End

Function KillJoy()
	Variable keys=GetKeyState(0)
	if (keys & 4)																																// Test for opt (Mac)
			return 1
	endif
	return 0
End

Function OpenFilemaker()
	string s=""
	s+="tell application\"Finder\"\r"
	s+="	activate\r"
	s+="	select file\"Mesure Marie\" of folder\"FileMaker Pro\" of startup disk\r"
	s+="	open selection with password\r"
	s+="end tell\r"
	executeScriptText s
End

Function SendScript(command)																													// First command automatically starts up application
	string command
	string s=""
	s+="tell application\"Filemaker Pro\"\r"
	s+="	do script(\""+command+"\")\r"
	s+="end tell\r"
	executeScriptText s
End

Function IVSpectrum()																															// I-V Spectrum experiment	
	SVAR allmolecules
	DoWindow/F ConfigPanel
	if (!V_Flag)
		Execute "ConfigPanel()"
	endif
	allMolecules=indexedfile(MoleculePath,-1,"PICT")+"none"
	SetBackground ReadChannels()
	CtrlBackground period=240																												// Approx 5s cycle
	TabControl tab0,value=4; tabPanels("tab0",4)
End

Window ConfigPanel() : Panel
	PauseUpdate; Silent 1
	V_totaltime:=V_scans*V_steptime/60
	NewPanel/K=2/W=(4,40,720,280) as "I-V characteristics under Solar AM 1.5" 
	ModifyPanel fixedSize=1,cbRGB=(34952,34952,34952),frameStyle=3,frameInset=6
	SetVariable cellarea,pos={24,12},size={170,18},title="Devicel Area:",font="Helvetica",fSize=12,format="%g cm2",frame=3,limits={0.01,200,0.01},value=V_area
	SetVariable Voltage,pos={24,36},size={170,18},proc=voltage_output,title="Bias Voltage:",font="Helvetica",fSize=12,format="%g V",frame=2,limits={-10.0,3.2,0.02},value=V_BiasVoltage
	ValDisplay Current,pos={24,60},size={168,18},title="Current :       ",font="Helvetica",fSize=12,format="%.2W1PA",frame=3,labelBack=(34952,34952,34952),limits={-0.02,0,0},barmisc={0,64},value= #"V_DataChannel0"
	PopupMenu user,pos={290,12},size={126,18},proc=User,title="User :",font="Helvetica",fSize=12,mode=1,value= #"\"Visitor;DSC;Perovskite;ssDSC;Reference Cell\""
	PopupMenu cell0,pos={554,12},size={126,18},proc=SelectCell,title="Select :",font="Helvetica",fSize=12,mode=2,value= #"\"Ref. Cell;Test Cell;Test Cell#1;Test Cell#2;Test Cell#3;Test Cell#4;Test Cell#5;Test Cell#6;Test Cell#7;Test Cell#8;Test Cell#9;Test Cell#10;Test Cell#11;Test Cell#12;Test Cell#13;Test Cell#14;Test Cell#15\""
	PopupMenu filter0,pos={554,36},size={130,18},proc=FilterWheel,title="Filters :",font="Helvetica",fSize=12,mode=1,value= #"\"0% Sun;1% Sun;10% Sun;53% Sun;100% Sun;550\""
	SetDrawEnv linethick=4,linefgc=(65535,0,0),linebgc=(49151,53155,65535),rounding=16; DrawRRect 260,66,468,92
	TitleBox msg,pos={256,64},size={228,28},anchor=MC,frame=0,title="\F'Chicago'\Z12Standby"
	Button go,pos={552,62},size={26,26},proc=go,title="Go"
	TabControl tab0,pos={4,104},size={698,128},proc=tabPanels,font="Helvetica",tabLabel(0)="Setup",tabLabel(1)="IV SingleDevice",tabLabel(2)="IV MultiDevice",tabLabel(3)="Stability",tabLabel(4)="Specs.",tabLabel(5)="Resistance",tabLabel(6)="Calibration",value=0
	ValDisplay se_chan1,pos={64,132},size={184,22},title="Thermopile  :",font="Helvetica",fSize=12,format="%.3f Sun",frame=3,limits={-0.01,1.0,0},barmisc={0,64},value= #"V_DataChannel1"
	ValDisplay se_chan2,pos={64,154},size={184,22},title="Ref. Current:",font="Helvetica",fSize=12,format="%.2W0PA",frame=3,limits={-1e-2,2e-4,0},barmisc={0,64},value= #"V_DataChannel2"
	ValDisplay se_chan0,pos={64,176},size={184,22},title="CellCurrent :",font="Helvetica",fSize=12,format="%.2W0PA",frame=3,limits={-1e-2,2e-4,0},barmisc={0,64},value= #"V_DataChannel0"
	ValDisplay se_chan3,pos={64,198},size={184,22},title="Potential     :",font="Helvetica",fSize=12,format="%.2W0PV",frame=3,limits={-0.1,1.2,0},barmisc={0,64},value= #"V_DataChannel3"
	PopupMenu se_shutter0,pos={312,132},size={130,22},proc=shutter,font="Helvetica",fSize=12,title="Shutter1",mode=1,value= #"\"Closed;Open\""
	PopupMenu se_shutter3,pos={312,154},size={130,22},proc=shutter,font="Helvetica",fSize=12,title="Shutter2",mode=1,value= #"\"Closed;Open\""
	PopupMenu se_shutter1,pos={312,176},size={130,22},proc=shutter,font="Helvetica",fSize=12,title="Shutter3",mode=1,value= #"\"Closed;Open\""
	PopupMenu se_4w,pos={472,132},size={132,22},proc=FourWire,title="4-Wire Sense",font="Helvetica",fSize=12,mode=1,value=#"\"OFF;ON\""
	Slider se_LampOutput,pos={632,124},size={40,104},proc=LampControl,font="Palatino",vert=1,side=2,ticks=16,limits={15,30,0.1},value=15
	TitleBox iv_msg,pos={236,126},size={214,20},anchor=MC,frame=0,title="\F'Chicago'\Z12IV Acquisition Parameters"
	PopupMenu iv_gain1,pos={64,142},size={126,18},proc=setDelay,title="Settling Time   (ms) :",font="Palatino",fSize=12,mode=10,value="AUTO;1;2;5;10;20;40;60;80;100;200;500;1000;2000;5000;10000"
	PopupMenu iv_avg,pos={64,168},size={126,18},proc=SetCompliance,title="Compliance     (uA) :",font="Palatino",fSize=12,mode=6,value=#"\"5;10;20;50;100;200;500;1000;2000;5000;10000;20000;50000;100000;200000;500000\""
	PopupMenu iv_incr,pos={64,194},size={126,18},proc=SetIncrement,title="Voltage step    (mV) :",font="Palatino",fSize=12,mode=2,value=#"\"2.5;5;10;20;50\""
	SetVariable iv_equil,pos={432,142},size={156,18},title="Equilibration Time:",font="Palatino",fSize=12,format="%g s",frame=0,limits={.0,120,1},value=V_delay
	SetVariable iv_end,pos={432,194},size={156,18},title="Voltage Limits:",font="Palatino",fSize=12,format="%.1W0PV",frame=0,limits={-8,0.9,0.01},value=V_endVolt
	SetVariable iv_start,pos={590,194},size={88,18},proc=VoltLimit,title="<-",font="Palatino",fSize=12,format="%.1W0PV",frame=0,limits={0,8,0.01},value=V_startVolt
	CheckBox iv_ffFlag,pos={588,168},size={78,20},noproc,title="FF Control",font="Palatino",fSize=12,frame=0,mode=0,variable=V_Henry
	PopupMenu ncell,pos={432,168},size={144,18},proc=CellNumber,title="# of Cells in Module:",font="Palatino",fSize=12,mode=1,value=#"\"1;2;3;4;5;6;7;8;9;10;11;12;13;14;15;16;17;18;19;20;21;22;23;24;25;26;27;28;29;30;31;32\""
	PopupMenu ndev,pos={432,168},size={144,18},proc=DeviceNumber,title="# of Devices:",font="Palatino",fSize=12,mode=1,value=#"\"1;2;3;4\""
	TitleBox st_msg,pos={236,126},size={214,20},anchor=MC,frame=0,title="\F'Chicago'\Z12Stability Testing Parameters"
	SetVariable st_setvar1,pos={80,142},size={124,18},title="# of Scans :",font="Helvetica",fSize=12,format="%g",frame=0,limits={4,256,4},value=V_scans
	SetVariable st_setvar2,pos={80,168},size={124,18},title="Step Time  :",font="Helvetica",fSize=12,format="%g m",frame=0,limits={5,60,5},value=V_steptime
	ValDisplay st_setvar3,pos={80,196},size={124,18},title="Total Time :",font="Helvetica",fSize=12,format="%4.2f h",frame=3,value=V_totaltime
	PopupMenu st_allsun,pos={416,168},size={124,18},proc=sunControl,title="NonStop Sun:",font="Helvetica",fSize=12,mode=1,value=#"\"No;Yes\""
	Button sp_dye0,pos={16,130},size={124,20},proc=DyePanel,title="Dye Sensitiser"
	SetVariable sp_dye1,pos={140,132},size={320,20},title=" ",font="Palatino",fSize=12,frame=0,value=S_specification
	Button sp_we0,pos={16,154},size={124,20},proc=WEPanel,title="Working Electrode"
	SetVariable sp_we1,pos={140,156},size={320,20},title=" ",font="Palatino",fSize=12,frame=0,value=S_layer
	Button sp_el0,pos={16,178},size={124,20},proc=ElectrolytePanel,title="Electrolyte"
	SetVariable sp_el1,pos={140,180},size={320,20},title=" ",font="Palatino",fSize=12,frame=0,value=S_Electrolyte
	PopupMenu sp_ce0,pos={16,204},size={116,20},proc=setce,title="Counter Electrode",font="Palatino",mode=0,value=#"\"NSG 5Ω/Pt°;NSG 10Ω/Pt°;LOF 8Ω/Pt°;LOF 10Ω/Pt°;LOF 15Ω/Pt°;LOF 15Ω/Graphene;FlachGlas/Pt refl/Pt°;Gold\""
	SetVariable sp_ce1,pos={148,204},size={120,20},title=" ",font="Palatino",fSize=12,frame=0,value=S_CE
	PopupMenu sp_lamp,pos={464,130},size={136,16},proc=setLamp,title="Light Source",font="Palatino",fSize=12,mode=1,value=#"\"White Lumileds;Xe 450W @ AM1.5G;Xe 1000W @ AM1.5G;S Lamp @ AM1.5G;Osram 36W/21-840;Halogen 250W 411\""
	SetVariable sp_type,pos={464,154},size={184,20},title="Type of Cell :",font="Palatino",fSize=12,frame=0,value=S_type
	SetVariable sp_name,pos={464,178},size={160,20},title="Cell Name :",font="Palatino",fSize=12,frame=0,value=S_cellName
	SetVariable sp_num,pos={624,178},size={68,20},title="Cell #",font="Palatino",fSize=12,frame=0,limits={1,128,1},value=V_run
	Button sp_layout,pos={512,198},size={90,20},proc=specs,title="Layout",disable=2
	TitleBox re_msg,pos={236,126},size={214,20},anchor=MC,frame=0,title="\F'Chicago'\Z12IV Film Resistance Parameters"
	ValDisplay re_R1,pos={40,144},size={200,20},title="Resistance @ 0°  :",font="Helvetica",fSize=12,format="%.2W0PΩ",frame=3,limits={0,0,0},barmisc={0,1000},value= #"V_R1"
	ValDisplay re_R2,pos={40,168},size={200,20},title="Resistance @ 90°:",font="Helvetica",fSize=12,format="%.2W0PΩ",frame=3,limits={0,0,0},barmisc={0,1000},value= #"V_R2"
	ValDisplay re_ratio,pos={40,192},size={200,20},title="Resistance Ratio :",font="Helvetica",fSize=12,format="%g",frame=3,limits={0,0,0},barmisc={0,1000},value= #"V_ResRatio"
	ValDisplay re_result,pos={284,144},size={152,20},title="Result :",font="Helvetica",fSize=12,format="%.3W0PΩ/[]",frame=3,limits={0,0,0},barmisc={0,1000},value=#"V_resultVdP"
	GroupBox re_box1,pos={280,164},size={168,48},frame=0,title="",labelBack=0
	ValDisplay re_cond,pos={284,168},size={152,20},title="Conductivity:",font="Helvetica",fSize=12,format="%.3W0PS/m",frame=3,limits={0,0,0},barmisc={0,1000},value=#"V_conductivity"
	SetVariable re_thick,pos={284,192},size={160,20},title="Film Thickness:",font="Helvetica",fSize=12,format="%.1W0Pm",frame=0,limits={1e-7,2e-5,1e-7},value=V_length
	PopupMenu re_Resistance,pos={512,168},size={104,20},proc=ResistanceMethod,title="Method :",font="Helvetica",fSize=12,mode=1,value=#"\"Van de Pauw;4-Point\""
	SetVariable re_CF,pos={512,192},size={164,20},title="Correction Factor",font="Helvetica",fSize=12,format="%.3g",frame=3,limits={0,1,0.01},value=V_CFVdP
	Button re_VdP,pos={560,140},size={104,20},proc=VdP,title="Analyze"
	Button ca_cal,pos={40,142},size={120,22},proc=calibrate,title="Calibration"
	PopupMenu ca_PPT,pos={284,142},size={126,16},proc=PPTduration,title="Sweep Duration (s):",font="Palatino",fSize=12,mode=1,value=#"\"8;16;32;64;128;256;512;1024\""
	PopupMenu ca_dir,pos={284,168},size={126,16},proc=ScanDirection,title="Sweep Direction:",font="Palatino",fSize=12,mode=1,value=#"\"<-;->\""
	PopupMenu ca_voc,pos={284,194},size={126,20},proc=vocMode,title="Precondition Voc:",font="Palatino",fSize=12,mode=1,value=#"\"OFF;4min Scan;Voc Max\""
	PopupMenu ca_pul,pos={496,142},size={126,16},proc=pulsedMode,title="Pulsed Mode : ",font="Palatino",fSize=12,mode=1,value=#"\"OFF;ON\""
	PopupMenu ca_dut,pos={496,168},size={126,16},proc=dutyCycle,title="Duty Cycle   :  ",font="Palatino",fSize=12,mode=7,value=#"\"5%;10%;15%;20%;30%;40%;50%;60%;70%\""
	PopupMenu ca_int,pos={496,194},size={126,16},proc=setInteg,title="Integ. Time   :  ",font="Palatino",fSize=12,mode=7,value=#"\"0.01;0.02;0.05;0.1;0.2;0.5;1;2;5;10\""
	SetWindow kwTopWin,hook=UpdatePanel
EndMacro

Function DyePanel(ctrlName) : ButtonControl
	String ctrlName
	Execute "DyeSensitizer()"
End

Window DyeSensitizer() : Panel
	NewPanel/K=2/W=(292,251,576,375) as "Dye Parameters" 
	ModifyPanel cbRGB=(39321,1,31457)
	SetDrawEnv fsize=16,fstyle=1,textrgb=(65535,65532,16385); DrawText 88,24,"Dye Uptake"
	GroupBox box,pos={4,32},size={276,88},frame=1
	PopupMenu dye,pos={8,40},size={184,16},proc=setDye,title="Dye Sensitiser:",font="Chicago",fSize=12,mode=V_ModeDye,value=allMolecules
	PopupMenu dyesolv,pos={8,60},size={184,16},proc=setSolvent,title="Dye Solvent    :",font="Chicago",fSize=12,mode=V_modeSolvent,value=#"\"MeCN/tBuOH;EtOH\""
	SetVariable conc,pos={10,80},size={170,16},title="Concentration:",font="Chicago",fSize=12,format="%.0W0PM",frame=0,limits={1e-5,2e-3,1e-5},value=V_dyeConc
	SetVariable time,pos={10,100},size={170,16},title="Dipping Time   :",font="Chicago",fSize=12,format="%.0W0Ph",frame=0,limits={1,120,1},value=V_time
	SetVariable batch,pos={172,40},size={104,16},title="Batch#",font="Chicago",fSize=12,frame=0,value=S_DyeBatch
End

Function WEPanel(ctrlName) : ButtonControl
	String ctrlName
	Execute "WorkingElectrode()"
End

Window WorkingElectrode() : Panel
	NewPanel/K=2/W=(4,251,288,417) as "Working Electrode" 
	ModifyPanel cbRGB=(34733,8337,11421)
	SetDrawEnv fsize=16,fstyle=1,textrgb=(65535,65532,16385); DrawText 72,24,"Film Parameters"
	GroupBox box,pos={4,32},size={276,130},frame=1
	PopupMenu we,pos={8,40},size={160,16},proc=setwe,title="Working Electrode:",font="Chicago",fSize=12,mode=V_ModeWE,value=#"\"NSG 10Ω/cm;NSG 20Ω/cm;LOF 8Ω/cm;LOF 10Ω/cm;LOF 15Ω/cm;Asahi 7Ω/cm;ITO 5Ω/cm;ITO 10Ω/cm\""
	SetVariable batch,pos={10,60},size={192,16},title="Batch #          :",font="Chicago",fSize=12,frame=0,value=S_WEbatch
	SetVariable thick,pos={10,80},size={192,16},title="Film thickness     :",font="Chicago",fSize=12,format="%.1W0Pm",frame=0,limits={1e-7,2e-5,1e-7},value=V_length
	SetVariable por,pos={10,100},size={192,16},title="Film Porosity          :",font="Chicago",fSize=12,format="%2.0f %",frame=0,limits={50,100,1},value=V_Porosity
	SetVariable firetemp,pos={10,120},size={192,16},title="Firing Temperature:",font="Chicago",fSize=12,format="%2.0f°C",frame=0,limits={50,600,10},value=V_FireTemp
	PopupMenu treat,pos={8,140},size={160,16},proc=setTreatment,title="Layer Treatment   :",font="Chicago",fSize=12,mode=2,value=#"\"sc TiCl4;Heat;UV/O3;Heat&UV/O3\""
End

Function ElectrolytePanel(ctrlName) : ButtonControl
	String ctrlName
	Execute "Electrolyte()"
End

Window Electrolyte() : Panel
	NewPanel/K=2/W=(164,251,644,480) as "Electrolyte List"
	ModifyPanel cbRGB=(65535,54611,49151)
	ListBox lb0,pos={8,8},size={464,200},proc=SetElectrolyte,frame=2,listWave=Electrolytes,selWave=sjack,colorWave=myColors,mode=3,editStyle=1,row=V_modeElectrolyte,widths={56,40,54,56,64,64,48}
	PopupMenu pop,pos={8,210},size={80,16},proc=CellMode,title="Selection Mode",font="Chicago",fsize=12,mode=1,value=#"\"Contiguous Cells;Disjoint Cells\""
	ColumnLabels()
	Colours()
EndMacro

Function UpdatePanel(infoStr)																													// Use to control parameters, dependencies etc.
	String infoStr
	if (StrSearch(infoStr,"EVENT:activate;",0)>0)
		string s=WinList("*",";","WIN:64")
		if (strsearch(s,"DyeSensitizer",0)>-1)
			Dye(); DoWindow/K DyeSensitizer
		endif
		if (strsearch(s,"Electrolyte",0)>-1)
			DoWindow/K Electrolyte
		endif
		if (strsearch(s,"WorkingElectrode",0)>-1)
			WE(); DoWindow/K WorkingElectrode
		endif
		if (strsearch(s,"Files",0)>-1)
			SetFile(); DoWindow/K Files
		endif
		return 0
	endif
	if (StrSearch(infoStr,"EVENT:kill;",0)>0)
	endif
End

Function tabPanels(ctrlName,tab) : Panel
	String ctrlName; Variable tab
	WAVE RefDiodes
	NVAR V_area,V_Lamp,V_numCell,V_refNum,V_RefCalibration,V_currentRef,V_complianceI,V_corrGain,V_counter
	ControlInfo/W=configpanel $ctrlName
	String tabName=S_Value,allControls=ControlNameList("configPanel"),str; Variable n
	do
		str=StringfromList(n,allControls)
		 if (!cmpstr(str,""))
		 	break
		 endif
		 if (!cmpstr(str[2],"_"))
		 	if (!cmpstr(str[0,1],tabName[0,1]))
		 		showControl(str,0)
		 	else
		 		showControl(str,1)																											// Disable Controls
		 	endif
		 endif
		 n+=1
	while (1)
	Button go win=ConfigPanel,disable=0
	PopupMenu ncell,win=ConfigPanel,disable=(tab!=1); PopupMenu ndev win=ConfigPanel,disable=(tab!=2)
	CtrlBackground stop
	TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Standby"
	if (V_Lamp)
		FilterWheel("Filter",1,"0% Sun")
	endif
	switch (tab)
		case 0:
			Button go,disable=2
			TabControl tab0 win=ConfigPanel,labelBack=(45535,45535,50535),value=0
			V_counter=0
			CtrlBackground noBurst=1,start
			TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Setup"
			break
		case 1:																																// Single Device option
			V_refNum=10; V_currentRef=-15.8902; V_RefCalibration=V_currentRef															// -16.3151 (220321), -16.4549 (211018), -16.2905 (210823), -16.4574 (201019), -27.2357	 after lamp change
			TabControl tab0 win=ConfigPanel,labelBack=(50535,50535,45535),value=1
			break
		case 2:																																// Multi Device option
			V_numCell=1; V_refNum=10; V_RefCalibration=0.1/RefDiodes[V_refNum][6]
			TabControl tab0 win=ConfigPanel,labelBack=(55535,50535,35535),value=2
			break
		case 3:
			TabControl tab0,labelBack=(45535,50535,50535),value=3
			break
		case 4:																																// Cell Specs.
			Button go,disable=2; Button sp_layout,disable=2
			if ((strsearch(WinList("*",";","WIN:1"),"IVGraph",0)>-1)||(strsearch(WinList("*",";","WIN:1"),"GraphPPT",0)>-1)||(strsearch(WinList("*",";","WIN:1"),"TransientCGraph",0)>-1)||(strsearch(WinList("*",";","WIN:1"),"TransientVGraph",0)>-1))// Only allow 'Layout' if IVGraph present
				Button sp_layout,disable=0
			endif
			TabControl tab0 win=ConfigPanel,labelBack=(40535,50535,40535),value=4
			break
		case 5:
			TabControl tab0,labelBack=(50535,45535,45535),value=5
			break
		case 6:
			Button go,disable=2
			TabControl tab0,labelBack=(50535,45535,50535),value=6
			break
	endswitch
End

Function ShowControl(ctrlName,flg)																												// Show or hide all Control types in top window
	String ctrlName; Variable flg
	ControlInfo $ctrlName
	Variable controlType=V_Flag
	switch (controlType)
		case 1:																																// button
			Button $ctrlName disable=flg
			break
		case 2:																																// checkbox
			CheckBox $ctrlName disable=flg
			break
		case 3:																																// popupmenu
			PopupMenu $ctrlName disable=flg
			break
		case 4:																																// valdisplay
			ValDisplay $ctrlName disable=flg
			break
		case 5:																																// setvariable
			SetVariable $ctrlName disable=flg
			break
		case 6:																																// chart
			Chart $ctrlName disable=flg
			break
		case 7:																																// slider
			Slider $ctrlName disable=flg
			break
		case 8:																																// tab
			TabControl $ctrlName disable=flg
			break
		case 9:																																// groupbox
			GroupBox $ctrlName disable=flg
			break
		case 10:																																// titlebox
			TitleBox $ctrlName disable=flg
			break
		case 11:																																// listbox
			ListBox $ctrlName disable=flg
			break
	endswitch
End

Function Voltage_output(ctrlName,varNum,varStr,varName) : SetVariableControl
	String ctrlName,varStr,varName; Variable varNum	
	Command(":SOUR:VOLT:LEV:IMM:AMPL "+num2str(varNum))																					// Set current Voltage
	Command(":OUTP:STAT ON")
	ReadChannels()
End

Function ReadChannels()																														// Faster read than directly into ValDisplay
	NVAR V_counter
	ReadCurrent()																															// Read current
	V_counter+=1
	if (V_counter>16)																														// Force Setup to Quit after 16 measurements
		TabControl tab0 win=configPanel,value=1; tabPanels("tab0",1)
		return 1
	else
		return 0
	endif
	return 0
End

Function ReadCurrent()
	NVAR V_DataChannel0,V_DataChannel2,V_DataChannel3
	Command(":SENS:CURR:RANGE:AUTO 1")
	Command(":OUTP:STAT ON")																												// Switch Output ON
	V_DataChannel0=ReadData(1)
	Command(":SYST:FRSW REAR")																												// Switch to rear, also switches Output OFF
	Command(":OUTP:STAT ON")																												// So switch Output ON again
	V_DataChannel2=ReadData(1)
//	V_DataChannel2=ReadDataWave("CURR","VOLT")
	Command(":SYST:FRSW FRON")																												// Switch to front
End

Function Shutter(ctrlName,popNum,popStr) : PopupMenuControl
	String ctrlName,popStr; Variable popNum
//	ArduinoDigital(2,popNum-1)
End

Function SelectSignal(ctrlName,popNum,popStr) : PopupMenuControl																				// Sample or Reference
	String ctrlName,popStr; Variable popNum
	ArduinoDigital(6,popNum-1)
End

Function SetCompliance(ctrlName,popNum,popStr) : PopupMenuControl																				// Specify current compliance
	String ctrlName,popStr; Variable popNum
	NVAR V_complianceI
	V_complianceI=str2num(popStr)/1e6																										// Convert uA => A
	Command(":SENS:CURR:PROT "+num2str(V_complianceI))
End

Function FFcontrol(ctrlName,popNum,popStr) : PopupMenuControl																					// Specify current compliance
	String ctrlName,popStr; Variable popNum
	NVAR V_Henry
	V_Henry=popNum
End

Function FourWire(ctrlName,popNum,popStr) : PopupMenuControl																					// Specify current compliance
	String ctrlName,popStr; Variable popNum
	Command(":SYST:RSEN "+num2str(popNum-1))
End

Function SetDelay(ctrlName,popNum,popStr) : PopupMenuControl																					// Specify settling times
	String ctrlName,popStr; Variable popNum
	NVAR V_settlingtime
	strswitch(popStr)
		case "AUTO":
			V_settlingtime=-1																												// If AUTO then -1
			break
		default:
			V_settlingtime=str2num(popStr)/1e3																								// Convert ms => s
	endswitch
	// NI488 ibtmo sourcemeter,14																											// Increase Timeout if necessary
End

Function SunControl(ctrlName,popNum,popStr) : PopupMenuControl
	String ctrlName,popStr; Variable popNum
	NVAR V_sun
	V_sun=popNum
End

Function CellNumber(ctrlName,popNum,popStr) : PopupMenuControl
	String ctrlName,popStr; Variable popNum
	NVAR V_numCell,V_incrVolt
	Variable a
	V_numCell=popNum
	V_incrVolt=5e-3; a=2
	if (popNum>1)
		V_incrVolt=1e-2; a=3
	endif
	if (popNum>2)
		V_incrVolt=2e-2; a=4
	endif
	if (popNum>4)
		V_incrVolt=5e-2; a=5
	endif
	Popupmenu iv_incr win=configpanel,mode=a
End

Function DeviceNumber(ctrlName,popNum,popStr) : PopupMenuControl
	String ctrlName,popStr; Variable popNum
	NVAR V_numDev
	V_numDev=popNum
End

Function User(ctrlName,popNum,popStr) : PopupMenuControl
	String ctrlName,popStr; Variable popNum
	SVAR S_UserName,S_Layer,S_Type,S_dye,S_DyeBatch,S_Solvent,S_electrolyte,S_Specification,S_cellName
	NVAR V_area,V_porosity,V_settlingtime,V_complianceI,V_numCell,V_numDev,V_endVolt,V_length,V_run,V_incrVolt,V_Henry,PDFflag,V_delay
	Variable a=9,b=3,c=7; string str
	S_UserName=popStr; S_cellName=S_Username; V_complianceI=2e-3;  V_settlingtime=0.04; V_endVolt=0; V_porosity=0.68; V_incrVolt=1e-2; V_run=1; V_Henry=0; PDFflag=1; 
	strswitch (S_UserName)
		case "Aswani":
			V_area=0.16; V_length=1e-5
			S_dye="MG8"; S_Layer="Double (PC) 10/4, sc.,+TiCl4"; S_Type="Co type",S_cellName="AY"
			break		
		case "Francine":
			V_area=0.158; V_porosity=0.58; V_settlingtime=0.1; c=10; b=2; V_numCell=1; V_numDev=1; V_length=1.2e-5
			S_dye="Z907"; S_DyeBatch="270200"; S_Specification="Z907,DMF"; S_Solvent="DMF"; S_electrolyte="Zxxx"; S_Type="DL-PC,ttt"; S_cellName="FDA"
			break
		case "Joel":
			V_area=0.16; V_settlingtime=0.01; V_length=5e-7; c=5
			S_dye="Perovskite"; S_electrolyte="OMeTAD"; S_Layer="Evapourated sc.,+TiCl4"; S_Type="SI ",S_cellName="JTNT"
			break
		case "Paul":
			V_area=0.157; V_complianceI=5e-3; a=10; V_length=1.2e-5; PDFflag=0
			S_dye="N719"; S_electrolyte="332"; S_Layer="Double (PC) 12/4, sc.,+TiCl4"; S_Type="PC ",S_cellName="PL"
			break
		case "Perovskite":
			V_area=0.16; V_complianceI=2e-3; c=13; V_numCell=1; V_length=1e-6; V_settlingtime=0.2;
			S_dye="Perovskite"; S_Type="Perovskite",S_cellName="Perov"
			break
		case "Norman":
			V_area=0.285; V_settlingtime=0.2; c=11; V_delay=5; V_incrVolt=5e-3
			S_dye="CH3NH3PbI3"; S_electrolyte="Spiro-OMeTAD"; S_Type="Perovskite cell"; S_cellName="np-"; S_Layer = ""
			break
		case "Jessi":
		case "Zhipan":
		case "Takeru":
		case "Seigo":
		case "Juno":
		case "Le":
		case "Nok":
		case "Mingqui":
		case "Kuang":
		case "Peng":
			V_area=0.158; V_length=1e-5
			S_dye="K19"; S_electrolyte="Z208"; S_Layer="Double (PC) 10/4, sc.,+TiCl4"; S_Type="PC "; S_cellName="kdb"
			break
		case "Sophie":
			V_area=0.159; V_length=1e-5
			S_dye="Z907"; S_electrolyte="Z646"; S_Layer="(PC) 5.3, sc.,+TiCl4"; S_Type="SI ",S_cellName="sw_"
			break
		case "Andreas":
		case "Visitor":
			V_area=0.16; V_numCell=1; V_length=6e-6
			S_dye="N719"; S_Solvent="MeCN/tBuOH"; S_Specification="MeCN/tBuOH"; S_electrolyte="956"; S_Layer="Double (PC) 12/4, sc.,+TiCl4"; S_Type="PC "
			break
		default:
			V_area=0.5; V_complianceI=2e-3; V_numCell=1; V_length=8e-6; V_run=1; antidote()
			S_dye="Si"; S_Specification="LCE 50"; S_Layer="Transp. (PC), sc.,+TiCl4"; S_electrolyte="e-h+"; S_Type="Si Ref #7 "
			Antidote()
	endswitch
	PopupMenu iv_avg win=configpanel,mode=a; PopupMenu iv_gain1,win=configpanel,mode=c; PopupMenu ncell win=configpanel,mode=V_numCell
	PopupMenu iv_incr win=configpanel,mode=b; PopupMenu ndev win=configpanel,mode=V_numDev; SetVariable sp_num win=configpanel,mode=V_run
	ScanDirection("",1,""); PopupMenu ca_dir,win=configpanel,mode=1																				// Reset to default Sweep: High to Low
	SetDelay("settling",c,num2str(V_settlingtime*1e3))
	sprintf str,"SetCompliance(\"avg\",%g,\"%s\")",a,num2str(V_complianceI*1e6); Execute str
	sprintf str,"SetIncrement(\"incr\",%g,\"%s\")",V_incrVolt,num2str(V_incrVolt*1e3); Execute str
End

Function SelectCell(ctrlName,popNum,popStr) : PopupMenuControl																					// Sample or Reference
	String ctrlName,popStr; Variable popNum
	if (popNum<3)
//		ArduinoDigital(4,popNum-1)
	endif
End

Function Go(ctrlName) : ButtonControl
	string ctrlName
	SVAR S_username
	ControlInfo tab0
	Variable controlType=V_Value; String cmd
	switch (controlType)
		case 0:
			break
		case 1:
			CellTest(S_username)
			break
		case 2:
			MultiCellTest(1)
			break
		case 3:
			Stability()
			break
		case 5:
			VdP("")
			break
	endswitch
End

Function SetAverage(ctrlName,popNum,popStr) : PopupMenuControl																					// Set # of scans for NIDAQ data acquisitions
	String ctrlName,popStr; Variable popNum
	NVAR V_navg
	V_navg=str2num(popStr)
End

Function PPTDuration(ctrlName,popNum,popStr) : PopupMenuControl
	String ctrlName,popStr; Variable popNum
	NVAR V_PPTDuration
	V_PPTDuration=str2num(popStr)
End

Function pulsedMode(ctrlName,popNum,popStr) : PopupMenuControl
	String ctrlName,popStr; Variable popNum
	NVAR V_pulsedMode
	V_pulsedMode=popNum-1
End

Function dutyCycle(ctrlName,popNum,popStr) : PopupMenuControl
	String ctrlName,popStr; Variable popNum
	NVAR V_dutyCycle
	V_dutyCycle=str2num(popStr)
End

Function setInteg(ctrlName,popNum,popStr) : PopupMenuControl
	String ctrlName,popStr; Variable popNum
	NVAR V_integTime
	V_integTime=str2num(popStr)
End

Function SetWE(ctrlName,popNum,popStr) : PopupMenuControl
	String ctrlName,popStr; Variable popNum
	NVAR V_ModeWE
	SVAR S_WE
	S_WE=popStr; V_ModeWE=popNum
End

Function SetTreatment(ctrlName,popNum,popStr) : PopupMenuControl
	String ctrlName,popStr; Variable popNum
	SVAR S_WETreatment
	S_WETreatment=popStr
End

Function SetCE(ctrlName,popNum,popStr) : PopupMenuControl
	String ctrlName,popStr; Variable popNum
	SVAR S_CE
	S_CE=popStr	
End

Function SetDye(ctrlName,popNum,popStr) : PopupMenuControl
	String ctrlName,popStr; Variable popNum
	NVAR V_ModeDye
	SVAR S_Dye
	S_Dye=popStr; V_ModeDye=popNum
	if (!cmpstr(S_Dye,"none"))
		new_molecule()
	endif
	Button sp_dye0,win=ConfigPanel,title="Dye: "+popStr
//	LoadPICT/O/Q/M="Select a ChemDraw Molecule"/P=Moleculepath S_Dye,PICT_0
EndMacro

Function SetSolvent(ctrlName,popNum,popStr) : PopupMenuControl
	String ctrlName,popStr; Variable popNum
	NVAR V_modeSolvent
	SVAR S_Solvent
	S_Solvent=popStr; V_modeSolvent=popNum
End

Function New_molecule()
	SVAR S_Dye
	String a
	Prompt a,"Enter the name of the Molecule, after first having copied it from ChemDraw"
	DoPrompt "New Dye Molecule",a	
	S_Dye=a
End

Function/T Dye()																																// Dye Specifications
	NVAR V_Time,V_dyeConc
	SVAR S_specification,S_DyeBatch,S_Solvent
	sprintf S_specification,"(%s),%s, %.0W0PM, %gh",S_DyeBatch,S_Solvent,V_dyeConc,V_time
End

Function/T WE()
	NVAR V_length,V_Porosity,V_FireTemp
	SVAR S_layer,S_WE,S_WEBatch,S_WETreatment
	S_layer=S_WEBatch+","+num2str(V_length*1e6)+"µm-"+num2str(V_Porosity)+"%, "+num2str(V_FireTemp)+"°C, "+S_WETreatment
End

Function ColumnLabels()
	WAVE/T Electrolytes
	string s
	if (!WaveExists(Electrolytes))
		return 0
	endif
	Variable i,ncols=DimSize(Electrolytes,1)
	for (i=0; i<ncols; i+=1)
		SetDimLabel 1,i,$StringFromList(i,"Electrolyte;  Conc;Molten Salt;     [I2];    [Base];  Additives;   Solvent"),Electrolytes
	endfor
End

Function Colours()
	WAVE/T Electrolytes
	WAVE sjack
	Redimension/N=(DimSize(Electrolytes,0),-1,3) sjack
	SetDimLabel 2,1,foreColors,sjack; SetDimLabel 2,2,backColors,sjack																				// Colour determined by DimLabel
	sjack[][][1]=3; sjack[][][2]=1																												// Set colours from ColourWave
End

Function CellMode(ctrlName,popNum,popStr) : PopupMenuControl
	String ctrlName,popStr; Variable popNum
	ListBox lb0,mode=(popNum-1)?8:3
End

Function SetElectrolyte(ctrlName,row,col,event)
	String ctrlName; 	Variable row,col,event
	WAVE/T w=Electrolytes
	WAVE sjack
	NVAR V_modeElectrolyte
	SVAR S_Electrolyte
	variable i
	ControlInfo/W=Electrolyte pop
	S_Electrolyte=""
	if (event==2)
		if (V_Value==1)
			for(i=1; i<7; i+=1)																												// Check for blanks
				S_Electrolyte+=SelectString(strlen(w[row][i][0])>0,"",w[row][i]+",")
			endfor
		else
			for(i=1; i<7; i+=1)																												// Check Electrolytes for Multiple selections
				S_Electrolyte+=SelectString(sjack[row][i][0]&~0x02,"",w[row][i]+",")
			endfor
		endif
		V_modeElectrolyte=row; S_Electrolyte=S_Electrolyte[0,strlen(S_Electrolyte)-2]
	endif
	Button sp_el0,win=ConfigPanel,title="Electrolyte: "+w[row][0]
end

Function SetLamp(ctrlName,popNum,popStr) : PopupMenuControl
	String ctrlName,popStr; Variable popNum
	WAVE/T DiodeLabels,MenuLabels
	NVAR V_lamp,V_misMatch
	SVAR S_lamp
	V_lamp=(popNum>1); V_misMatch=(popNum>1)?1:1.12; S_Lamp=popStr
	MenuLabels=DiodeLabels[p][V_lamp]
	if (V_Lamp)
		FilterWheel("Filter",1,"0% Sun")
		PopupMenu filter0,disable=0
	else
		FilterWheel("Filter",5,"100% Sun")
		PopupMenu filter0,disable=1
	endif
End

Function LampControl(ctrlName,varNum,event) : SetVariableControl																					// Slider
	String ctrlName; Variable varNum,event
	WAVE dummyw1,PSUSettings
	NVAR V_lamp
	Variable a,b,level
	if (V_lamp)
		Findlevel/Q PSUSettings,varNum; b=round(V_levelx)																						// Get light level #
		a=6-(1*(b==0)+2*(b==2)+3*(b==4)+4*(b==5)+5*(b==10)); FilterWheel("Filter",a,ctrlName)
		PopupMenu filter0 win=configpanel,mode=a; ControlUpdate/W=configpanel filter0
	else
		level=varNum*136.5
		FilterWheel("Filter",5,"100% Sun")																										// Ensure the filter is open
		if (level>4096)
			level=4096
		endif
		ArduinoOutAnalog(0,level)																												// Calibrated light intensities for DAC0
	endif
end

Function FilterWheel(ctrlName,popNum,popStr) : PopupMenuControl																					// Digital out 0, x000xxxx on Keithley Source meter
	String ctrlName,popStr; Variable popNum
	Command(":SOUR2:TTL:LEV "+num2str(mod(popNum+1,6)))
End

Function SetIncrement(ctrlName,popNum,popStr) : PopupMenuControl
	String ctrlName,popStr; Variable popNum
	NVAR V_incrVolt
	V_incrVolt=str2num(popStr)*1e-3																											// Scale to mV
End

Function VoltLimit(ctrlName,varNum,varStr,varName) : SetVariableControl																			// Set at 400mV limit
	String ctrlName,varStr,varName; Variable varNum
	NVAR V_voltFlag,V_endVolt
	V_voltFlag=varNum>0.2?1 :0
End

Function Calibrate(ctrlName) : ButtonControl
	string ctrlName
	WAVE Refdiodes
	NVAR V_area,V_corrGain,V_numpnts,V_RefCalibration5,V_RefCalibration,V_RefCalibration2,V_RefCalibration3,V_RefCalibration4,V_RefCalibration5
	SVAR S_CalibrationFile,S_username
	Variable a,b,c,d,e,f,ref=6; V_numpnts=100
	if (cmpstr(S_username,"Robin"))
		beep; DoAlert 0,"Who you!. "+S_username+", you are not qualified to do a calibration! - Ask Robin -"
		abort
	endif
	CtrlBackground stop
	DoAlert 0,"Put a Calibrated Si Cell in the Test Cell holder"
	Cell_Area(); V_corrGain=1																													// Amplifier Gain Correction for Keithley is assumed as 1
	Command(":FORM:ELEM CURR")
	Command(":SOUR:VOLT:MODE FIX;:SOUR:DEL 0.01")																							// Fixed operation mode
	Command(":SENS:CURR:PROT "+num2str(ceil(16*V_area)/1e3))																				// Set current compliance	
	Command(":SENS:CURR:RANGE:AUTO 1")
	Command(":OUTP:STAT ON")																												// Switch Output ON
	TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Measuring Test Cell"; ControlUpdate/W=configpanel msg
	SelectCell("Cell",2,"Test Cell")																												// Select Test Cell
	Sleep/S 6; a=ReadDataWave(0.5,"CURR","VOLT",0)																							// Measure dark intensity value
	Shutter("",2,"Open")																														// Open Shutter #1
	Sleep/S 2; b=ReadDataWave(0.5,"CURR","VOLT",0)																							// Measure 1/10 intensity
	FilterWheel("Filter",7,"100% Sun"); PopupMenu filter0 win=configpanel,mode=5																	// Set to 1/1 Sun
	Sleep/S 6; c=ReadDataWave(0.5,"CURR","VOLT",0)																							// Measure 1/1 sun intensity
	SelectCell("Cell",1,"Ref Cell")																												// Select Reference Cell
	Sleep/S 2; a+=ReadDataWave(0.5,"CURR","VOLT",0)																							// Measure dark intensity value
	FilterWheel("Filter",3,"10% Sun"); PopupMenu filter0 win=configpanel,mode=1																	// Set to 1/10 Sun
	SelectCell("Cell",1,"Ref Cell")																												// Select Reference Cell
	TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Measuring Reference Cell"; ControlUpdate/W=configpanel msg
	print a/2,b,c
	b-=(a/2); c-=(a/2)
	print "Ref. calibration @ 0.1 sun: Calibration Si cell, new value:",b,"% error:",100*(Refdiodes[ref][2]/V_corrGain/b-1)
	print "Ref. calibration @    1 sun: Calibration Si cell, new value:",c,"% error:",100*(Refdiodes[ref][6]/V_corrGain/c-1)
	print "Amplifier Gain Correction, - new:",Refdiodes[ref][6]/c,", - old:",V_corrGain
	if ((abs(100*Refdiodes[ref][2]/V_corrGain/b-1)>0.05)%|(abs(100*Refdiodes[ref][6]/V_corrGain/c-1)>0.02)==1)
		beep; beep
		DoAlert 1,"Calibration values have drifted out. Check PhotoCell, Xe lamp or calibration values!"
		if (V_Flag==1)
			V_corrGain=Refdiodes[ref][6]/c																									// Update Buffer Amplifier Gain
			a=ReadDataWave(0.5,"CURR","VOLT",0)																								// Measure dark intensity value
			Shutter("",2,"Open")																												// Open Shutter #1
			b=ReadDataWave(0.5,"CURR","VOLT",0)																								// Measure 1/10 sun intensity
			FilterWheel("Filter",4,"30% Sun"); PopupMenu filter0 win=configpanel,mode=2
			Sleep/S 6; c=ReadDataWave(0.5,"CURR","VOLT",0)																					// Measure 1/3 sun intensity
			FilterWheel("Filter",5,"53% Sun"); PopupMenu filter0 win=configpanel,mode=3
			Sleep/S 6; d=ReadDataWave(0.5,"CURR","VOLT",0)																					// Measure 1/2 sun intensity
			FilterWheel("Filter",6,"64% Sun"); PopupMenu filter0 win=configpanel,mode=4
			Sleep/S 6; e=ReadDataWave(0.5,"CURR","VOLT",0)																					// Measure 3/4 sun intensity
			FilterWheel("Filter",7,"100% Sun"); PopupMenu filter0 win=configpanel,mode=5
			Sleep/S 6; f=ReadDataWave(0.5,"CURR","VOLT",0)																					// Measure 1/1 sun intensity
			Shutter("",1,"Close")																												// Close Shutter #1
			Sleep/S 6; a+=ReadDataWave(0.5,"CURR","VOLT",0)																					// Measure dark intensity value
			FilterWheel("Filter",3,"10% Sun"); PopupMenu filter0 win=configpanel,mode=1															// Set to 1/10 Sun
			V_RefCalibration5=0.0096/Refdiodes[9][4]; V_RefCalibration4=0.0305/Refdiodes[9][3]
			V_RefCalibration3=0.053/Refdiodes[9][2]; V_RefCalibration2=0.064/Refdiodes[9][1]
			V_RefCalibration=0.1/Refdiodes[9][0]																								// 1000 or 964 W/m2/nm
			print "Correction Factors @ 0.1 sun:",V_RefCalibration5,", @1 sun:",V_RefCalibration
			S_CalibrationFile="KIDAC: Ref Cell#"+num2str(ref)+", "+Date()
		endif
	endif
	SelectCell("Cell",2,"Test Cell")																												// Select Test Cell
	ScanFinish()
	TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Standby"; ControlUpdate/W=configpanel msg
End	

Function Stability()																															// Direct Scan control from Igor macro
	variable a
	WAVE/T DiodeLabels
	WAVE PhotoCurrent,PhotoDiode,Voltage,Potential,Thermopile,Input0,Input1,Input2,Input3,Input4
	NVAR V_counter,V_scans,V_steptime,V_numpnts
	SVAR allwaves,S_status,S_windowname,option5
	ControlInfo/W=configpanel filter0																											// Get current Filter Wheel Text#
	String wname="PhotoCurrent"+num2str(V_Value); S_Status=S_Value+";"+num2str(V_Value)
	Redimension/N=200 PhotoCurrent
	Redimension/N=(V_scans) Input0,Input1,Input2,Input3,Input4
	SetScale/P x 0,V_steptime,"m" Input0,Input1,Input2,Input3,Input4
	DoWindow/F GraphTStability
	if (!V_Flag)
		Execute "GraphTStability()"
	endif
	V_counter=0; S_windowname="GraphTStability"
	DoWindow/F IVGraph
	if (!V_Flag)
		allwaves=wname+","
		Execute "IVGraph()"; Execute "AcquireStyle1()"
	else
		allwaves=WaveList("PhotoCurrent*",",","win:IVGraph")
		if (StrSearch(allwaves,wname,0)<0)																										// Check if wave is already displayed
			AppendtoGraph $wname; ModifyGraph/Z lstyle($wname)=V_Value
			Legend/C/N=text0/J/F=0/A=MC/X=62/Y=-48 Legendtext(allwaves+wname,1)
		endif
	endif
	DoUpdate
	TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Testing for Voc"; ControlUpdate/W=configpanel msg
	ScanTest(0)
	Redimension/N=(V_numpnts) Thermopile,PhotoDiode,Voltage,PhotoCurrent,Potential
	TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Testing Cell Stability"; ControlUpdate/W=configpanel msg
	SetBackground IVScan()
	CtrlBackground period=(V_steptime*60*60),start																								// Approx 60*60/m 
	option5="Layout IV Data"; BuildMenu "Macros"
End

Function IVScan()
	WAVE Offset,PhotoCurrent,Thermopile
	WAVE Input0,Input1,Input2,Input3,Input4,PSUSettings
	WAVE IVparams
	NVAR V_DataChannel2,V_RefCalibration,V_sun,V_counter
	SVAR S_Status
	String cmd
	Variable b=str2num(StringfromList(1,S_Status))
	Variable a=12*(7-b)
	LampControl("Filter",PSUSettings(b),4)																										// Open Shutter #1
	Sleep/S 4
	sprintf cmd,"Sun(\"%s\",%g)",StringfromList(0,S_Status),b; Execute cmd
	if (!(V_sun-1))
		LampControl("Filter",PSUSettings(b),4)																									// For non-stop Sun control
	endif
	sprintf cmd,"IV_params(\"%s\")","PhotoCurrent"+StringfromList(1,S_Status); Execute cmd														// Calculate Voc, Isc, Upmax & Ipmax
	DoWindow/F IVGraph
	Input0[V_counter]=IVparams[a+3]; Input1[V_counter]=IVparams[a+4]; Input2[V_counter]=IVparams[a+6]; Input3[V_counter]=IVparams[a+7]
	Input4[V_counter]=abs(V_DataChannel2*V_RefCalibration)																					// Power in
	Save/C/O/P=home Input0,Input1,Input2,Input3,Input4
	V_counter+=1
	if (V_counter>(numpnts(Input0)-1))
		LampControl("Filter",PSUSettings(4),4)
		cmd="ScanFinish()"; Execute cmd
		DoWindow/F GraphTStability
		return 1
	else
		return 0
	endif
End

Function ScanRef()																															// To estimate Voc
	NVAR V_complianceI,V_DataChannel0,V_DataChannel2,V_area,V_numpnts
	Variable a,b
	b=floor(log(min(1,ceil(0.04*V_area/V_complianceI)*V_complianceI))); a=ceil(min(1,ceil(0.04*V_area/V_complianceI)*V_complianceI)*10^-b)*10^b		// Check for max Compliance
	Command(":SENS:CURR:PROT "+num2str(a)	)																								// (Area x 40) mA current compliance
	Command(":SENS:CURR:RANGE:AUTO 1")
	Command(":OUTP:STAT ON")																												// Switch Output ON
	V_DataChannel0=ReadData(1)																												// Read Current
//	SelectCell("Cell",1,"Ref Cell")																												// Select Ref. Cell
	Command(":SYST:FRSW REAR")																												// Switch to rear, also switches Output OFF
	Sleep/S 2
	Command(":SOUR:VOLT:LEV:IMM:AMPL 0")	
	Command(":SENS:CURR:PROT 0.01")																										// 10 mA current compliance for Ref
	Command(":OUTP:STAT ON")		
	V_numpnts=128; a=V_area; V_area=0.5																										// So switch Output ON again
	V_DataChannel2=ReadDataWave(0.5,"CURR","VOLT",0)																						// Sense Current on 0.5 cm^2 Si Ref diode
	Command(":SYST:FRSW FRON")																												// Switch to front
//	SelectCell("Cell",2,"Test Cell")																												// Select Test Cell
	V_area=a; Sleep/S 2
End

Function ScanDirection(ctrlName,popNum,popStr) : PopupMenuControl
	String ctrlName,popStr; Variable popNum
	NVAR V_scanDir
	SVAR S_userName
	switch (popNum)
		case 1:
			V_scanDir=1; SetVariable iv_start,win=ConfigPanel,title="<-"
			break
		case 2:
			V_scanDir=-1; SetVariable iv_start,win=ConfigPanel,title="->"
			break
	endswitch
End

Function VocMode(ctrlName,popNum,popStr) : PopupMenuControl																					// Set Voc drift mode
	String ctrlName,popStr; Variable popNum
	NVAR V_vocDrift
	V_vocDrift=popNum-1
End

Function ScanTest(flg)																															// To estimate Voc, no AUTO scaling
	Variable flg
	WAVE PhotoCurrent,Voltage
	NVAR V_area,V_complianceI,V_defaultVoc,V_numCell,V_settlingtime,V_4WThreshold,V_startVolt,V_endVolt,V_incrVolt,V_scanDir,V_numpnts,V_VocDrift,V_v0,V_v1
	Variable a,b,bias=0,c=0.048*V_area,t,v1,v2
	Command(":SENS:FUNC 'VOLT:DC'")																											// Define sense function to get Voc estimate
	Command(":SENS:VOLT:PROT "+num2str(V_numCell*V_defaultVoc+0.6))
	Command(":SOUR:FUNC:MODE CURR")
	if (V_settlingtime<0)
		Command(":SOUR:CURR:MODE FIX;:SOUR:DEL:AUTO 1")																					// Auto operation mode
	else
		Command(":SOUR:CURR:MODE FIX;:SOUR:DEL "+num2str(4*V_settlingtime))																	// Fixed operation mode
	endif
	Command(":SOUR:VOLT:LEV:IMM:AMPL "+num2str(bias))																						// Estimate Voc
	Command(":OUTP:STAT ON")																												// Switch Output ON
	v1=ReadData(0)																															// Read Voltage
	if (V_Vocdrift&flg)
		DoWindow/F Graph0
		if (!V_flag)
			Execute "Graph0()"; AutoPositionWindow/E/M=0/R=ConfigPanel
		endif
//		t=StartMSTimer
		a=VocDrift(v1); v2=a
//		print StopMSTimer(t)/1e6
	endif
	Command(":SOUR:DEL "+num2str(V_settlingtime))																							// Reset SettlingTime
	Command(":SOUR:CURR:LEV:IMM:AMPL "+num2str(V_complianceI))																				// Estimate slope/series resistance
	v2=ReadData(0)																															// Read Voltage
	Command(":SENS:FUNC 'CURR:DC'")																											// Reset to default SENS
	Command(":SOUR:FUNC:MODE VOLT")
	Command(":SENS:CURR:RANGE:AUTO 0")																									// Disable Autoranging
	b=floor(log(min(1,ceil(0.04*V_area)))); a=ceil(min(1,ceil(0.04*V_area))*10^-b)*10^b																// Check for max Compliance
	if ((-V_area*0.025)<V_4WThreshold)																										// Check for 0.05A threshold limit with default area, 25mA/cm^2
		Command(":SENS:CURR:PROT 1")
		beep; beep; DoAlert 1,"High Current Device. Have you configured Sourcemeter for 4-wire Sense.  \rAttention, potentially lethal currents!!!"
		if (V_Flag>1)
			abort
		endif
		Command(":SYST:RSEN 1")																												// 
	else
		Command(":SENS:CURR:PROT "+num2str(a))																								// Set current compliance at ƒ26mA/cm2
	endif
	a=min(1,max(ceil(c/V_complianceI)*V_complianceI,V_complianceI))																				// Limit the values
	Command(":SENS:CURR:RANGE:UPP "+num2str(a)); Command(":SENS:CURR:PROT "+num2str(a))													// Select expected current range
	V_numpnts=ceil((v2-V_endVolt)/V_incrVolt)+1; V_startVolt=V_incrVolt*(V_numpnts-1)+V_endVolt
	if (V_endVolt>V_startVolt)
		DoAlert 0,"Device has serious problem. Ensure that the Upper Voltage limit("+num2str(V_startVolt)+"V) is > than Lower limit("+num2str(V_endVolt)+"V)"
		abort
	endif
	V_v0=V_startVolt; V_v1=V_endVolt
	if (V_scanDir==-1)
		V_v0=V_endVolt; V_v1=V_startVolt
	endif
	Redimension/N=(V_numpnts) Voltage,PhotoCurrent; SetScale/I x V_v0,V_v1,"V" PhotoCurrent
	Command(":OUTP:STAT ON")																												// Switch Output ON, yet again
End

Function VocDrift(V)																															// To watch Voc drift
	Variable V
	WAVE Input3																																// Input3 is for V vs s
	NVAR V_area,V_delay,V_settlingtime,V_Vocdrift
	SVAR S_warning
	Variable a,b,c=min(1,0.048*V_area),d1,d2,v2,n=1,npnts=2000,flg1,flg2																			// 250 points gives about 60s
	Redimension/N=(npnts) input3; SetScale/P x 0,0.1137,"s", Input3; SetScale d 0,0,"V", Input3; input3=NaN; Input3[0]=V
	Command(":SOUR:DEL 0.04")																												// Fixed operation mode
	do
		v2=ReadData(0); input3[n]=v2																											// Read Voltage, Source 0 current
		WaveStats/Q/R=[n-16,n] input3; d2=V_avg																								// Try different statistics: V_avg
		if ((flg1)&(n>8)&(abs(d2-d1)>5e-5))																									// flg a steep slope
			flg1=1
		endif
		if (flg1)
			if ((n>8)&((d2-d1)>5e-5))																											// flg a +ve slope
				flg2=1
			endif
			if ((V_Vocdrift==2)&flg2&(abs(d2-d1)<2e-5))
				print "Large +ve slpoe",n,"Voltage:",V_avg,"Delta:",d2-d1,flg1,flg2
				S_warning=""
				break
			endif
		else
			if ((n>8)&(abs(d2-d1)<5e-6))
				print "Small slope",n,"Voltage:",V_avg,"Delta:",d2-d1,flg1,flg2
				break
			endif
		endif
		n+=1
		if (n>npnts-1)
			print "Max limit:",n,d2-d1,V_avg,flg1
			S_warning="Voc drift limit"
			break
		endif
		d1=d2
	while(1)
	WaveStats/Q Input3; Cursor/W=Graph0 A Input3 V_maxLoc
	return v2
end

Function ScanSettings()																														// Set user supplied scan limits
	WAVE PhotoCurrent,Voltage
	NVAR V_DataChannel0,V_startVolt,V_endVolt,V_v0,V_v1,V_incrVolt,V_numpnts,V_complianceI,V_scanDir
	Variable a
	a=max(ceil(-1.2*V_DataChannel0/V_complianceI)*V_complianceI,0.1)																			// Set default to 100mA compliance
	Command(":SENS:CURR:PROT "+num2str(a)); Command(":SENS:CURR:RANGE:UPP "+num2str(a))													// Select expected current
	Command(":SENS:CURR:RANGE:AUTO 1")
	V_v0=V_startVolt; V_v1=V_endVolt; V_numpnts=ceil((V_v0-V_v1)/V_incrVolt)+1
	if (V_scanDir==-1)
		V_v0=V_endVolt; V_v1=V_startVolt
	endif
	Redimension/N=(V_numpnts) Voltage,PhotoCurrent; SetScale/I x V_v0,V_v1,"V" PhotoCurrent
	Command(":OUTP:STAT ON")																												// Switch Output ON, yet again
End

Function ScanVoltage()
	WAVE DataWave,PhotoCurrent,Voltage
	NVAR sourcemeter,V_v0,V_v1,V_numpnts,V_settlingtime
	Variable a,b,n
	a=(V_v1-V_v0)/(V_numpnts-1)																											// Calculte the Voltage Increment & sign
	Redimension/N=(2*V_numpnts) DataWave
	Command(":STAT:MEAS:ENAB 512")																										// Set SRQ
	Command(":*SRE 1")	
	Command(":SOUR:DEL "+num2str(V_settlingtime))
	Command(":SOUR:VOLT:MODE SWE")																										// Sweep operation mode
	Command(":SOUR:VOLT:START "+num2str(V_v0)+"; STOP "+num2str(V_v1)+"; STEP "+num2str(a))
	Command(":TRAC:CLE")																													// Clear Buffer
	Command(":TRAC:POIN "+num2str(V_numpnts)+";:TRIG:COUN "+num2str(V_numpnts))															// # of Triggers
	Command(":TRAC:FEED:CONT NEXT")
	Command(":INIT")																															// Reset time to zero
	do
		NI4882 ibrsp={sourcemeter}
		if (V_flag>32)																														// ((status%&32)==32)
			break
		endif
		n+=1
	while (1)
	GPIBWrite2 ":TRAC:DATA?"																													// also consider GPIBWrite2 ":READ?"
	GPIBReadBinary2/TYPE=8 a,b; GPIBReadBinaryWave2/TYPE=2 DataWave; GPIBReadBinary2/TYPE=8 a
	Voltage=Datawave[2*p]; Photocurrent=Datawave[2*p+1]
End

Function ScanPulsed(sense,source)
	string sense,source
	WAVE DataWave,Voltage,PhotoCurrent
	NVAR sourcemeter,V_i0,V_i1,V_v0,V_v1,V_dutyCycle,V_integTime,V_incrCurrent,V_incrVolt,V_numpnts
	SVAR S_windowname
	Variable a,b,bias,m,n,npnts,pulseWidth,start,finish,step
	if (!CmpStr(sense,"CURR"))
		start=V_v0; finish=V_v1; step=V_incrVolt
	else
		start=V_i0; finish=V_i1; step=V_incrCurrent
	endif
	npnts=abs(round((finish-start)/step))+1; bias=round(start/step)*step																			// Calculate the Voltage Increment
	b=min(start,finish); step*=sign(finish-start)
	pulseWidth=40*V_dutyCycle/100
	Redimension/N=(10+npnts*40) Voltage,Photocurrent
	TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Uploading Waveform"; ControlUpdate/W=configpanel msg
	NI4882 ibtmo={sourcemeter,15}
	Command(":STAT:MEAS:ENAB 512")																										// Set SRQ
	Command(":*SRE 1")	
	Command(":FORM:ELEM "+sense+","+source)																									// Output format
	Command(":SENS:FUNC '"+sense+":DC'")																									// Define sense function
	Command(":SOUR:"+source+":MODE LIST")																									// Custom Sweep operation mode
	Command(":SOUR:LIST:"+source+" "+wave2str(10,b))																							// Build waveform
	m=10
	do
		Command(":SOUR:LIST:"+source+":APP "+wave2str(pulseWidth,bias))
		Command(":SOUR:LIST:"+source+":APP "+wave2str(40-pulseWidth,b))
		bias+=step
		m+=40
		n+=1
	while (n<npnts+1)
	V_numpnts=n-1
	Redimension/N=(2*m) DataWave
	Command(":SENS:"+sense+":NPLC "+num2str(V_integTime))																					// Integration Time
	Command(":SOUR:DEL 0")
	Command(":TRIG:DEL 0")
	Command(":OUTP:STAT ON")																												// Switch Output ON
	Command(":SYST:AZER:STAT OFF")																											// Auto zero OFF
	Command(":TRAC:CLE")																													// Clear Buffer
	Command(":DISP:ENAB OFF")
	Command(":SYST:TIME:RES")																												// Reset time to zero
	Command(":TRAC:POIN "+num2str(m)+";:TRIG:COUN "+num2str(m))																			// # of Triggers
	TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Measuring Test Cell"; ControlUpdate/W=configpanel msg; DoUpdate
	Command(":TRAC:FEED:CONT NEXT")
	Command(":INIT")																															// Reset time to zero
	do
		NI4882 ibrsp={sourcemeter}
		if (V_flag>32)																														// ((status%&32)==32)
			break
		endif
		n+=1
	while (1)
	GPIBWrite2 ":TRAC:DATA?"																													// also consider GPIBWrite2 ":READ?"
	GPIBReadBinary2/TYPE=8 a,b; GPIBReadBinaryWave2/TYPE=2 DataWave; GPIBReadBinary2/TYPE=8 a
	Voltage=Datawave[2*p]; Photocurrent=Datawave[2*p+1]
	Command(":DISP:ENAB ON")
	ProcessData()
End

Function ProcessData()																														// For datawaves scaled in points
	WAVE Voltage,PhotoCurrent,PhotoCurrent0,input0,W_FindLevels
	NVAR  V_v0,V_v1,V_incrVolt,V_numpnts,V_dutyCycle
	Variable a,b=min(V_v0,V_v1),c
	FindLevels/Q/B=3 PhotoCurrent,5e-5
	FindLevels/Q Voltage,abs(b+V_incrVolt/2)
	Variable p0=(mod(V_levelsFound,2)>0),p1=V_levelsFound
	Redimension/N=((p1-p0)/2) Input0
	Input0=W_FindLevels[2*p+1]-W_FindLevels[2*p]
	WaveStats/Q Input0; c=100*V_avg/V_dutyCycle
	a=round((pnt2x(Voltage,numpnts(Voltage)-1)-pnt2x(Voltage,0))/c)
	Redimension/N=(2*a) W_FindLevels
	if (V_v0<V_v1)
		Rotate 2,W_FindLevels
		W_FindLevels[0]=W_FindLevels[2]-c; W_FindLevels[1]=W_FindLevels[2]-(c-V_avg)
	else
		W_FindLevels[2*a-2]=W_FindLevels[2*a-3]+Input0[a-1]; W_FindLevels[2*a-1]=W_FindLevels[2*a-3]+2*Input0[a-1]
	endif
	PhotoCurrent0=mean(PhotoCurrent,pnt2x(PhotoCurrent,x2pnt(Voltage,W_FindLevels[2*p])+1),pnt2x(PhotoCurrent,x2pnt(Voltage,W_FindLevels[2*p+1])-1))
	SetScale/I x V_v0,V_v1,"V",PhotoCurrent0
	Duplicate/O PhotoCurrent0,PhotoCurrent
End

Function ScanFinish()																															// Close Shutter #1
//	Shutter("",1,"Close")	
	FlushKeithley()
End

Function FlushKeithley()
	NVAR V_biasVoltage
	Command(":OUTP:STAT OFF")																												// Switch Output OFF
	Command(":*CLS")	
	Command(":*SRE 48")	
	Command(":FORM:ELEM VOLT,CURR")																										//Output type
	Command(":STAT:MEAS:ENAB 0")
	Command(":SENS:VOLT:NPLC 1.0;:SENS:FUNC 'CURR:DC'")																						// Default Integration Time
	TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Standby"
	Command(":SOUR:FUNC:MODE VOLT;:SOUR:VOLT:MODE FIX;:SOUR:VOLT:LEV:IMM:AMPL 0"); V_biasVoltage=0
	Command(":TRIG:COUN 1")
End
		
Function Sun(ctrlName,level)
	String ctrlName; Variable level
	WAVE IVParams,PhotoCurrent,PSUSettings
	NVAR V_area,V_length,V_dataChannel0,V_dataChannel2,V_refCalibration,V_supos,V_numpnts
	NVAR V_complianceI,V_delay,V_pulsedMode,V_settlingtime,V_incrVolt,V_Lamp,V_v0,V_voltFlag,V_Henry
	SVAR allwaves,d_t,S_exptType,option3,option5,S_warning,S_windowname
	TabControl tab0,win=configPanel,value=1; tabPanels("tab0",1)
	if (V_Lamp)
		LampControl("Filter",PSUsettings[level],4)																								// xx% Sun
		Sleep/S 8																															// Need if measuring only 1 Sun
	else
		LampControl("Diode",PSUsettings[level],4)																								// xx% Sun
	endif
	String str,wname; Variable a=12*level
	S_warning=""; S_exptType=".sIV"; V_supos=0
	wname=SelectString((level<10),"DarkCurrent","PhotoCurrent"+num2str(level))
//	NI4882 iblock={gpib_bus}
	if (level<7)																																// Block if Dark Current 
		TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Measuring Reference Cell"; ControlUpdate/W=configpanel msg
		ScanRef()																															// Measure Reference light Intensity
	endif
	IVParams[a+11][V_supos]=V_DataChannel0; IVParams[a][V_supos]=V_DataChannel2
	IVparams[a+1][V_supos]=abs(V_DataChannel2*V_RefCalibration)
	DoWindow/F IVGraph
	if (!V_Flag)
		allwaves=wname+","; Execute "IVGraph()"; Execute "AcquireStyle1()"; DisplayAddons()
	else
		allwaves=SortList(WaveList("*Current*",",","win:IVGraph"),",",16)
		CheckDisplayed/W=IVGraph $wname																									// Check if wave is already displayed
		if (!V_Flag)
			AppendtoGraph $wname; ModifyGraph/Z lstyle($wname)=level
			if (cmpstr("DarkCurrent",wname)==0)
				ModifyGraph/Z lstyle(darkcurrent)=0,rgb(darkcurrent)=(0,65535,0)
			endif
			Legend/C/N=textL/J/F=0/A=MC/X=60/Y=0 Legendtext(allwaves+wname,1)
		endif
	endif
	AutoPositionWindow/E/M=1/R=ConfigPanel; S_windowname="IVGraph"
	DoUpdate
	if (V_voltFlag)																															// Flag for manual setting of Voltage sweep limits
		ScanSettings()
	else
		TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Testing for Voc"; ControlUpdate/W=configpanel msg; DoUpdate
		ScanTest(level<7)
	endif
	TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Measuring Cell @ "+ctrlName; ControlUpdate/W=configpanel msg; DoUpdate
	do
		Command(":SOUR:VOLT:LEV:IMM:AMPL "+num2str(V_v0))																					// Set potential on cell to Start Voltage
		Sleep/S V_delay
		if (V_pulsedMode)
			V_incrVolt=0.02; PopupMenu iv_incr,mode=4; DoUpdate
			ScanPulsed("CURR","VOLT")
		else
			ScanVoltage()																													// Selected gain depends on light intensity
		endif
		Duplicate/O PhotoCurrent,$wname
		if (level<10)																															// Block if Dark Current 
			IV_Params(wname,0)																												// V_supos not yet incremented
		endif
		sprintf str,"IT:%g;AR:%g;FT:%g;CM:%g;ST:%g;SV:%g;ET:%g",IVparams[a+1][V_supos],V_area,V_length,V_complianceI,V_settlingTime,V_v0,V_delay
		Note/K $wname,str
		if (KillJoy())
			ScanFinish()
			beep; Abort "You have killed the IV Routine"
		endif
		if (abs(IVparams[a+4][V_supos])<V_complianceI/1000)																					// Jsc < 32 mA/cm2
			S_warning="\f01<Bad Cell>\f00"
		endif
		if ((IVparams[a+4][V_supos]>(0.9*IVparams[a+7][V_supos]))&!V_Henry)																	//abs(IVParams[a+10][V_supos])>0.85)	Check for high Fill Factor
			ControlInfo/W=configpanel iv_gain1
			if (V_Value==12)																													// If Settling Time becomes large, abort experiment
				beep; Abort "Have killed the IV Routine due to cell failure"
			endif
			PopupMenu iv_gain1 win=configpanel,mode=V_Value+1
			ControlInfo/W=configpanel iv_gain1
			SetDelay("SettlingTime",V_Value,S_Value); ControlUpdate/W=configpanel iv_gain1
			Command(":*CLS")	
			Command(":SOUR:DEL "+num2str(V_settlingtime))
		else
			break																															// Exit loop
		endif
	while (1)
	ScanFinish()
//	NI4882 ibunlock={gpib_bus}
	WaveStats/Q/R=(0,0.1) PhotoCurrent; IVparams[a+2][V_supos]=abs(100*V_sdev/V_avg)														// Estimate noise of measuremnt
	if (((abs(V_max-V_min)/V_area)>1e3)&(level==7))
		beep; DoAlert 1,"Large shunt or Device is Ohmic.  \rCheck cables or Bad Cell"
	endif
	WaveStats/Q $wname; SetAxis left,V_complianceI*V_area,floor(V_min*5e3)/5e3
	d_t=date()+" / "+time()
	option3="Data Analysis ..."; option5="Layout All Data"; BuildMenu "Macros"
End
	
Function CellTest(ctrlName) : ButtonControl																										// Complete Diagnostic package
	String ctrlName
	WAVE PSUSettings
	NVAR V_Henry
	SVAR allwaves,option3,option5
	allwaves=""; DoUpdate																													// Define area for Uoc
	TabControl tab0,win=configPanel,value=1; tabPanels("tab0",1); ControlUpdate/A
	Variable a=StartMSTimer
	V_Henry=1; Sun("0% Sun",10); V_Henry=0																									// Dark Current Scan
	strswitch (ctrlName)
		case "Robin":
			Sun("1% Sun",5); Sleep/S 4																										// Do 1/100 Sun
			Sun("10% Sun",4); Sleep/S 4																										// Do 1/10 Sun
			Sun("53% Sun",2); Sleep/S 4																										// Do 1/2 Sun
			Sun("100% Sun",0); Sleep/S 4																										// Do 1/1 Sun
			MeasureIPCE("550",8)
			DynamicsWrapper("CURR","VOLT")
			break
		case "Francine":
		case "Aswani":
			Sun("10% Sun",4); Sleep/S 4																										// Do 1/10 Sun
			Sun("53% Sun",2); Sleep/S 4																										// Do 1/2 Sun
			Sun("100% Sun",0); LampControl("Filter",PSUSettings(10),4); Sleep/S 4																	// Do 1/1 Sun
			DynamicsWrapper("CURR","VOLT")
			break		
		case "Perovskite":
			PopupMenu iv_gain1,win=ConfigPanel,mode=4  																						// 40ms Settling Time
			PPTStability("100% Sun",0)
			Sun("100% Sun",0); Sleep/S 4																										// Do 1/1 Sun	
//			DynamicsWrapper("CURR", "VOLT")
			option5="Layout_Perovskite"
			break;
		case "DSC":
			PopupMenu iv_gain1,win=ConfigPanel,mode=4 																						// 40ms Settling Time
			PPTStability("100% Sun",0)
			Sun("1% Sun",5); Sleep/S 4																										// Do 1/100 Sun
			Sun("10% Sun",4); Sleep/S 4																										// Do 1/10 Sun
			Sun("53% Sun",2); Sleep/S 4																										// Do 1/2 Sun
			Sun("100% Sun",0); LampControl("Filter",PSUSettings(10),4); Sleep/S 4																	// Do 1/1 Sun
			DynamicsWrapper("CURR","VOLT")
			break
		case "ssDSC":
			PopupMenu iv_gain1,win=ConfigPanel,mode=6  																						// 80ms Settling Time
			PPTStability("100% Sun",0)
			Sun("10% Sun",4); Sleep/S 4																										// Do 1/10 Sun
			Sun("53% Sun",2); Sleep/S 4																										// Do 1/2 Sun
			Sun("100% Sun",0); LampControl("Filter",PSUSettings(10),4); Sleep/S 4																	// Do 1/1 Sun
			DynamicsWrapper("CURR","VOLT")
			break		
		case "Andreas":
			Sun("100% Sun",0); Sleep/S 4																										// Do 1/1 Sun
			Sun("53% Sun",2); Sleep/S 4																										// Do 1/2 Sun
			Sun("10% Sun",4)																												// Do 1/10 Sun
			DynamicsWrapper("CURR","VOLT")
			break
		default:	
			Sun("1% Sun",5); Sleep/S 4																										// Do 1/100 Sun
			Sun("10% Sun",4); Sleep/S 4																										// Do 1/10 Sun
			Sun("53% Sun",2); Sleep/S 4																										// Do 1/2 Sun
			Sun("100% Sun",0); LampControl("Filter",PSUSettings(10),4); Sleep/S 4																	// Do 1/1 Sun
			DynamicsWrapper("CURR","VOLT")
	endswitch
	LampControl("Filter",PSUSettings(10),4)																										// Return to default
	option3="Data Analysis ..."; BuildMenu "Macros"
End
	
Function MultiCellTest(flg)																														// Complete Diagnostic package
	Variable flg
	WAVE RefDiodes,PSUSettings
	NVAR V_delay,V_IPCE550,V_refNum,V_numDev,V_RefCalibration,V_run,V_Henry
	SVAR allwaves,S_Filename,S_number,S_username,option3,option5
	DoUpdate																																// Define area for Uoc
	Variable a,b=StartMSTimer,n; String s
	V_refNum=10; V_RefCalibration=0.1/RefDiodes[V_refNum][6]
	do
		ArduinoDigital(7,n-1)																													// Select Cell#
		PopupMenu cell0,win=configpanel,mode=2+n; ControlUpdate/W=configpanel cell0
		V_Henry=1; Sun("0% Sun",13); V_Henry=0																								// Dark Current Scan
		if (flg)																																// flg: 0 - Conductivity, 1 - Full test
			Sun("1% Sun",5)
			Sun("10% Sun",4)
			Sun("53% Sun",2)
			Sun("100% Sun",0)
			MeasureIPCE("550",7); V_IPCE550/=2.39035
			LampControl("Filter",PSUSettings(10),4)
			ModifyGraph margin(right)=48,margin(bottom)=40,wbRGB=(65535,65535,65535)
			Legend/K/N=textL
			Dynamics("CURR","VOLT") 
			RadiantPower()	//	V_beta=VocvsIo()
			Execute "Layout1()"
		endif
		if (KillJoy())
			beep; beep; beep
			Abort "You have killed the MultiDevice Routine"
		endif
		Filename(); S_number+="/"+num2str(n)
		S_Filename=S_number
		if (flg)
			PrintSave(0)
		else
			allwaves=WaveList("*",",","win:IVGraph")
			Execute "SaveIVData()"
		endif
		V_run-=1																															// Hold run # constant
		n+=1
	while (n<V_numDev*4)
	String nb="NotebookInfo"
	DoWindow/F $nb
	if (!V_flag)
		NewNotebook/F=1/N=$nb as "End of Experiment Notebook"
		Notebook $nb, showRuler=0
		Notebook $nb, text=S_Username+" has successfully finished his/her Multi-user experiment on\r"+date()+" at "+time()+"\r"
		Notebook $nb, text="Experiment #"+num2str(V_run)+" took "+num2str(StopMSTimer(b)/1e6/60)+" secs.\r\r"
		Notebook $nb, text="Goodnight, Igor" 
	endif
	SaveNotebook/O/P=webPath/S=5 $nb as "ExperimentStatus.html"
	DoWindow/K $nb	
	V_run+=1																																// Now increment run #
	option3="Data Analysis ..."; option5="Layout All Data"; BuildMenu "Macros"
End
		
Function LeClanche()																															// LeClanche Diagnostic package
	WAVE PSUSettings
	NVAR V_Henry
	SVAR allwaves,option3,option5
	Cell_Area(); allwaves=""																													// Define area for Uoc
	SetDelay("Delay",9,"1000"); PopupMenu iv_gain1,win=configpanel,mode=9																		// At low light levels need slow scan rate
	SetCompliance("Compliance",6,"200"); PopupMenu iv_avg,win=configpanel,mode=6																// Set 200 uA compliance
	DoUpdate
	V_Henry=1; Sun("0% Sun",13); V_Henry=0																									// Dark Current Scan
	Sun("0.1% Sun",6); LampControl("Filter",PSUSettings(10),4); Sleep/S 4																			// LeClanche Ref. Intensity
	SetAxis/A/R  left; DoUpdate; GetAxis/Q left; SetAxis left,5e-6,floor(V_max*5e5)/5e5
	option3="Data Analysis ..."; option5="Layout All Data"; BuildMenu "Macros"
End
	
Function ChargevsPotential()
	WAVE charge
	NVAR V_charge,V_biasVoltage,V_chargedensity,V_area,V_numpnts
	SVAR S_layoutname
	Variable bias=0.3,n,V_npnts=ceil((1.2-0.3)/0.05)+1
	Redimension/N=(V_numpnts) charge; SetScale/P x 0.3,0.05,"V" charge
	S_layoutname="Layout3()"
	do
		ChronoAmperometry()
		DoUpdate
		charge[n]=V_charge
		V_biasVoltage+=0.05																													// 50mV increment
		n+=1
	while (n<numpnts(charge))
	DoWindow/F ChargeGraph
	if (!V_Flag)
		Execute "ChargeGraph()"
	endif
	Smooth/S=2 5,charge; WaveStats/Q charge
	V_chargedensity=V_max/V_area
	PopupMenu filter0 win=configpanel,mode=2
End		
		
Function ChronoAmperometry()
	WAVE Datawave,transient2,transient5
	NVAR V_area,V_biasVoltage,V_charge,V_complianceI,V_DataChannel0,V_numpnts
	SVAR S_windowname
	Variable a,b,n
	Redimension/N=(2*V_numpnts) Datawave; Redimension/N=(V_numpnts) transient2,transient5
	Command(":FORM:ELEM VOLT,CURR,TIME")																									// Output format
	Command(":SENS:FUNC 'CURR:DC'")																											// Reset to default SENS
	Command(":SOUR:FUNC:MODE VOLT")
	Command(":SENS:CURR:RANGE:AUTO 0")																									// Disable Autoranging
	Command(":SOUR:VOLT:MODE LIST")																										// Custom Sweep operation mode
	Command(":SOUR:LIST:VOLT "+wave2str(20,0.0))																							// Build waveform
	V_numpnts=20
	do
		Command(":SOUR:LIST:VOLT:APP "+wave2str(25,V_biasVoltage))
		Command(":SOUR:LIST:VOLT:APP "+wave2str(25,V_biasVoltage))																			// Duplicate up due to string length restriction
		Command(":SOUR:LIST:VOLT:APP "+wave2str(20,0.0))
		V_numpnts+=70
		n+=1
	while (n<4)
	Command(":SOUR:DEL 0.01")
	Command(":SENS:VOLT:NPLC 0.02")																										// Integration Time
	a=min(1,ceil(40*V_area)/1e3)																												// Check for max Compliance
	if (V_DataChannel0>0.5)																													// Check for 0.5 A limit
		Command(":SENS:CURR:PROT 1")
		beep; beep; DoAlert 1,"High Current Device. Have you configured Sourcemeter for 4-wire Sense.  \rAttention, potentially lethal currents!!!"
		if (V_Flag>1)
			abort
		endif
		Command(":SYST:RSEN 1")																												// 
	else
		Command(":SENS:CURR:PROT "+num2str(a)	)																							// Set current compliance at ƒ26mA/cm2
	endif
	a=max(ceil(a/V_complianceI)*V_complianceI,V_complianceI)
	Command(":SENS:CURR:RANGE:UPP "+num2str(a))																							// Select expected current
	Command(":TRIG:DEL 0")
	Command(":SYST:AZER:STAT OFF")																											// Autozero OFF
	Command(":TRAC:CLE")																													// Clear Buffer
	Command(":TRIG:COUN "+num2str(V_numpnts))																								// # of Triggers
	Command(":DISP:ENAB OFF")
	Command(":SYST:TIME:RES")																												// Reset time to zero
	Command(":OUTP:STAT ON")																												// Switch Output ON
	GPIBWrite2 ":READ?"																														// Trigger Sweep and read data
	GPIBReadBinary2/TYPE=8 a,b; GPIBReadBinaryWave2/TYPE=2 Datawave																			// IEEE Single precision Floating point
	GPIBReadBinary2/TYPE=8 a																													// read junk
	transient2=Datawave[2*p]; transient5=Datawave[2*p+1]
	SetScale/P x 0,transient5[0],"s", transient2
	S_windowname="ChronoAmpGraph"
	DoWindow/F ChronoAmpGraph
	if (!V_Flag)
		Execute "ChronoAmpGraph()"; Execute "AcquireStyle1()"
	endif
	ScanFinish()
	V_charge=CalcCharge()
End

Function/S wave2str(n,voltage)
	Variable n,voltage
	Variable i; string s=""
	for (i=0; i<n; i+=1)
		s+=num2str(voltage)+","
	endfor
	return s[0,strlen(s)-2]
end

Function CalcCharge()
	WAVE PhotoCurrent,Voltage,W_Findlevels
	Variable a,b,box=3,n,npos=0,nf=pnt2x(PhotoCurrent,numpnts(PhotoCurrent)),sum
	WaveStats/Q/R=[0,18] PhotoCurrent; PhotoCurrent-=V_avg; WaveStats/Q PhotoCurrent															// Offset wave to zero
	do
		FindLevels/Q/M=0.2/R=(npos,nf)/B=(box)/N=2 PhotoCurrent,V_max/24																	// Threshold at one sixty fourth
		a=W_Findlevels[0]+0.01; b=W_Findlevels[1]-0.02																						// Fudge limits
		if (V_Flag!=0)
			break
		endif
		Cursor A PhotoCurrent,W_Findlevels[0]; Cursor B PhotoCurrent,W_Findlevels[1]
		sum+=(area(PhotoCurrent,a,b)-(PhotoCurrent(b)*(b-a)))
		npos=W_Findlevels[1]+0.1																												// Look for next pulse
		n+=1
	while (npos<nf)
	return sum/n
end

Function TimeDependenceWrapper(ctrlName,sense,source,level)
	String ctrlName,sense,source; Variable level
	WAVE PSUSettings,transient0,ywav
	NVAR V_Area,V_biasCurrent,V_biasVoltage,V_defaultVoc,V_delay,V_numCell,V_nPulse,V_pulseWidth,V_PPTDuration,V_settlingTime,V_supos
	SVAR S_windowname,S_ExptType,option5
	Variable a,b,bias,compliance,n,npnts=2048,nplc,tempst=V_settlingTime; String cmd,str,wname
	if (!CmpStr(sense,"CURR"))
		bias=V_BiasVoltage																													// Set Source Voltage
		Prompt bias,"Select Bias Voltage (V)"
		DoPrompt "Cell Bias",bias
		if (V_flag)
			return 0
		endif
		V_BiasVoltage=bias>1.3?0.8 :bias; bias=V_biasVoltage
		compliance=min(1,ceil(32*V_area)/1e3)																									// Check for max Compliance																										// Set current compliance
		str="Units: A vs t"; S_windowname="TransientCGraph"; wname="transient2"
	else
		bias=V_biasCurrent
		Prompt bias,"Select Bias Current (-ve A)"
		DoPrompt "Cell Bias",bias
		if (V_flag)
			return 0
		endif
		V_biasCurrent=((bias>2e-3)|(bias<-0.01))?0.0 :bias; bias=V_biasCurrent
		compliance=V_numCell*V_defaultVoc+0.6																								// Set voltage compliance
		str="Units: V vs t"; S_windowname="TransientVGraph"; wname="transient0"
	endif
	if (V_PPTDuration<33)
		V_settlingTime=0.002
	elseif (V_PPTDuration<257)
		V_settlingTime=0.01
	else
		V_settlingTime=0.08
	endif
	nplc=round(1000*(((V_PPTDuration-225e-6-2.15e-3)/npnts)-V_settlingTime-185e-6-50e-6)*50/3)/1000											// 225us trigger latency, 2.15ms Overhead, 50us Source Config, 185us A/D conversion
	LampControl("Filter",PSUSettings(level),4); Sleep/S 8
	TimeDependence(bias,compliance,npnts,nplc,sense,source)
	DoWindow/F $S_windowname
	if (!V_Flag)
		Execute S_windowname+"()"
		if (!CmpStr(sense,"CURR"))
			RemoveFromGraph/Z transient0,transient1,transient3,transient4,transient5,transient6
			ModifyGraph lstyle($wname)=0,rgb($wname)=(65535,0,0)
		endif
		ModifyGraph margin(left)=54,margin(right)=80,mirror(left)=1
	endif
	WAVE w=$wname
	if (!CmpStr(sense,"CURR"))																													// Invert wave for current
		Duplicate/O transient0,w; WaveStats/Q w; SetScale d 0,0,"A",w; w*=(-1); ywav=-V_avg
		sprintf cmd,"\Z10Bias Voltage: %.2W0PA\rCurrent average: %.3W0PA\rRMS Noise: %g",V_biasVoltage,V_avg,100*V_sdev/V_avg; TextBox/C/N=text0/F=0/A=LT/X=88/Y=4 cmd
	else
		WaveStats/Q w; SetScale d 0,0,"V",w; ywav=V_avg
		sprintf cmd,"\Z10Bias Current: %.2W0PA\rVoltage average: %.3W0PA\rRMS Noise: %g",V_biasCurrent,V_avg,100*V_sdev/V_avg; TextBox/C/N=text0/F=0/A=LT/X=88/Y=4 cmd
	endif
	FilterWheel("Filter",1,"0% Sun")
	sprintf str,"%s:PW:%g;NP:%g;IT:%g;BI:%g",str,V_PulseWidth,0,level,bias; Note/K w,str
	AutoPositionWindow/E/M=1/R=ConfigPanel
	S_ExptType=".pPT"; V_settlingTime=tempst; V_supos=0
	option5="Layout PPT"; BuildMenu "Macros"
End

Function TimeDependence(bias,compliance,npnts,nplc,sense,source)
	String sense,source; Variable bias,compliance,npnts,nplc
	WAVE Datawave,transient0,transient4,transient5
	NVAR V_delay,V_settlingTime,sourcemeter
	Variable a,b,n; String cmd
	Redimension/N=(2*npnts) Datawave; Redimension/N=(npnts) transient0,transient4,transient5
	TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Measuring Time Scan"; ControlUpdate/W=configpanel msg
	Command(":STAT:MEAS:ENAB 512")																										// Set SRQ
	Command("*SRE 1")
	Command(":FORM:ELEM "+sense+",TIME")																									// Output format
	Command(":SENS:FUNC '"+sense+":DC'")																									// Define sense function
	Command(":SOUR:FUNC:MODE "+source)
	Command(":SOUR:"+source+":MODE FIX;:SOUR:DEL "+num2str(0.01))																			// Fixed operation mode, SettlingTime=0.01ms
	Command(":SOUR:"+source+":LEV:IMM:AMPL "+num2str(bias))
	Command(":SENS:VOLT:NPLC "+num2str(nplc))
	Command(":SENS:"+sense+":PROT "+num2str(compliance))																					// Set compliance
	Command(":TRAC:CLE")																													// Clear Buffer
	Command(":SYST:TIME:RES")																												// Reset time to zero
	Command("TRAC:POIN "+num2str(npnts)+";:TRIG:COUN "+num2str(npnts))
	Command(":TRAC:FEED:CONT NEXT")
	Command(":DISP:ENAB ON")
	Command(":OUTP:STAT ON")
	Sleep/S 1																																// Switch Output ON
	Command(":INIT")
	do
		NI4882 ibrsp={sourcemeter}
		Sleep/S 0.1
		if (V_flag>32)																														// ((status%&32)==32)
			break
		endif
		n+=1
	while (1)
	GPIBWrite2 ":TRAC:DATA?"																													// also consider GPIBWrite2 ":READ?"
	GPIBReadBinary2/TYPE=8 a,b; GPIBReadBinaryWave2/TYPE=2 Datawave; GPIBReadBinary2/TYPE=8 a
	transient4=Datawave[2*p]; transient5=Datawave[2*p+1]
	Variable p1=transient5[0],p2=transient5[npnts-1]
	SetScale/I x p1,p2,"s",transient0
	Interpolate2/T=1/N=(npnts)/Y=transient0 transient5,transient4; SetScale/I x p1,p2,"s",transient0
	ScanFinish()																																// Switch Output OFF
End
	
Function DynamicsWrapper(sense,source)
	string sense,source
	Dynamics(sense,source)
	TransientData(sense)
End

Function Dynamics(sense,source)
	string sense,source
	WAVE PSUsettings,Datawave,PhotoCurrent,transient0,transient4,transient5,RefDiodes,Voltage
	NVAR V_area,V_biasCurrent,V_biasVoltage,V_lamp,V_nPulse,V_numCell,V_numpnts,V_pulseWidth,sourcemeter
	SVAR S_windowname
	Variable a,b,i,n,status; String s
	V_numpnts=672
	TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Measuring Transients"; ControlUpdate/W=configpanel msg
	Redimension/N=(2*V_numpnts) Datawave; Redimension/N=(V_numpnts) transient0,transient4,transient5; transient0=0
	Command(":STAT:MEAS:ENAB 512")																										// Set SRQ
	Command("*SRE 1")
	Command(":FORM:ELEM "+sense+",TIME")																									// Output format
	Command(":SENS:FUNC '"+sense+":DC'")																									// Define sense function
	Command(":SOUR:FUNC:MODE "+source)
	Command(":SOUR:"+source+":MODE FIX;:SOUR:DEL 0.01")																						// Fixed operation mode
	a=min(1,ceil(40*V_area)/1e3)																												// Check for max Compliance
	if (!CmpStr(sense,"CURR"))
		Command(":SOUR:VOLT:LEV:IMM:AMPL "+num2str(V_biasVoltage))	
		Command(":SENS:CURR:PROT "+num2str(ceil(40*V_area)/1e3))																			// Set current compliance
//		Command(":SENS:CURR:RANGE:UPP 10e-3")
		S_windowname="TransientCGraph"
	else
		Command(":SOUR:CURR:LEV:IMM:AMPL "+num2str(V_biasCurrent))	
		Command(":SENS:VOLT:PROT "+num2str(V_numCell*1+0.6))																				// Set voltage compliance
//		Command(":SENS:VOLT:RANGE:UPP 1")
		S_windowname="TransientVGraph"
	endif
	Command(":SENS:"+sense+":NPLC 0.18")
	Command(":TRAC:CLE")
	Command(":TRAC:POIN "+num2str(V_numpnts)+";:TRIG:COUN "+num2str(V_numpnts))
	Command(":TRAC:FEED:CONT NEXT")
	Command(":DISP:ENAB OFF")
	Command(":OUTP:STAT ON")																												// Switch Output ON
	if (V_lamp==0)
		Command(":INIT")																														// Timing Issue:  INIT prior to diode control
	endif
	if (V_lamp==1)
		FilterWheel("Filter",4,"53% Sun"); Sleep/S 0.5																							// Trigger filter wheel to turn
		FilterWheel("Filter",1,"0% Sun")
	else
		for (i=0; i<10; i+=1)
			sprintf s,"\F'Chicago'\Z12%1.2f",100*RefDiodes[12][i]
			Sleep/S 0.75; TitleBox msg,win=configpanel,title=s+"% Sun"; ControlUpdate/W=configpanel msg; DoUpdate
			LampControl("Filter",PSUsettings(9-i),4)																								// xx% Sun
			Sleep/S 0.75; LampControl("Filter",PSUSettings(10),4)																				// 0% Sun
		endfor
	endif
	if (V_lamp==1)
		Command(":INIT")																														// Timing Issue:  INIT after Xe lamp fliter
	endif
	do
		NI4882 ibrsp={sourcemeter}; status=V_Flag
		if ((status%&1)==1)
			break
		endif
	while (1)
	GPIBWrite2 ":TRAC:DATA?"																													// also consider GPIBWrite2 ":READ?"
	GPIBReadBinary2/TYPE=8 a,b; GPIBReadBinaryWave2/TYPE=2 Datawave; GPIBReadBinary2/TYPE=8 a													// IEEE Single precision Floating point
	transient4=-Datawave[2*p]; transient5=Datawave[2*p+1]
	Variable p1=transient5[0],p2=transient5[V_numpnts-1]
	Interpolate2/T=1/N=(V_numpnts)/Y=transient0 transient5,transient4
	SetScale/I x p1,p2,"s" transient0
	ScanFinish()
	Command(":DISP:ENAB ON")
	LampControl("Filter",PSUsettings[10],4)
	DoWindow/F $S_windowname
	if (!V_Flag)
		Execute S_windowname+"()"; Execute "AcquireStyle1()"
		if (!cmpStr(sense,"CURR"))
			RemovefromGraph/Z transient2_INT
			ModifyGraph lstyle(transient0)=0,rgb(transient0)=(65535,0,0)
			SetScale d 0,0,"A",transient0
		else
			ModifyGraph/Z mirror(left)=1
			SetScale d 0,0,"V",transient0
		endif
	endif
	AutoPositionWindow/E/M=1/R=IVGraph
	sprintf s "PW:%g;NP:%g;IT:%g;LP:%s" V_pulseWidth,V_nPulse,0.5,"Xelamp"
	Note/K transient0,s
End
	
Function TransientData(sense)
	string sense
	WAVE transient0,W_FIndlevels,ywav
	NVAR V_origin,V_threshold
	WaveStats/Q/R=(0.04,15) transient0
	if (!CmpStr(sense,"CURR"))
		FindLevels/Q/B=3/N=20/R=(0.04,18) transient0,V_min+(V_max-V_min)/128																// Threshold at half of 1 hundreth of 1 sun
	else
		FindLevels/Q/B=5/N=14/R=(0.04,18) transient0,V_min+(V_max-V_min)/32																	// Threshold at half of 1 tenth of 1 sun
	endif
	ywav=0
	switch (V_Flag)
		case 2:
			SetAxis left,V_min,V_max
			Variable b=10^-floor(log(V_max-V_min))
			Variable a=round((V_max-V_min)*b)/b/40; V_origin=8*a; ywav=V_origin
			ModifyGraph quickdrag(ywav)=1,live(ywav)=1
			ControlInfo/W=transientCgraph button0
			if (!V_Flag)
				ControlBar 20
				Button button0,pos={160,2},size={80,16},proc=TransientAccept,title="Get data"
				SetVariable setvar0,pos={0,2},size={144,16},proc=SetThreshold,title="Peak Threshold",fSize=10,frame=0,limits={V_min,V_max,a},value=V_threshold
			endif
			SetFormula V_threshold,"UpdateXHairGlobals(root:WinGlobals:TransientCGraph:S_TraceOffsetInfo)"
			ModifyGraph offset(ywav)={0,V_Origin}
			break
		case 1:																																// and then fall through to default
			switch (V_LevelsFound)
				case 4:
					W_Findlevels={0.65,2.25,2.65,4.25,4.5,6.25,6.4,8.15,8.35,10.1}																// Sulphur lamp
					break
				default:
					W_Findlevels={0.68,1.51,2.20,3.05,3.72,4.59,5.24,6.11,6.75,7.65,8.27,9.17,9.83,10.71,11.35,12.23,12.89,13.77,14.41,15.29}
			endswitch																														// W_Findlevels is filled by Findlevels auotmatically Therfore OK, ie 14 level crossings
			break
		default:
			W_Findlevels={0.68,1.51,2.20,3.05,3.72,4.59,5.24,6.11,6.75,7.65,8.27,9.17,9.83,10.71,11.35,12.23,12.89,13.77,14.41,15.29}
	endswitch
	TransientCalc(sense)
End

Function smooth_it(ctrlName) : ButtonControl
	string ctrlName
	WAVE transient1
	Smooth 2, transient1
End

Function TransientAccept(ctrlName) : ButtonControl
	string ctrlName
	WAVE transient0
	NVAR V_threshold
	FindLevels/Q/B=7/N=4 transient0,V_threshold
	KillControl button0; KillControl button1; KillControl setvar0
	ControlBar 0
	TransientCalc("CURR")
End

Function TransientCalc(sense)
	string sense
	WAVE RadPower,RefDiodes,transient0,W_FindLevels
	SVAR S_system
	Variable i,a,b,np=numpnts(W_FIndLevels)/2,ref=13; String s,units
	WaveStats/Q/R=(0,W_FIndlevels[0]-0.4) transient0//; transient0-=V_avg
	Duplicate/O transient0,transient1,transient2,transient3,transient4,transient5,transient6,transient7,transient8,transient9,transient10
	for (i=0; i<np; i+=1)
		WAVE w=$("transient"+num2str(np-i))	; w=0
		w[x2pnt(transient0,W_FindLevels[2*i]-0.1),x2pnt(transient0,W_FindLevels[2*i+1]+0.1)]=transient0[p]/RefDiodes[ref][i]
	endfor
	a=mean(transient0,W_FindLevels[0]+0.1,W_FindLevels[1]-0.4)
	b=max(mean(transient5,W_FindLevels[0]+0.4,W_FindLevels[1]-0.4),mean(transient0,W_FindLevels[2*(np-1)]+0.4,W_FindLevels[2*(np-1)+1]-0.4))
	if (!CmpStr(sense,"CURR"))
		units="%1.3f Sun: %2.3W1PA"
		SetAxis left V_min,1.2*b																												// Scale axis @ 110% to trim spikes
	else
		units="%1.3f Sun: %2.3W1PV"
		SetAxis/A/E=1 left; DoUpdate; GetAxis/Q left; SetAxis left V_min,V_max
	endif
	Redimension/N=(np) RadPower
	for (i=0; i<np; i+=1)
		RadPower[i]=mean(transient0,W_FindLevels[2*i]+0.4,W_FindLevels[2*i+1]-0.4)
		sprintf s,units,RefDiodes[ref][i],RadPower[i]
		sprintf s,"Tag/C/N=text%d/F=0/X=0.0/Y=%g Transient0,%g,\"%s\"",i,6*sign(np-i-1),(W_FindLevels[2*i]+W_FindLevels[2*i+1])/2,s
		Execute s
	endfor
End

Function PPT(sense,level)																														// Simple PPT
	Variable level; String sense
	WAVE/T DiodeLabels
	WAVE Input3,Input4,Input5,Input6,Input7,Input8,IVparams
	NVAR V_area,V_Voc,V_Jsc,V_delay,V_endVolt,V_Henry,V_incrVolt,V_powerIn1,V_PPTDuration,V_RefCalibration,V_settlingTime
	SVAR S_windowname,S_exptType,option5
	Variable a,b,t; String str
	TabControl tab0,value=1; tabPanels("tab0",1)
	V_delay=(V_delay<4)?4: V_delay; V_Henry=1; V_incrVolt=0.01; V_settlingTime=0.5
	Sun(DiodeLabels[level+1][1],level); a=round(IVparams[12*level+6][0]/0.0005)*0.0005															// Find the Vpmax
	V_powerIn1=IVparams[12*level+1][0]
	TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Peak Power Stability @ "+DiodeLabels[level+1][1]; ControlUpdate/W=configpanel msg; DoUpdate
	SweepPPT("Current",a,round(V_PPTDuration*28/23))
	ScanFinish()
	SetScale d 0,0,"V",Input3; Duplicate/O Input3,Input6; SetScale d 0,0,"A",Input4; Duplicate/O Input4,Input7; SetScale d 0,0,"%",Input5,Input3; Duplicate/O Input5,Input8
	Input3*=(Input4/(V_Voc*V_Jsc*V_area)); Input5*=(1e3/-V_area); Input8*=(1e3/-V_area)*(0.1/IVparams[12*level+1][0])
	DoWindow/F GraphPPT
	if (!V_Flag)
		Execute "GraphPPT()"
	endif
	DoWIndow/F GraphIV
	if (!V_Flag)
		Execute "GraphIV()"
	endif
	AutoPositionWindow/E/M=1/R=ConfigPanel GraphPPT; S_windowname="GraphPPT"
	AutoPositionWindow/E/M=1/R=GraphPPT
	S_ExptType=".pPT"
	option5="Layout PPT"; BuildMenu "Macros"
End

Function SweepPPT(sense,initialBias,totalTime)
	string sense; variable initialBias,totalTime
	WAVE DataWave,Input3,Input4,input5
	NVAR V_area,V_delay,V_settlingTime
	Variable a=min(1,ceil(40*V_area)/1e3),bias,delta=0.0064,flg=1,n,npnts=round(totalTime/0.3+1),t													// Point every 0.3s, ...s sweep
	V_settlingTime=0.5; V_delay=0; bias=initialBias>1.2?1.2 :initialBias																			// Returns to minimum settling time for max ppt tracking
	Redimension/N=(npnts) Input3,Input4,Input5
	Command(":SENS:CURR:PROT "+num2str(a))																									// (Area x 40) mA current compliance
	Command(":SENS:CURR:RANGE:AUTO 1")
	Command(":SOUR:DEL "+num2str(0.01))																									// Fixed operation mode
	Command(":OUTP:STAT ON")		
	t=StartMStimer
	do
		Command(":SOUR:VOLT:LEV:IMM:AMPL "+num2str(bias))																					// Set current Voltage
		Input3[n]=bias																														// Voltage
		Input4[n]=ReadData(1)																												// OK here we have the current value after some Hocus Pocus that only Robin understands
		Input5[n]=Input3[n]*Input4[n]
		if (n>0)
			delta=(Input5[n]<Input5[n-1] )?delta :-delta																							// Set the bias value based on Power values
		endif
		if (sign(delta)!=flg)
			delta=(abs(delta)<0.0002)?delta :delta/2
		endif
		bias+=delta		 																													// what's the new voltage ?
		if (!(bias>0.3)&(bias<1))
			print "Error ! Trying to set "+num2str(bias)+". Voltage out of Range"
			break
		endif
		n+=1
	while (n<npnts)
	Command(":OUTP:STAT OFF")
	a=stopMSTimer(t)/1e6/npnts
	bias=0; Command(":SOUR:VOLT:LEV:IMM:AMPL "+num2str(bias))																				// Put the cell at 0V
	FlushKeithley()																															// Here we can keep the device under illumination !
	SetScale/P x 0,a,"s", Input3,Input4,Input5
End

Function PPTEquilibration(ctrlName,level)																											// Norman's routines
	variable level; string ctrlName
	WAVE/T DiodeLabels
	WAVE IVparams,Input0,transient0,transient3
	NVAR V_numpnts,V_biasVoltage,V_complianceI,V_complianceV,V_delay,V_incrVolt,V_integrationTime,V_settlingTime,V_Henry
	NVAR V_area,V_Jsc,V_Voc,V_ff,V_Jpp,V_Vpp,V_pwr,V_supos,sourcemeter
	SVAR d_t,S_windowname,S_exptType,option3,option5
	Variable a=12*level,b,c,compliance,d=3,i,n,npnts=256,nplc,m1,t; String list="2;4;8;12;16;20;24;32;64",str,s0="Scan Rates:\r",sense="CURR",source="VOLT",wname
	V_Henry=1; V_incrVolt=0.01
	V_complianceI=min(1,ceil(32*V_area)/1e3); m1=level
	Prompt d,"Sweep Time (s)",popup,list
	DoPrompt "Peak Power Measurement Time",d
	if (V_Flag)
		return 0
	endif
	sprintf str,"SetIncrement(\"incr\",%g,\"%s\")",V_incrVolt,num2str(V_incrVolt*1e3); Execute str
	Sun("0% Sun",13)																														// Dark current
	Sun(DiodeLabels[level][0],level); c=round(V_Vpp/0.0005)*0.0005																				// Measure at 1 sun
	t=str2num(StringfromList(d-1,list))																											// Desired measurement times
	if (t<33)
		V_settlingTime=0.002
	elseif (t<257)
		V_settlingTime=0.01
	else
		V_settlingTime=0.08
	endif
	nplc=round(1000*(((t-225e-6-2.15e-3)/npnts)-V_settlingTime-185e-6-50e-6)*50/3)/1000														// 225us trigger latency, 2.15ms Overhead, 50us Source Config, 185us A/D conversion
	Redimension/N=(npnts) transient0
	TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Measuring Time Scan"; ControlUpdate/W=configpanel msg
	if (V_ff>60)																																// Only if FF is > 60%
		Input0={0,c-0.1,c-0.05,c,c+0.02,c+0.05,V_Voc}
		for (i=0; i<5; i+=1)
			V_biasVoltage=Input0[i]
			DoUpdate
			Shutter("",2,"Open")
			TimeDependence(V_biasVoltage,V_complianceI,npnts,nplc,sense,source)
			Shutter("",1,"Close")
			wname="transient"+num2str(i)
			DoWindow/F TransientCGraph
			if (!V_Flag)
				Execute "TransientCGraph()"
				ModifyGraph margin(left)=54,margin(right)=54,grid=2
				SetAxis/A/R left; Label left "\\Z12\\f01Current Sweep /\U"
				AutoPositionWindow/E/M=1/R=IVGraph TransientCGraph
			endif
			ModifyGraph lstyle($wname)=i,rgb($wname)=(i*5000,0,65535-i*5000)
			WAVE w=$wname; Duplicate/O transient0,w; WaveStats/Q w
			sprintf str,"\Z09Bias Voltage: %.1W0PV, Current Ave: %.2W0PA",V_biasVoltage,V_avg
			sprintf str,"Tag/C/N=text%g/F=0/A=LC/L=1/X=0/Y=%g %s,%g,\"%s\"",i,(-10*mod(i,6)),wname,(0.8*t),str; Execute str
		 endfor
		Shutter("",1,"Open")
		TimeDependence(0,V_complianceV,npnts,nplc,"VOLT","CURR")																				// MonitorCurrent
		Shutter("",0,"Close") 
		wname="transient"+num2str(12); WAVE w=$wname; Duplicate/O transient0,w; WaveStats/Q w; SetScale d 0,0,"V",$wname
		AppendtoGraph/R $wname; ModifyGraph lstyle($wname)=0,rgb($wname)=(65535,0,0); SetAxis/A/N=1 right; Label right "\\Z12\\f01Voltage Sweep /\U"
		WaveStats/Q/R=(0,0.1) transient0; V_Jsc=V_avg; WaveStats/Q transient3; V_Jpp=V_avg; V_Vpp=c; V_pwr=V_Jpp*V_Vpp
		a=rightx($wname); WaveStats/Q/R=(a-0.1,a) $wname; V_Voc=V_avg
		IVparams[12*m1+3][0]=V_Voc; IVparams[12*m1+6][0]=V_Jsc; IVparams[12*m1+7][0]=V_Jsc/V_area; IVparams[12*m1+8][0]=V_Vpp; IVparams[12*m1+9][0]=V_Jpp
	endif
	V_biasVoltage=0; S_windowname="TransientCGraph"
	option3="Data Analysis ..."; option5="Layout PPTStability"; BuildMenu "Macros"
End

Function PPTStability(ctrlName,level)																											// Norman's routines
	variable level; string ctrlName
	WAVE/T DiodeLabels
	WAVE DarkCurrent,PhotoCurrent0,PhotoCurrent1,HysteresisValues,RefDiodes,ScanRates,SettlingTimes,transient0
	WAVE IVparams,Input0,Input1,Input2,Input3,Input4,Input5,Input6,Input7,Input8,Input9,Input10
	NVAR V_numpnts,V_biasVoltage,V_biasCurrent,V_complianceI,V_complianceV,V_delay,V_integrationTime,V_settlingTime,V_Henry,V_incrVolt,V_endVolt,V_v0
	NVAR V_area,V_supos,V_area,V_length,V_refCalibration,sourcemeter
	SVAR d_t,S_windowname,S_exptType,option3,option5
	Variable a=12*level,b,c,d=3,i,n,Pin=RefDiodes[15][6-level]/10,t; String list="2;4;8;12;16;20;24",str,s0="Scan Rates:\r",wname0,wname1
	V_Henry=1; V_endVolt=-0.2; V_incrVolt=0.01
	Prompt d,"Sweep Time (s)",popup,list
	DoPrompt "Peak Power Measurement Time",d
	if (V_Flag)
		return 0
	endif
	t=str2num(StringfromList(d-1,list))																											// Desired measurement times
	sprintf str,"SetIncrement(\"incr\",%g,\"%s\")",V_incrVolt,num2str(V_incrVolt*1e3); Execute str
	V_Henry=1; Sun("0% Sun",10); V_Henry=0																									// Dark current
	Sun(DiodeLabels[level+1][1],level); c=round(IVparams[12*level+6][0]/0.0005)*0.0005															// Measure at 1 sun
	Sleep/S 4
	b=V_settlingTime																															// Temporary store
	TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Measuring Peak Power @ "+ctrlName; ControlUpdate/W=configpanel msg; DoUpdate
	SweepPPT("Current",c,t+3)																													// Start measuring stuff
	Duplicate/O Input3,Input6,Input0; Duplicate/O Input4,Input7; Input7/=V_area; Duplicate/O Input5,Input8; Input8/=-V_area
	Duplicate/O transient0 Input0; Input0=RefDiodes[15][6-level]/10; WaveStats/Q/M=1 Input0; Pin=V_avg
	SetScale d 0,0,"W cm\S-2\M",Input0; SetScale d 0,0,"V", Input3
	TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Measuring Jsc @ "+ctrlName; ControlUpdate/W=configpanel msg; DoUpdate
	V_numpnts=34*t																															// Set # of pnts for DataWave
	ReadDataWave(V_area,"CURR","VOLT",V_biasVoltage); Duplicate/O transient0 Input1; Input1/=V_area; SetScale d 0,0,"A cm\S-1\M",Input1				// Measures Jsc for a while
	TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Measuring Voc @ "+ctrlName; ControlUpdate/W=configpanel msg; DoUpdate
	ReadDataWave(V_area,"VOLT","CURR",V_biasCurrent); Duplicate/O transient0 Input9	; SetScale d 0,0,"V",Input9,Input10								// Measures Voc for a while
	V_settlingTime=b; V_delay=2
	HysteresisWrapper(ctrlName,level,1)
	DoWindow/F GraphStability
	if (!V_flag)
		Execute "GraphStability()"
	endif
	AutoPositionWindow/E/M=1/R=ConfigPanel IVGraph
	AutoPositionWindow/E/M=0/R=ConfigPanel GraphStability
	Shutter("",1,"Open")																														// Open shutter again
	TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Measuring Jsc again"; ControlUpdate/W=configpanel msg; DoUpdate
	b=V_settlingTime																															// Temporary store
	V_numpnts=34*t; c=round(IVparams[a+6][0]/0.002)*0.002																					// Set # of pnts for DataWave
	ReadDataWave(V_area,"CURR","VOLT",V_biasVoltage); Duplicate/O transient0 Input2; Input2/=V_area												// Measures Jsc for a while
	SetScale d 0,0,"A cm\S-1\M",Input2
	TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Measuring Peak Power again"; ControlUpdate/W=configpanel msg; DoUpdate
	SweepPPT("Current",c,t+3); Input4/=V_area; Input5/=-V_area		//=(Pin/100/V_area)
	TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Measuring Voc again"; ControlUpdate/W=configpanel msg; DoUpdate
	ReadDataWave(V_area,"VOLT","CURR",V_biasCurrent); Duplicate/O transient0 Input10															// Measures Voc for a while
	Shutter("",1,"Close"); 
	V_Henry=0; V_endVolt=0; V_supos=-1; V_delay=0 ; V_settlingTime=b
	d_t=date()+" / "+time(); S_exptType=".pPT"
	NI4882 ibtmo={sourcemeter,12}																											// 3s Timeout
	option3="Data Analysis ..."; option5="Layout PPTStability"; BuildMenu "Macros"
End

Function MeasureIPCE(ctrlName,varNum)																											// Measure at fixed Wavelength 540nm
	string ctrlName; variable varNum
	WAVE PhotoCurrent,PhotoDiode,Voltage,Potential,Thermopile
	NVAR V_numpnts,V_dataChannel2,corrIPCE=$("V_corrIPCE"+ctrlName),ipce=$("V_IPCE"+ctrlName)
	Filterwheel("Filter",varNum,ctrlName); Sleep/S 2
	Shutter("",2,"Open")
	DoWindow/F IVGraph
	if (!V_Flag)
		Execute "IVGraph()"; Execute "AcquireStyle1()"
	endif
	TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Measuring Reference Cell"; ControlUpdate/W=configpanel msg
	ScanRef()																																// Measure Reference light Intensity
	Titlebox msg,win=configpanel,title="\F'Chicago'\Z12Testing for Voc"; ControlUpdate/W=configpanel msg
	ScanTest(0)
	Redimension/N=(V_numpnts) Thermopile,PhotoDiode,Voltage,PhotoCurrent,Potential
	Titlebox msg,win=configpanel,title="\F'Chicago'\Z12Measuring IPCE Current"; ControlUpdate/W=configpanel msg
	ScanVoltage()
	ScanFinish()
	Duplicate/O PhotoCurrent,$("IPCE")
	WaveStats/Q/R=(0,0.1) PhotoCurrent
	ipce=-(1239.8541*V_avg)/(str2num(ctrlName)*V_dataChannel2*corrIPCE)
End

Function HysteresisWrapper(ctrlName,level,ssFlag)
	string ctrlName; variable level,ssFlag
	WAVE IVparams,PhotoCurrent,PhotoCurrent1,PhotoCurrent2,PSUWhiteARD,ScanRates,SettlingTimes,PSUsettings
	NVAR V_supos,V_area,V_v0,V_v1,V_biasVoltage,V_complianceI,V_delay,V_incrVolt,V_length,V_settlingTime,V_SSFlag,V_4Wire,V_voltFlag
	SVAR allwaves,S_ExptType,option3,option5,S_windowname
	Variable a,b,n; String w1,w2,str,s0="Scan Rates:\r"
	if (!ssFlag)
		PopupMenu iv_gain1 win=configpanel,mode=5; SetDelay("SettlingTime",5,"40"); ControlUpdate/W=configpanel iv_gain1
	endif
	ClearGraphs(WinList("*",";","win:3"))
	S_ExptType=".hIV"; V_supos=0
	ScanDirection("",1,"")																														// Reset to default Sweep: High to Low
	if (level<10)
		LampControl("Filter",PSUsettings[level],4); PopupMenu filter0 win=configpanel,mode=level; ControlUpdate/W=configpanel filter0
		Sleep/S 6																															// Allow time for filter to get in place
	endif
	Sleep/S 0.1
	TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Testing for Voc"; ControlUpdate/W=configpanel msg
	if (V_voltFlag)																															// Flag for manual setting of Voltage sweep limits
		ScanSettings()
	else
		TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Testing for Voc"; ControlUpdate/W=configpanel msg; DoUpdate
		ScanTest(level<5)
	endif
	Command(":SOUR:VOLT:LEV:IMM:AMPL "+num2str(V_v0)); V_biasVoltage=V_v0																	// Set current Voltage
	DoWindow/F IVGraph
	if (!V_Flag)
		allwaves="PhotoCurrentHR_0,PhotoCurrentHF_0"; Execute "IVGraph()"; Execute "AcquireStyle1()"; ShowInfo
		DoWindow/T IVGraph,"Hysteresis"
		Legend/C/N=textL/J/F=0/A=MC/X=58/Y=0 Legendtext(allwaves,7)
		ModifyGraph/Z lstyle=0,rgb(PhotoCurrentHF_0)=(0,65535,0),rgb(PhotoCurrentHR_0)=(65535,0,0)
	endif
	AutoPositionWindow/E/M=1/R=ConfigPanel; S_windowname="IVGraph"
	Redimension/N=16 ScanRates,SettlingTimes
	do
		ScanRates[n]=V_incrVolt/(V_settlingTime)
		SettlingTimes[n]=V_settlingTime
		w1="PhotoCurrentHR_"+num2str(n); w2="PhotoCurrentHF_"+num2str(n)
		if (n>0)
			allwaves+=","+w1+","+w2
			AppendtoGraph/W=IVGraph $w1,$w2
		endif
		b=Hysteresis()
		Duplicate/O PhotoCurrent1,$w1; Duplicate/O PhotoCurrent2,$w2
		sprintf str,"IT:%g;AR:%g;FT:%g;CM:%g;ST:%g;SV:%g;ET:%g",IVparams[a+1][V_supos],V_area,V_length,V_complianceI,V_settlingTime,V_v0,V_delay; Note/K $w1,str
		sprintf str,"IT:%g;AR:%g;FT:%g;CM:%g;ST:%g;SV:%g;ET:%g",IVparams[a+1][V_supos],V_area,V_length,V_complianceI,V_settlingTime,V_v0,V_delay; Note/K $w2,str
		ModifyGraph/Z lstyle=0,rgb($w1)=(n*8000,65535,0),rgb($w2)=(65535,n*8000,0)
		sprintf s0,"%s\s(%s) %.3f V s\S-1\M\r\s(%s) %.3f V s\S-1\M\r",s0,w1,ScanRates[n],w2,ScanRates[n]
		Legend/C/N=textL/J/F=0/A=MT/X=58/Y=0 s0
		DoUpdate
		if ((n==0)&(V_SSFlag))
			break
		endif
		if (b>0.025)																															// 2% hysteresis threshold
			ControlInfo/W=configpanel iv_gain1
			if (V_Value==12)																													// Bail out at 2s
				break
			endif
			PopupMenu iv_gain1 win=configpanel,mode=V_Value+1; ControlUpdate/W=configpanel iv_gain1; ControlInfo/W=ConfigPanel iv_gain1
			V_settlingTime=str2num(S_Value)/1e3; Command(":SOUR:CURR:MODE FIX;:SOUR:DEL "+num2str(V_settlingtime))
		else
			break
		endif
		n+=1
	while (n<14)
	FlushKeithley()
	WaveStats/Q PhotoCurrent; SetAxis left,V_complianceI*V_area,floor(V_min*5e3)/5e3
	option3="Data Analysis ..."; option5="Layout All Data"; BuildMenu "Macros"
End

Function Hysteresis()
	WAVE Voltage,PhotoCurrent
	NVAR V_numpnts,V_v0,V_v1
	Variable a,a1,a2
	Redimension/N=(V_numpnts) Voltage,PhotoCurrent; SetScale/I x V_v0,V_v1,"V" PhotoCurrent														// -ve sweep
	TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Measuring Test Cell"; ControlUpdate/W=configpanel msg
	Command(":*CLS")
	ScanVoltage()
	Duplicate/O PhotoCurrent,PhotoCurrent1; a1=abs(area(PhotoCurrent,0,V_v0))
	a=V_v0; V_v0=V_v1; V_v1=a																												// Reverse sweep limits
	SetScale/I x V_v0,V_v1,"V" PhotoCurrent																									// +ve sweep
	Command(":*CLS")
	ScanVoltage()
	Duplicate/O PhotoCurrent,PhotoCurrent2; a2=abs(area(PhotoCurrent,0,V_v1))
	a=V_v0; V_v0=V_v1; V_v1=a																												// Reverse sweep limits
	return (a1-a2)/a1
End

Function ResistanceMethod(ctrlName,popNum,popStr) : PopupMenuControl
	String ctrlName,popStr; Variable popNum
	NVAR V_R2
	strswitch (popStr)
		case "4-Point":
			Button re_VdP,proc=Res4P; ValDisplay re_R1,title="Resistance 4Wire:"
			V_R2=0																															// Only one measurement, so R90° is redundant
			break
		case "Van de Pauw":
			Button re_VdP,proc=VdP; ValDisplay re_R1,title="Resistance @ 0°  :"
	endswitch
End

Function VdP(ctrlName) : ButtonControl
	String ctrlName
	WAVE fFunction
	NVAR V_conductivity,V_length,V_R1,V_R2,V_fR1R2,V_CFVdP,V_resultVdP,V_ResRatio
	ReadVdPResistance(0)
	V_ResRatio=V_R1/V_R2
	V_fR1R2=(V_R1-V_R2)/(V_R1+V_R2)
	V_CFVdP=1-V_fR1R2^2*ln(2)/2-V_fR1R2^4*((ln(2))^2/4-(ln(2))^3/12)
	V_resultVdP=1/SheetResistance(V_R1,V_R2)
	V_conductivity=1/(V_resultVdP*V_length)
	print "Sheet resistance[VdP]",V_resultVdP,V_CFVdP,"Sheet resistance [4W]",4.532*(V_R1+V_R2)/2*V_CFVdP
End

Function SheetResistance(a,b)
	Variable a,b
	Variable n,y,z0,z1=2*ln(2)/(pi*(a+b))
	do
		z0=z1
		y=1/exp(pi*z0*a)+1/exp(pi*z0*b)
		z1=z0-((1-y)/pi)/(a/exp(pi*z0*a)+b/exp(pi*z0*b))
		n+=1
	while ((z1-z0)/z1>0.0001)
	return z1
End
		
Function AnalyzeVdP(ctrlName) : ButtonControl
	String ctrlName
	NVAR V_resultVdP,V_R1, V_R2, V_CFVdP
	V_resultVdP=1/SheetResistance(V_R1,V_R2)
End

Function ReadVdPResistance(flg)
	Variable flg
	WAVE Datawave,Resistance0,Resistance90
	NVAR V_R1,V_R2,sourcemeter
	Variable a,b,n
	Redimension/N=(2*100) Datawave
	TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Measuring Resistance"; ControlUpdate/W=configpanel msg
	Command(":STAT:MEAS:ENAB 512")
	Command(":*SRE 1")
	Command(":FORM:ELEM RES,TIME")																											// Data output format
	Command(":SENS:FUNC 'RES'")
	Command(":SENS:RES:RANGE:AUTO 1")
	Command(":SYST:RSEN 1")																													// 4 wire sense must be ON
	Command(":OUTP:STAT ON")																												// So switch Output ON again
	Command(":TRAC:CLE")																													// Clear Buffer
	Command(":TRAC:POIN 100;:TRIG:COUN 100")																								// # of Triggers
	Command(":TRAC:FEED:CONT NEXT")
	Command(":INIT")
	do
		NI4882 ibrsp={sourcemeter}
		if (V_flag>63)
			break
		endif
		n+=1
	while(1)
	GPIBWrite2 ":TRAC:DATA?"
	GPIBReadBinary2/TYPE=8 a,b; GPIBReadBinaryWave2/TYPE=2 Datawave; GPIBReadBinary2/TYPE=8 a 
	Resistance0=Datawave[2*p]; WaveStats/Q Resistance0; V_R1=V_avg
	if (flg==0)
		Command(":OUTP:STAT OFF")																											// So switch Output ON again
		Command(":*CLS")
		TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Standby"; ControlUpdate/W=configpanel msg; DoUpdate
		DoAlert 0, "Turn the sample for 90°"
		TitleBox msg,win=configpanel,title="\F'Chicago'\Z12Measuring Resistance"; ControlUpdate/W=configpanel msg
		Command(":OUTP:STAT ON")																											// So switch Output ON again
		Command(":TRIG:COUN 100")																											// Switch Output ON
		Command(":TRAC:FEED:CONT NEXT")
		Command(":INIT")
		do
			NI4882 ibrsp={sourcemeter}
			if (V_flag>63)
				break
			endif
			n+=1
		while(1)
		GPIBWrite2 ":TRAC:DATA?"
		GPIBReadBinary2/TYPE=8 a,b; GPIBReadBinaryWave2/TYPE=2 Datawave; GPIBReadBinary2/TYPE=8 a 
		Resistance90=Datawave[2*p]; WaveStats/Q Resistance90; V_R2=V_avg
	endif
	Command(":SYST:RSEN 0")																													// Switch 4 wire OFF
	ScanFinish()
End

Function Res4P(ctrlName) : ButtonControl
	String ctrlName
	NVar V_resultVdP,V_R1,V_CFVdP
	ReadVdPResistance(1)
	V_resultVdP=4.532*V_R1*V_CFVdP
	printf "Sheet resistance: %.4g Ω/[], Measured resistance [4W]: %.4g Ω\r",V_resultVdP,V_R1
End

Function Profile()																																// Use with laser scanning of Electrode
	WAVE Current
	NVAR V_DataChannel0,V_DataChannel3,V_numpnts
	SVAR S_windowname,option5
	Variable junk,n
	V_numpnts=50
	Redimension/N=(V_numpnts) current
	Setscale/P x 0,0.254,"mm",current
	DoWindow/F Graph_Profile
	if (!V_Flag)
		 Execute "Graph_Profile()"
	endif
	Command(":SOUR:CLE:AUTO OFF")
	Command(":SENS:CURR:PROT 0.01")																										// 10mA current compliance
	Command(":OUTPUT:STAT ON")
	Sleep/S 10
//	speak("Are you ready"); Sleep/S 1
	do
//		speak(num2str(n+1))
		GPIBWrite2 ":READ?"
		GPIBRead2 V_DataChannel3,V_DataChannel0,junk; current[n]=-V_DataChannel0
		Sleep/S 3
		n+=1
	while (n<V_numpnts)
	beep
	Command(":OUTPUT:STAT OFF")
	Command(":SOUR:CLE:AUTO ON")
	S_windowname="Graph_Profile"
	option5="Layout Profile"; BuildMenu "Macros"
End

Function IV(cw,x) : FitFunc
	wave cw; Variable x
	WAVE PhotoCurrent
	NVAR V_temp
	variable a=PhotoCurrent(x)*cw[2]																											// iR term
	return cw[0]-cw[1]*(exp((x+a)/cw[3]/0.02567969)-1)																						// q/kT=(1.6021892e-19/1.380662e-23/298)
end

Function IVshunt(cw,x) : FitFunc																												// Resistive shunt in Series with cell
	wave cw; Variable x
	WAVE PhotoCurrent
	variable a=PhotoCurrent(x)*cw[2]																											// iR term
	return cw[0]-cw[1]*(exp((x+a)/cw[3]/0.02567969)-1)+(x+a)/cw[4]
end

Function DataFit(model,[a])																													// Interpolate data to get equally spaced points
	string model; variable a
	WAVE cw
	NVAR V_area,V_complianceI,V_FitError,V_FitTol,V_FitMaxIters
	SVAR allwaves,S_Value,S_windowname,option31,option32,option5
	String wname,hold
	if (ParamIsDefault(a))
		Prompt  a, "Select CellCurrent wave for fitting",popup,WaveChoice(allwaves,0)
		DoPrompt "Cell Current",a
		if (V_flag)
			return 0
		endif
		a-=1																																// Count from zero
	endif	
	S_Value=StringFromList(a,WaveChoice(allwaves,0)); wname=StringFromList(a,allwaves,",")
	WAVE w=$wname
	Duplicate/O w,PhotoCurrent,fitting,residual
	DoWindow/F IVGraph
	if (strsearch(WaveList("*",",","win:IVGraph"),"fitting",0)<0)
		AppendtoGraph/L=left PhotoCurrent,fitting; AppendtoGraph/L=resid residual
		ModifyGraph axisEnab(left)={0,0.78},axisEnab(resid)={0.8,1},freePos(Resid)=0
		ModifyGraph mirror(resid)=2,zero(resid)=1,lblPos(resid)=56
		ModifyGraph/Z mode(residual)=2,lsize(residual)=2,mode($wname)=2,lsize($wname)=2
		ModifyGraph rgb(fitting)=(0,0,65535)
		Label/Z resid "\Z12\f01Residuals"
		Cursor A,$wname,0; Cursor/P B,$wname,round(BinarySearchInterp($wname,0)-2)
		ShowInfo
		Execute "TableFitParams()"
		AutoPositionWindow/E/M=0/R=ConfigPanel
	endif
	Cursor/W=IVGraph A,PhotoCurrent,leftx(PhotoCurrent); Cursor/W=IVGraph B,PhotoCurrent,rightx(PhotoCurrent)
	DoUpdate
	WaveStats/Q w
	if (abs(V_min)<V_max)
		SetAxis left,V_max/4,V_min
	else
		SetAxis left,min(V_complianceI*V_area,-V_min/2),V_min
	endif
	DoUpdate
	V_FitError=0
	Duplicate/O w,PhotoCurrent,PhotoCurrentIR,residual,fitting,weight; residual=0
	if (Cmpstr("IV",model)==0)
		hold="1001"
		Redimension/N=(4) cw; cw[0]=PhotoCurrent(0); cw[1]=cw[0]/1e8; cw[2]=-15*sqrt(V_area); cw[3]=1.8
		if (Cmpstr("DarkCurrent",wname)==0)
			hold="1011"
			cw[0]=PhotoCurrent(0); cw[1]=cw[0]/1e2; cw[2]=-8
		endif
	else
		hold="00001"
		Redimension/N=(5) cw; cw[4]=1e6
		if (cw[3]>2.5)
			cw[3]=2.4
		endif
	endif
	V_FitTol=0.0001; V_FitMaxIters=32
	FuncFit/Q/H=hold $model cw PhotoCurrent(xcsr(A),xcsr(B))/D=fitting/R=residual
	V_FitMaxIters=256
	FuncFit/Q/M=2/N $model cw PhotoCurrent(xcsr(A),xcsr(B))/D=fitting/R=residual
	weight=1/PhotoCurrent; S_windowname="IVGraph"
	WaveStats/Q/R=[pcsr(A),pcsr(B)] residual; SetAxis resid V_min,V_max
	option31="IV+Shunt"; option5="Layout IV Data"; BuildMenu "Macros"
End

Function TruePhotoCurrent()
	WAVE DarkCurrent,PhotoCurrent0,PhotoCurrent1,PhotoCurrent2,PhotoCurrent3,PhotoCurrent4,PhotoCurrent5
	Duplicate/O DarkCurrent,TruePCurr1,TruePCurr2,TruePCurr3,TruePCurr4,TruePCurr5
	WaveStats/Q/R=(0,0.1) Darkcurrent
	TruePCurr1=PhotoCurrent1(x)-DarkCurrent(x)+V_avg; TruePCurr2=PhotoCurrent2(x)-DarkCurrent(x)+V_avg
	TruePCurr3=PhotoCurrent3(x)-DarkCurrent(x)+V_avg; TruePCurr4=PhotoCurrent4(x)-DarkCurrent(x)+V_avg
	TruePCurr5=PhotoCurrent5(x)-DarkCurrent(x)+V_avg
	DoWIndow/F IVGraph
	if (strsearch(WaveList("*",",","win:IVGraph"),"TruePCurr",0)<0)
		AppendToGraph TruePCurr1,TruePCurr2,TruePCurr3,TruePCurr4,TruePCurr5
		ModifyGraph rgb(TruePCurr1)=(0,0,0),rgb(TruePCurr2)=(0,0,0),rgb(TruePCurr3)=(0,0,0),rgb(TruePCurr4)=(0,0,0),rgb(TruePCurr5)=(0,0,0)
		ModifyGraph lsize(TruePCurr1)=2,lsize(TruePCurr2)=2,lsize(TruePCurr3)=2,lsize(TruePCurr4)=2,lsize(TruePCurr5)=2
	endif
End

Function RadiantPower()
	WAVE W_coef,ChargeDensity,Jsc,VDecay
	NVAR V_beta,eCharge,V_length,V_porosity
	SVAR S_layoutname
	String s0
	S_layoutname="layout4()"
	V_beta=VocvsIo()																														// Save the fit parameter
	if (!V_beta)
		beep
		Abort "Not enough data for Radiant Plot. Require at least 3 intensities!"
	endif
	DoWindow/F PowerPlot
	if (!V_Flag)
		Execute "PowerPlot()"
		Execute "LnPowerPlot()"
		Execute "FfPlot()"
	endif
	AutoPositionWindow/E/M=1/R=ConfigPanel PowerPlot
	AutoPositionWindow/E/M=0/R=PowerPlot LnPowerPlot
	AutoPositionWindow/E/M=0/R=LnPowerPlot FfPlot
	sprintf s0,"Intercept: "+num2str(W_coef[0])+"\rSlope: " +num2str(W_coef[1]*1e3)+" mV"
	Textbox/N=text0/F=0/A=MC/W=LnPowerPlot/X=0/Y=-25 s0
End

Function DataExtract()
	WAVE/T InputText
	WAVE Expt_parameters,Input0,Input1,Input2,Input3,Input4,Input5,Input6,Input7
	NVAR V_supos
	ClearGraphs(RemoveFromList("IVGraph",WinList("*",";","WIN:1")))																				// Clear Graphs prior to a new display
	Redimension/N=(-1,V_supos+2) Expt_parameters
	Redimension/N=(V_supos) InputText,Input0,Input1,Input2,Input3,Input4,Input5,Input6,Input7
	SetScale/P x 0,1,"",Input0,Input1,Input2,Input3,Input4,Input5,Input6,Input7; SetScale d 0,0,"hour",Input0; SetScale d 0,0,"V",Input2
	Execute "Files()"
End

Function StabilityResults(b)
	variable b
	WAVE Input0,Input0,Input1,Input2,Input3,Input4,Input5,Input6,Input7
	SVAR S_windowname,option5,option6
	DoWindow/F Table1
	if (!V_Flag)
		Execute "Table1()"
	endif
	AutoPositionWindow/E/M=0/R=ConfigPanel
	if (b)
		DoWindow/F BarGraph
		if (!V_Flag)
			Execute "BarGraph()"; S_windowname="BarGraph"
		endif
	else
		Sort Input0,Input0,Input1,Input2,Input3,Input4,Input5,Input6,Input7																			// Sort data in ascending time
		DoWindow/F CellStability
		if (!V_Flag)
			Execute "CellStability()"; S_windowname="CellStability"
			ControlBar 21		
			PopupMenu display1,pos={460,0},size={144,18},proc=GraphStyle,mode=1,value=#"\"Overlay;Staggered\""
			Cursor/P A,Input1,2
			Showinfo
		endif
	endif
	option5="Layout Results"; option6="Print & Save"; BuildMenu "Macros"
End
	
Window Files() : Panel
	NewPanel/K=2/W=(84,251,644,600) as "Selected File List"
	ModifyPanel cbRGB=(65535,54611,49151)
	ListBox lb0,pos={8,8},size={544,320},frame=2,listWave=Expt_parameters,selWave=rjack,colorWave=myColors,mode=4,editStyle=1,row=V_modeFile,widths={112}
	FileColours()
EndMacro

Function FileColours()
	WAVE/T Expt_parameters
	WAVE rjack
	Redimension/N=(DimSize(Expt_parameters,0),-1,3) rjack
	SetDimLabel 2,1,foreColors,rjack; SetDimLabel 2,2,backColors,rjack																				// Colour determined by DimLabel
	rjack[][][1]=3; rjack[][][2]=1																												// Set colours from ColourWave
End

Function SetFile()
	WAVE/T w=Expt_parameters,InputText
	WAVE rjack,Input0,Input1,Input2,Input3,Input4,Input5,Input6,Input7
	SVAR allspectra,S_xaxisLabel,S_yaxisLabel
	variable a,b,i; string cmd
	Input0=TranslateDate(w[9][p+1]); a=Input0[0]; Input0=(Input0[p]-a)/60/60																		// Convert to hours
	allspectra=""
	do
		for(i=1; i<20; i+=1)																													// Check for blanks
			if (rjack[i][0][0]>0)
				switch (i)
					case 1:																													// Dye
					case 3:																													// Additional
					case 4:																													// Electrolyte
					case 5:																													// Semiconductor
					case 6:																													// WE Glass
						b=1; InputText=w[i][p+1]; S_yaxisLabel=""
						break
					case 12:																													// Isc - bit:0001
					case 13:																													// Jsc
					case 15:																													// Ipmax
						allspectra+="Input1;"; Input1=-str2num(w[i][p+1])/1e3
						SetScale d 0,0,"A",Input1; S_yaxisLabel="Current [\U]"
						break
					case 11:																													// Uoc - bit:0010
					case 14:																													// Upmax
						allspectra+="Input2;"; Input2=str2num(w[i][p+1])
						SetScale d 0,0,"V",Input2; S_yaxisLabel="Potential [\U]"
						break
					case 16:																													// Fillfactor - bit:0100
						allspectra+="Input4;"; Input4=str2num(w[i][p+1])*500/str2num(w[10][p+1])
						SetScale d 0,0,"W",Input4; S_yaxisLabel="Power [\U]"
						break
					case 17:																													// PowerOut - bit:1000
						allspectra+="Input3;"; Input3=str2num(w[i][p+1])
						SetScale d 0,0,"",Input3; S_yaxisLabel="Fill Factor"
						break
					case 18:																													// PowerOut - bit:1000
						allspectra+="Input5;"; Input5=str2num(w[i][p+1])*100/str2num(w[10][p+1])
						SetScale d 0,0,"%",Input5; S_yaxisLabel="Efficiency [\U]"
						break
				endswitch
			endif
		endfor
		if (!cmpstr(allspectra,""))
			DoAlert 0,"You must select at least one parameter cell"
			if (V_flag==-1)
				break
			endif
		endif
	while (!cmpstr(allspectra,""))
	allspectra=sortlist(allspectra)
	if (ItemsinList(allspectra)==1)
		Extract4Bar(allspectra[0,strlen(allspectra)-2])
		if (b==0)
			InputText=num2str(Input0[p]); S_xaxisLabel="Time [h]"
			b=1
		endif
	endif
	StabilityResults(b)
end

Function Extract4Bar(s)
	string s
	WAVE IVparams
	NVAR V_supos
	SVAR allwaves,allspectra
	variable flg,n=str2num(s[5]),n1,npt; string str,list="Input1;Input2;Input3;Input4;Input5;Input6;Input7"
	n1=3*(n==2)+4*(n==1)+5*(n==3)+6*(n==4)
	n=0; allspectra=""
	do
		str=StringFromList(n,allwaves,","); npt=str2num(str[12,strlen(str)])-1
		flg=cmpstr(str,"")
		if (flg)
			WAVE w=$StringFromList(npt,list)
			w=abs(IVparams[12*npt+n1][p])
			allspectra+=StringFromList(npt,list)+";"
		endif
		n+=1
	while (flg)
	allspectra=sortList(allspectra,";",1)
End

Function VocvsIo()
	WAVE Voc,RadPower,LRadPower,Jsc
	WAVE cw=W_coef
	SVAR allwaves
	allwaves=SortList(WaveList("PhotoCurrent*",",","WIN:IVGraph"),",",16)
	SummariseData()
	if (ItemsInList(allwaves,",")<3)
		return NaN
	endif
	LRadPower=ln(RadPower)
	CurveFit/Q/N line Jsc/X=RadPower/D
	CurveFit/Q/N line Voc/X=LRadPower/R
	return cw[1]
end

Function ClearGraphs(list)
	string list
	Variable n,flg; String windowname																											// List all tables and graphs
	do
		windowname=StringFromList(n,list,";")
		flg=cmpstr(windowname,"")
		if (flg)
			if (CmpStr(windowname,"PhotoResponse"))
				DoWindow/K $windowname
			endif
		endif
		n+=1
	while (flg)
End
	
Function Specs(ctrlName) : ButtonControl
	String ctrlName
	SVAR option5
	string s=CleanupName(option5,0)+"()"
	Execute s
End

Function yScale(ctrlName,popNum,varStr) : PopupMenuControl																						// Voltage Scale
	String ctrlName,varStr; Variable popNum
	SVAR allwaves
	string str,str1; variable i
	switch (popNum)
	case 1:
		for (i=0; i<ItemsinList(allwaves,","); i+=1)
			str=StringfromList(i,allwaves,","); str1="TruePCurr"+num2str(i)
			AppendtoGraph $str; ModifyGraph lStyle($str)=i
			RemovefromGraph $str1
		endfor
		SetAxis/A/R left; ModifyGraph log(left)=0
		break
	case 2:
		for (i=0; i<ItemsinList(allwaves,","); i+=1)
			str=StringfromList(i,allwaves,","); str1="TruePCurr"+num2str(i)
			WAVE w=$str; Duplicate/O w,$str1
			WAVE w1=$str1
			w1=abs(w)
			AppendtoGraph $str1; ModifyGraph lStyle($str1)=i
			RemovefromGraph $str
		endfor
		SetAxis/A left; ModifyGraph log(left)=1
		break
	endswitch
End

Function SummariseData()
	WAVE Jsc,Voc,Ff,RadPower,LRadPower,IVparams
	NVAR V_PeakLoc,V_supos
	SVAR allwaves
	Variable a,flag,n,npt; String str
	allwaves=RemoveFromList("DarkCurrent,PhotoCurrent",allwaves,",")																				// Block the Dark Current
	DoWindow/F IVGraph
	Redimension/N=(ItemsInList(allwaves,",")) Jsc,Voc,Ff,RadPower,LRadPower
	do
		str=StringFromList(n,allwaves,","); npt=str2num(str[strlen(str)-1,strlen(str)-1])
		if (strsearch(str,"_",0)>2)
			str=StringFromList(n,str,"_")
		endif
		flag=CmpStr(str,"")
		if (flag)
			a=IV_Params(str,V_supos)
			Jsc[n]=-IVparams[12*npt+5][V_supos]																								// Process intensity
			Voc[n]=IVparams[12*npt+3][V_supos]
			Ff[n]=IVparams[12*npt+10][V_supos]
			RadPower[n]=IVparams[12*npt+1][V_supos]
			if ((n==0)&((V_supos)==0))
				str=PossiblyQuoteName(str)
				Tag/C/N=text16/F=0/X=16/Y=0 $str,a,"Max Power Pt."
			endif
		else
			break
		endif
		n+=1
	while(1)
End

Function IV_Params(current,n)
	String current; Variable n
	String s=current[strlen(current)-1,strlen(current)-1],s0,s1; Variable a=12*str2num(s)
	WAVE IVParams,Photocurrent=$current, Power=$("Power"+s)
	NVAR V_supos,V_area,V_Jsc,V_Jpp,V_voc,V_Vpp,V_ff,V_pwr
	Duplicate/O Photocurrent,$("Power"+s); Power*=x; SetScale d 0,0,"W", $("Power"+s)
	IVparams[a+4][n]=Photocurrent(0) 	  					 																					// Short circuit current
	IVparams[a+5][n]=IVparams[a+4][n]/V_area			 																						// Isc/cm2
	FindLevel/Q/B=3 Photocurrent,0
	if (V_Flag)
		beep; IVparams[a+3][n]=pnt2x(Photocurrent,numpnts(Photocurrent)-1)
	else
		IVparams[a+3][n]=V_LevelX     											 															// Open circuit Voltage
	endif
	FindPeak/Q/B=11/M=-5e-8/N $("Power"+s)																									// Set threshold @ 0.1µW
	if (V_Flag)
		beep
		IVparams[a+6][n]=V_PeakLoc; IVparams[a+7][n]=pnt2x(Photocurrent,numpnts(Photocurrent)-1)												// Upmax & Ipmax
	else
		IVparams[a+6][n]=V_PeakLoc; IVparams[a+7][n]=Photocurrent(V_PeakLoc)																	// Upmax & Ipmax
		IVparams[a+8][n]=IVparams[a+7][n]/V_area																								// Ipmax/cm2
		IVparams[a+9][n]=abs(Power(V_PeakLoc))/V_area																						// Power out
		IVparams[a+10][n]=IVparams[a+7][n]*V_PeakLoc/(IVparams[a+4][n]*IVparams[a+3][n])														// Fill factor
	endif
	V_Jsc=IVparams[a+5][n]; V_voc=IVparams[a+3][n]; V_ff=100*IVparams[a+10][n]; V_pwr=IVparams[a+9][n]; V_Jpp=IVparams[a+8][n]; V_Vpp=IVparams[a+6][n]
	if (V_supos<1)
		sprintf s0,"Tag/W=IVGraph/C/N=text%d/B=1/F=0/L=0/X=0/Y=-0.5 %s,%g,%s",a/12,current,V_PeakLoc,"\"\Z18•\""
		sprintf s1,"%.2f",1e3*IVparams[a+1][n]
		sprintf s1,"Tag/W=IVGraph/C/N=text%d/F=0/L=0/X=0/Y=0 %s,%g,%s",a/12+10,current,0.1,"\""+s1+"%\""
		Execute s0; Execute s1
	endif
	return V_PeakLoc
End

Function Cell_Area()
	WAVE RefDiodes
	NVAR V_area,V_numcell,V_incrVolt,V_refNum,V_RefCalibration,V_currentRef
	Variable a=V_area,b=V_numCell,e=V_refNum+1
	Prompt  a, "Photoactive Area of Test Cell [cm2]?"
	Prompt  b, "# of Cells in Module (max. 140)?"
	Prompt  e, "Select Standard Si Reference diode",popup,"Ref Cell#0;Ref Cell#1;Ref Cell#2;Ref Cell#3;Ref Cell#4;Ref Cell#5;Ref Cell#6;Ref Cell#7;Ref Cell#8;Default Ref#9;Udo Ref#10"
	DoPrompt "Optical Specifications",a,b
	V_area=a; V_numCell=round(b); V_refNum=e-1
	V_incrVolt=5e-3; a=2
	if (b>1)
		V_incrVolt=1e-2; a=3
	endif
	if (b>2)
		V_incrVolt=2e-2; a=4
	endif
	if (b>4)
		V_incrVolt=5e-2; a=5
	endif
	Popupmenu iv_incr win=configpanel,mode=a
	V_RefCalibration=V_currentRef																												// Default value for offset Ref Diode#3
	if (e==11)
		V_RefCalibration=0.1/RefDiodes[10][6]
	endif	
End

Function Filename()
	NVAR V_run
	SVAR S_ExptType,S_number,S_cellname
	Variable a=strlen(S_cellname)
	if (a<2)
		string s
		prompt s,"Enter a root name for the current Experimental series. ie 'marie'"
		DoPrompt "File Root Name",s	
		S_cellname=s
	endif
	S_number=S_cellname+"_"+date()[5,strlen(Date())-1]
	if (V_run<10)
		S_number+="#0"+num2str(V_run)
	else
		S_number+="#"+num2str(V_run)
	endif
	S_number+=S_ExptType
End

Function/T waves2save()
	variable n,gotfile; string s0,s1,s2,s3="",windowname
	s0=SortList(WinList("*",";","win:3"))																										// Get list of Graphs
	do
		windowname=StringFromList(n,s0)
		strswitch(windowname)
			case "IVGraph":
				s1=SortList(WaveList("*current*",";","win:"+windowname),";",16)																	// Get all the current waves
				s2=ListMatch(s1,"!fit*"); s3+=ListMatch(s2,"!res*")
				break
			case "GraphPPT":
			case "GraphIV":
			case "GraphHysteresis":
				s1=SortList(WaveList("*",";","win:"+windowname),";",16)
				s2=RemoveFromList(s1,s3); s3=s2+s1
				break
			case "GraphStability":
				s1=SortList(WaveList("*",";","win:"+windowname),";",16)
				s2=RemoveFromList(s1,s3); s3=s2+s1
				break
			case "RecombinationRates":
				s1=SortList(WaveList("*",";","win:"+windowname),";",16)																			// Check for duplicates, remove them all first
				s2=RemoveFromList(s1,s3); s3=s2+s1+"cw;"																					// Check for duplicates, remove them all first then add them in
				break
			case "GraphTau":
			case "TransientCGraph":
			case "TransientVGraph":
				s1="transient0;"
				s2=RemoveFromList(s1,s3); s3=s2+s1
				break
		endswitch
		n+=1
	while(n<ItemsinList(s0))
	s2=ListMatch(s3,"!fit*"); s3=ListMatch(s2,"!res*")
	return s3
End

Function PrintSave(prtFlag)
	Variable prtFlag
	NVAR V_supos,V_loadFlag,PDFflag,hyteresisFlag
	SVAR allwaves,S_ExptType,S_Filename,S_layoutname,S_warning,S_windowname,option4,option5,option6,option8,option9
	Variable n,gotfile; String str,windowname=WinName(0,4)
	if (PDFflag)
		SavePICT/P=PDFpath/E=-2/B=72 as ParseFilePath(3,S_Filename,":",0,0)+".pdf"
	else
		if (prtFlag)
			PrintLayout/D $windowname
		endif
	endif
	DoWindow/K $windowname
	allwaves=SortList(waves2save(),";",16)
	ClearGraphs(WinList("*",";","win:3"))																										// Get all graphs, tables and not panels
	if (V_supos>0)																															// If Appended, then kill waves
		do
			windowname=StringFromList(n,allwaves)
			Gotfile=CmpStr(windowname,"")
			if (GotFile)
//				KillWaves $PossiblyQuoteName(windowname)
			endif
			n+=1
		while(GotFile)
		strswitch (S_layoutname)
			case "Layout5()":
				SaveExtractedData()																											// Data Extraction
				break
			endswitch
	endif
	if (V_loadFlag<1)
		strswitch (S_layoutname)
			case "Layout7()":																													// Charge Extraction
				allwaves="transient1;transient2;Peak_Capacitance;Voc;ywave;xwave"
				break
		endswitch
		Execute "SaveIVData()"
	endif
	V_supos=-1; V_loadFlag=0; hyteresisFlag=0; S_layoutname="Layout1()"; allwaves="PhotoCurrent0"; S_warning=""
	if (strsearch(allwaves,",fitting",0)>0)
		allwaves=allwaves[0,strsearch(allwaves,",fitting",0)]
	endif
	Button sp_layout,disable=2																												// Disable Layouts
	S_ExptType=".sIV"
	option4="(Data Extract"; option5="(Layout..."; option6="(Print & Save"; option8="(Append ..."; option9="(Save..."; BuildMenu "Macros"
End

Function TestRoutines()
	NVAR V_PTTDuration
	SVAR option5
	User("",5,"Reference Cell")
	Celltest("")
	PPT("Current",1)
	PPTStability("Current",1)
	V_PTTDuration=16; TimeDependenceWrapper("100% Sun","CURR","VOLT",0)
	option5="(Layout..."; BuildMenu "Macros"
End

/////////////////////////////////////////////////// FILE I/O ////////////////////////////////////////////////////

Proc SaveIVData()       				    																										// Store selected data wave in Igor ascii format
	PauseUpdate; Silent 1
	V_run+=1
	Variable file; String str
	Gotfile=CmpStr(S_Filename,"")
	if  (Gotfile)
		Save/B/T/P=DataPath allwaves as S_Filename
		Open/P=DataPath/A file as S_Filename
		fprintf file,"%s\r","X d_t=\""+d_t+"\""
		fprintf file,"%s\r","X S_cellname=\""+S_cellName+"\""
		fprintf file,"%s\r","X S_type=\""+S_type+"\""
		fprintf file,"%s\r","X S_temp=\""+S_temp+"\""
		fprintf file,"%s\r","X S_dye=\""+S_dye+"\""
		fprintf file,"%s\r","X S_electrolyte=\""+S_electrolyte+"\""
		fprintf file,"%s\r","X S_layer=\""+S_layer+"\""
		fprintf file,"%s\r","X S_WE=\""+S_WE+"\""
		fprintf file,"%s\r","X S_CE=\""+S_CE+"\""
		fprintf file,"%s\r","X S_specification=\""+S_specification+S_warning+"\""
		fprintf file,"%s\r","X V_length="+num2str(V_length)
		fprintf file,"%s\r","X V_porosity="+num2str(V_porosity)
		fprintf file,"%s\r","X V_numCell="+num2str(V_numCell)
		fprintf file,"%s\r","X V_ipce550="+num2str(V_ipce550)
		fprintf file,"%s\r","X V_ipce700="+num2str(V_ipce700)
		fprintf file,"%s\r","X S_Calibrationfile=\""+S_Calibrationfile+"\""
		fprintf file,"%s\r","X S_Username=\""+S_Username+"\""
		Close file
	endif
EndMacro

Function SaveExtractedData()
	WAVE Input0,Input1,Input2,Input3,Input4,Input5,Input6
	WAVE/T InputText
	NVAR GotFile
	SVAR S_Filename
	String filename=S_Filename[0,strsearch(S_Filename,"_",0)-1]
	Gotfile=CmpStr(filename,"")
	if (Gotfile)
		Save/B/T/P=DataPath "InputText;Input0;Input1;Input2;Input3;Input4;Input5" as filename
	endif
End

Function LoadIVData()
	WAVE IVparams
	NVAR V_supos,V_loadFlag,V_voltFlag,V_area,V_complianceI,V_RefCalibration,V_settlingTime
	SVAR allwaves,allspectra,S_Filename1,option3,option31,option5
	Variable n,n1,flg; String fileName=StringfromList(0,allspectra),str
	LoadWave/Q/O/T/P=DataPath fileName
	allwaves=SortList(ListMatch(S_WaveNames,"PhotoCurrent*"),";",16)+"DarkCurrent"
	S_Filename1=ParseFilePath(3,S_Filename,":",0,0)
	do
		str=StringFromList(n,allwaves)
		flg=CmpStr(str,"")
		if (flg)
			WAVE PhotoCurrent=$str
			n1=str2num(str[12,strlen(str)-1]); n1=numtype(n1)?13: n1
			IVparams[12*n1+1][V_supos]=str2num(StringByKey("IT",ReplaceString("\r",note(PhotoCurrent),";")))
		endif
		n+=1
	while (flg)
	V_voltFlag=(leftx($StringFromList(0,allwaves))>1)																							// Check for extended scan data
	IVparams[0,;12][V_supos]=IVparams[p+1][V_supos]/V_RefCalibration																			// Update the Ref.Cell currents
	V_area=str2num(StringByKey("AR",note($StringFromList(0,allwaves)))); V_settlingTime=str2num(StringByKey("ST",note($StringFromList(0,allwaves))))
	V_complianceI=str2num(StringByKey("CM",note($StringFromList(0,allwaves))))
	DoWindow/F TransientCGraph
	if (!V_Flag)
		Execute "TransientCGraph()"; RemoveFromGraph/Z transient2_INT
		ModifyGraph/Z mirror(left)=2
	endif
	TransientData("Current")
	if (strlen(allwaves)==0)
		DoAlert 0,"No IV data in File"
		Abort
	endif
	allwaves=ReplaceString(";",allwaves,","); Execute "IVGraph()"
	AutoPositionWindow/E/M=1/R=ConfigPanel IVGraph
	AutoPositionWindow/E/M=1/R=IVGraph TransientCGraph
	SummariseData()
	SetAxis/A bottom
	SetAxis/A/R left; DoUpdate; GetAxis/Q left; SetAxis left,min(V_complianceI*V_area,-V_max/2),V_max
	if (V_voltFlag)
		ControlBar 20
		PopupMenu yDisp,pos={480,0},size={76,16},proc=yScale,title="y-Axis",mode=1,value=#"\"Default;log(Magnitude)\""
	endif
	V_supos=0;  V_loadFlag=1
	DoWindow/F ConfigPanel; TabControl tab0,value=4; tabPanels("tab0",4)																			// Set to Specs page
	option3="Data Analysis ..."; option31="IV+Shunt("; option5="Layout All Data"; BuildMenu "Macros"
End

Function AppendIVData()			     											     																// Load data and append to graph
	WAVE cw,IVparams,Input0,Input1,Input2,Input4,Input5,Input6
	WAVE/T Expt_parameters,InputText
	NVAR V_area,V_complianceI,V_dataType,V_settlingTime,V_supos,V_PowerIn1,V_PowerIn2,V_PowerIn3,V_PowerIn4,V_PowerIn5
	SVAR allspectra,allwaves,S_Filename1,S_channel,option4,S_YdataName
	Variable a,b,n,nfiles; String filelist,str,Filename
	if (V_supos==0)
		Redimension/N=(-1,16) Expt_parameters,IVparams
		SelectDataSet(); loadparams()
		DoWindow/F IVGraph
		sprintf str,"RemoveFromGraph/W=IVGraph/Z %s,DarkCurrent",S_YdataName; Execute str
		ModifyGraph axisEnab(power)={0,0.4},axisEnab(left)={0.4,0.8},grid=2,mirror=2,freePos(power)=0,lblPos(power)=52,zero(power)=1
		ModifyGraph/Z lstyle(power1)=0,lstyle(power4)=2,lstyle(power3)=3,lstyle(power2)=4
		SetAxis/A/R left; DoUpdate; GetAxis/Q left; SetAxis left,min(V_complianceI*V_area,-V_max/2),V_max
		SetAxis/A/R power
		Label power "\F'Times'\Z12\f01Power [\U]"
		RemoveFromGraph/Z transient0,transient1,transient2,transient3,transient4,transient5,transient6,ywav
		filelist=FileSelection(); n=1																												// Do not need a repeat of frst file data
		InputText[V_supos]=S_Filename1; Input0[V_supos]=IVparams[b+11][V_supos]; Input1[V_supos]=IVparams[b+3][V_supos]; Input2[V_supos]=IVparams[b+4][V_supos]; Input4[V_supos]=IVparams[b+9][V_supos]; Input5[V_supos]=IVparams[b+10][V_supos]; Input6[V_supos]=cw[2]
		filelist=FileSelection(); n=1; V_supos=n
	endif
	if (strlen(filelist)>0)
		nfiles=itemsInList(filelist)
		Redimension/N=(nfiles) InputText,Input0,Input1,Input2,Input4,Input5,Input6; Redimension/N=(-1,nfiles) Expt_parameters,IVparams					// Redimension for # of files
		SetScale d 0,0,"m",Input0; SetScale d 0,0,"V", Input1; SetScale d 0,0,"A", Input2; SetScale d 0,0,"%", Input4; SetScale d 0,0,"%", Input5; SetScale d 0,0,"Ω", Input6
		do
			Filename=StringfromList(n,filelist)	//; print n,V_supos,Filename
			LoadWave/Q/O/T/P=DataPath Filename
			if (FindListItem(S_YdataName,S_WaveNames)>-1)																					// Ensure that S_YdataName is present in file
				S_Filename1=ParseFilePath(3,S_Filename,":",0,0)
				SelectDataSet(a=V_dataType); loadparams(); b=12*(floor((V_dataType-1)/2))
				InputText[V_supos]=Filename
				Input0[V_supos]=IVparams[b+11][V_supos]
				Input1[V_supos]=IVparams[b+3][V_supos]																						// Voc
				Input2[V_supos]=IVparams[b+4][V_supos]																						// Isc
				Input4[V_supos]=IVparams[b+9][V_supos]																						// Efficiency
				Input5[V_supos]=IVparams[b+10][V_supos]																						// Fill Factor																								// Efficiency and Fill Factor
				Input6[V_supos]=cw[2]																										// Series Resisitance																							// Efficiency and Fill Factor
				V_supos+=1
			endif
			n+=1
		while (n<nfiles)
		DoWindow/F TableOutputParams
		if (!V_flag)
			Execute "TableOutputParams()"
			AutoPositionWindow/E/M=0/R=IVDataLists0 TableOutputParams
		endif
	else
		Filename=StringfromList(V_supos,allspectra)
		LoadWave/Q/O/T/P=DataPath Filename
		S_Filename1=ParseFilePath(3,S_Filename,":",0,0)
		IVparams[1][V_supos]=V_PowerIn1; IVparams[13][V_supos]=V_PowerIn2; IVparams[25][V_supos]=V_PowerIn3; IVparams[37][V_supos]=V_PowerIn4; IVparams[49][V_supos]=V_PowerIn5
		V_area=str2num(StringByKey("AR",note($StringFromList(0,allwaves,",")))); V_settlingTime=str2num(StringByKey("ST",note($StringFromList(0,allwaves,","))))
		V_complianceI=str2num(StringByKey("CM",note($StringFromList(0,allwaves,","))))
		SelectDataSet(a=V_dataType); loadparams()
		V_supos+=1
	endif
End

Function LoadPPTData()
	WAVE ScanRates,transient0,transient2,ywav
	NVAR V_supos,V_loadFlag
	SVAR allspectra,allwaves,option3,option31,option5,S_windowName
	Variable bias,n,n1,flag; String fileName=StringfromList(0,allspectra),s0="Scan Rates",str,w1,w2
	V_supos=0;  V_loadFlag=1
	LoadWave/Q/O/T/P=DataPath fileName
	if (V_flag>4)																																// If number of waves > 4, then Peak Power Stability
		DoWindow/F IVGraph
		if (!V_Flag)
			w1="PhotoCurrentH"+num2str(2*n); w2="PhotoCurrentH"+num2str(2*n+1); allwaves=w1+","+w2; Execute "IVGraph()"; Execute "AcquireStyle1()"; ShowInfo
			DoWindow/T IVGraph,"Hysteresis"
			Legend/C/N=textL/J/F=0/A=MC/X=58/Y=0 Legendtext(allwaves,7)
			ModifyGraph/Z lstyle=0,rgb(PhotoCurrentH0)=(0,65535,0),rgb(PhotoCurrentH1)=(65535,0,0)
			sprintf s0,"%s\r\s(%s) %.3f V s\S-1\M\r\s(%s) %.3f V s\S-1\M",s0,w1,ScanRates[n],w2,ScanRates[n]
			Legend/C/N=textL/J/F=0/A=MT/X=58/Y=0 s0
		endif
		AutoPositionWindow/E/M=1/R=ConfigPanel
		DoWindow/F GraphStability
		if (!V_Flag)
			Execute "GraphStability()"
		endif
		AutoPositionWindow/E/M=0/R=ConfigPanel
	else
		if (strsearch(S_WaveNames,"transient0",0)>-1)
			DoWindow/F TrasientVGraph
			if (!V_Flag)
				Execute "TransientVGraph()"
				ModifyGraph rgb(transient0)=(65535,0,0),margin(left)=54,margin(right)=80,mirror(left)=1; S_windowName="TransientVGraph"
			endif
			AutoPositionWindow/E/M=1/R=ConfigPanel
			WAVE w=$"transient0"; WaveStats/Q w; ywav=V_avg	; bias=str2num(StringByKey("BI",note(transient0)))
			sprintf s0,"\Z10Bias Current: %.2W0PA\rVoltage average: %.2W0PA\rRMS Noise: %g",bias,V_avg,100*V_sdev/V_avg; TextBox/C/N=text0/F=0/A=LT/X=88/Y=4 s0
		elseif (strsearch(S_WaveNames,"transient2",0)>-1)
			DoWindow/F TrasientCGraph
			if (!V_Flag)
				Execute "TransientCGraph()"
				RemoveFromGraph/Z transient0,transient1,transient3,transient4,transient5,transient6
				ModifyGraph rgb(transient2)=(65535,0,0),margin(left)=54,margin(right)=80,mirror(left)=1; S_windowName="TransientCGraph"
			endif
			AutoPositionWindow/E/M=1/R=ConfigPanel
			WAVE w=$"transient2"; WaveStats/Q w; ywav=V_avg; bias=str2num(StringByKey("BI",note(transient2)))
			sprintf s0,"\Z10Bias Voltage %.2W0PA\rCurrent average: %.2W0PA\rRMS Noise: %g",bias,V_avg,100*V_sdev/V_avg; TextBox/C/N=text0/F=0/A=LT/X=88/Y=4 s0
		else
			DoWindow/F GraphPPT
			if (!V_Flag)
				Execute "GraphPPT()"
			endif
			AutoPositionWindow/E/M=1/R=ConfigPanel
			DoWIndow/F GraphIV
			if (!V_Flag)
				Execute "GraphIV()"
			endif
			AutoPositionWindow/E/M=1/R=GraphPPT
		endif
	endif
	DoWindow/F ConfigPanel; TabControl tab0,value=4; tabPanels("tab0",4)																			// Set to Specs page
	option3="Data Analysis ..."; option31="(IV+Shunt"; option5="Layout PPT"; BuildMenu "Macros"
End

Function/S Fileselection()
	SVAR S_Filename
	String str=S_Filename[0,strsearch(S_Filename,"_",0)-1],filelist=""
	Prompt str,"Enter your Root name (ie 'Francine' or 'PL1206/sb2'. Blank for a Single selection)?"
	DoPrompt "Single or Automatic file Selection",str
	if (strlen(str)>0)
		string allfilelist=RemoveFromList(S_Filename,IndexedFile(DataPath,-1,"TEXT"))
		filelist=SortList(ListMatch(allfilelist,str+"*"),";",16)																						// Get named Igor files
	endif
	return filelist
End

Function SelectDataSet([a])
	Variable a
	WAVE Darkcurrent
	NVAR V_dataType
	SVAR allwaves,S_Ydataname
	if (ParamIsDefault(a))
		a=V_dataType
		Prompt a,"Which dataset do you want to compare?",popup,WaveChoice(allwaves,1)
		DoPrompt "Data Sets",a
		if (V_Flag)
			return 0
		endif
		V_dataType=a																														// Waves start at #0
	endif
	a=floor((V_dataType-1)/2)
	if (mod(V_dataType,2))
		S_Ydataname="PhotoCurrent"+num2str(a)
	else
		S_Ydataname="TruePCurr"+num2str(a)
		WAVE w0=$S_YdataName,w1=$("PhotoCurrent"+num2str(a))
		Duplicate/O DarkCurrent,w																												// To scale wave
		WaveStats/Q/R=(0,0.1) Darkcurrent; w0=w1-DarkCurrent+V_avg
	endif
End

Function Loadparams()
	WAVE/T Expt_parameters
	WAVE IVparams,DarkCurrent,PhotoCurrent,Power,Transient0
	NVAR V_area,V_complianceI,V_ipce550,V_ipce700,V_supos
	SVAR d_t,S_dye,S_electrolyte,S_Filename1,S_layer,S_specification,S_type,S_CE,S_WE,S_YdataName
	variable p1=strsearch(S_Filename1,"_",0)
	string n=S_Filename1[p1+1,strlen(S_Filename1)]
	string w="PhotoCurrent"+n,w1="DarkCurrent"+n,w2="Power"+n,w3="Transient"+n
	SetDimLabel 1,V_supos,$S_Filename1,Expt_parameters
	Expt_parameters[0][V_supos]=S_type
	Expt_parameters[1][V_supos]=S_dye
	Expt_parameters[2][V_supos]=num2str(V_area)
	Expt_parameters[3][V_supos]=S_specification
	Expt_parameters[4][V_supos]=S_electrolyte
	Expt_parameters[5][V_supos]=S_layer
	Expt_parameters[6][V_supos]=S_WE
	Expt_parameters[7][V_supos]=S_CE
	Expt_parameters[8][V_supos]=S_Filename1
	Expt_parameters[9][V_supos]=d_t
	SummariseData()																															// Calculate Measured parameters
	variable a=12*(str2num(S_YdataName[12])==2)+24*(str2num(S_YdataName[12])==3)+36*(str2num(S_YdataName[12])==4)+48*(str2num(S_YdataName[12,12])==5)
	Expt_parameters[10][V_supos]=num2str(IVparams[a+1][V_supos]*1e3)																		// PowerIn, scaled to mW
	Expt_parameters[11][V_supos]=num2str(IVparams[a+3][V_supos])																			// Uoc
	Expt_parameters[12][V_supos]=num2str(IVparams[a+4][V_supos]*1e3)																		// Isc, scaled to mA
	Expt_parameters[13][V_supos]=num2str(IVparams[a+5][V_supos]*1e3)																		// Jsc, scaled to mA
	Expt_parameters[14][V_supos]=num2str(IVparams[a+6][V_supos])																			// Upmax
	Expt_parameters[15][V_supos]=num2str(IVparams[a+8][V_supos]*1e3)																		// Jpmax
	Expt_parameters[16][V_supos]=num2str(IVparams[a+9][V_supos]*1e3)																		// PowerOut
	Expt_parameters[17][V_supos]=num2str(IVparams[a+10][V_supos])																			// Ff
	Expt_parameters[18][V_supos]=num2str(100*IVparams[a+9][V_supos]/IVparams[a+1][V_supos])
	Expt_parameters[19][V_supos]=num2str(V_ipce550/V_area)
	Expt_parameters[20][V_supos]=num2str(V_ipce700/V_area)
	WAVE PhotoCurrent=$S_YdataName
	PhotoCurrent/=V_area; Duplicate/O PhotoCurrent,$w; AppendtoGraph $w																		// Append currents
	DarkCurrent/=V_area; Duplicate/O DarkCurrent,$w1; AppendtoGraph $w1																		// Append Dark currents
	Duplicate/O $("Power"+S_YdataName[12,13]),$w2; AppendtoGraph/L=power $w2																// Append Power
	Transient0/=V_area; Duplicate/O Transient0,$w3; AppendtoGraph/W=TransientCGraph $w3														// Append Transient currents
	SetAxis/A/R left; DoUpdate; GetAxis/Q left; SetAxis left,min(V_complianceI*V_area,-V_max/2),V_max
	ModifyGraph lstyle($(PossiblyQuoteName(w)))=V_supos,lstyle($(PossiblyQuoteName(w1)))=V_supos,lstyle($(PossiblyQuoteName(w2)))=V_supos
	ModifyGraph/W=TransientCGraph lstyle($(PossiblyQuoteName(w3)))=V_supos
	ModifyGraph rgb($(PossiblyQuoteName(w1)))=(0,65535,0),rgb($(PossiblyQuoteName(w2)))=(0,0,65535)
	SetAxis/W=IVGraph/A/R power; DoUpdate; GetAxis/W=IVGraph/Q power; SetAxis/W=IVGraph power,min(V_complianceI*V_area,-V_max/2),V_max
	SetAxis/W=TransientCGraph/A
End

Proc Export(a,b)
	String b="Marie"
	Prompt b,"Enter your Root name (ie 'Marie')?"
	PauseUpdate; Silent 1
	name=b
	Variable fileIndex,GotFile,n; string allfilelist=IndexedFile(DataPath,-1,"TEXT"),filelist,s
	if (a==1)
		filelist=ListMatch(allfilelist,name+"_*")																									// Get named Igor files
	else
		filelist=ListMatch(allfilelist,"!"+name+"_*")																								// Get everything else
		do
			s=StringFromList(n,filelist,";")																										// Pullout the 'not named' files
			GotFile=StrSearch(s,name,0)
			if (GotFile==-1)
				filelist=RemoveFromList(s,filelist,";")
			else
				n+=1
			endif
			GotFile=cmpStr(s,"")
		while (GotFile)
	endif
	do
		S_Filename=StringFromList(fileindex,filelist,";")																							// Get the Filename
		GotFile=cmpstr(S_Filename,"")																											// Check it
		if (GotFile)
			LoadIVData()
			Legend/K/N=text0																												// Kill the legend
			SummariseData()
			SavePICT/O/P=ExportPath as"temp.PICT"
			LoadIPCEData()
			SaveExportData()
			SavePICT/O/P=ExportPath as"temp_spec.PICT"
			SendScript("I-U IMPORTATION")
		endif
		fileIndex+=1
	while (GotFile)
	ClearGraphs(WinList("*",";","win:3"))	)
	V_supos=-1																																// To avoid lastfile overwrite with next acquisition
	option5="Layout...("; option6="Print & Save("; option8="Append IV Data("; option9="Save...("; BuildMenu "Macros"
EndMacro

Function SaveExportData()       				    						 																			// Store selected data wave in Igor ascii format
	WAVE IVparams,cw
	NVAR V_area,V_current_Total,V_IPCE550,V_IPCE700,V_supos
	SVAR d_t,S_dye,S_electrolyte,S_Filename1,S_layer,S_specification,S_type,S_userName
	Variable file,n,p1=strsearch(d_t,", ",0),p2=strsearch(d_t," ",5),p3=strsearch(d_t,", ",8)
	string day=d_t[p2+1,p3-1],month=d_t[p1+2,p2-1],year=d_t[p3+2,p3+5],list="Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec"
	if (str2num(day)<10)																														// Pad with 0
		day="0"+day
	endif
	n=WhichListItem(month,list)+1; month=num2str(n)																							// Find # of month
	if (n<10)
		month="0"+num2str(n)
	endif
	Open/P=ExportPath file as "temp.converti"
	fprintf file,"%s\t",S_Filename
	fprintf file,"%s\t",month+"/"+day+"/"+year
	fprintf file,"%s\t",S_type
	fprintf file,"%s\t",S_Filename1[strsearch(S_Filename1,"#",8)+1,strlen(S_Filename1)]
	fprintf file,"%s\t",S_dye
	fprintf file,"%s\t",S_electrolyte
	fprintf file,"%s\t",S_layer
	fprintf file,"%s\t",S_specification
	fprintf file,"%.3f\t",V_area
	fprintf file,"%s\t",S_userName
	fprintf file,"%.2f\t",100*IVparams[9]/IVparams[1]; fprintf file,"%.2f\t",100*IVparams[57]/IVparams[49]	
	fprintf file,"%.2f\t",IVparams[5]*-1e3; fprintf file,"%.2f\t",IVparams[53]*-1e3																	// Jsc
	fprintf file,"%.2f\t",IVparams[51]*1e3; fprintf file,"%.2f\t",IVparams[3]*1e3																		// Uoc
	fprintf file,"%.2f\t",IVparams[58]; fprintf file,"%.2f\t",IVparams[10]																				// Ff
	fprintf file,"%.1f\t",V_IPCE700/V_area; fprintf file,"%.1f\t",V_IPCE550/V_area
	fprintf file,"%.2f\t",V_current_Total*1e3; fprintf file,"%.2f\t",cw[2]	
	Close file
End

Function LoadIPCEData()
	SVAR S_Filename1,option5,option8
	LoadWave/O/T/P=IPCEDataPath S_Filename1
	DoWindow/F IPCEPlot
	if (!V_Flag)
		Execute "IPCEPlot()"
	endif
	option5="Layout IPCE"; option8="Append IPCE Data"; BuildMenu "Macros"
End

Window IVDataLists() : Panel
	PathInfo DataPath
	DoWindow/F IVDataLists
	if (!V_Flag)
		NewPanel/K=2/W=(16,40,456,888) as "IV File List"
		AutoPositionWindow/E/M=0/R=ConfigPanel
		ModifyPanel cbRGB=(54611,54611,54611)
		Button SetPath,pos={8,2},size={46,20},proc=GetPath,fsize=10,title="Set Path"
		TitleBox Path,pos={64,2},size={320,20},frame=5,variable=S_Path
		PopupMenu fileType,pos={336,2},size={76,20},proc=fileType,title="File Type:",mode=1,value=#"\".sIV;.tIV;.pPT\""
		ListBox lb0,pos={8,24},size={424,800},proc=IVSetFile,frame=2,listWave=IVDirectory,selWave=sjack,colorWave=myColors,mode=4,editStyle=1,row=V_modeFile,widths={24,16,8,16}
	endif
	GetFileList()
EndMacro

Function FileType(ctrlName,varNum,varStr) : PopupMenuControl
	String ctrlName,varStr; Variable varNum
	SVAR S_ExptType
	S_ExptType=varStr
	GetFileList()
End

Function GetPath(ctrlName) : ButtonControl
	string ctrlName
	SVAR S_ExptType
	NewPath/O/M="Input Data folder for "+S_ExptType+" files" DataPath
	if (V_Flag!=0)																															// User hit cancel
		return 0
	endif
	PathInfo DataPath
	if (V_Flag==0)
		Abort "Selected Path does not exist"
		return 0
	endif
End

Function GetFileList()
	WAVE/T IVDirectory
	WAVE seqData,sjack
	SVAR S_exptType
	Variable file,n,nfiles; String fileName,fileList=IndexedFile(DataPath,-1,S_ExptType),wname="bwave0"
	nfiles=ItemsinList(fileList,";")
	if (nfiles==0)
		DoAlert 0,"No Data of this file Type: "+S_exptType
		return 0
	endif
	Make/O/N=8/W $wname
	WAVE w=$wname
	Redimension/N=(nfiles,-1) IVDirectory; Redimension/N=(nfiles,-1,3) sjack
	IVDirectory=StringfromList(p,fileList,";")
	do
		fileName=StringfromList(n,fileList); IVDirectory[n][0]=fileName
		Open/P=DataPath/R file as fileName
		FStatus file; Redimension/N=(V_logEOF) w; FBinRead/F=1 file,w
		seqData={88,32,83,95,99,101}; FindSequence/S=(V_logEOF-512)/I=seqData w																// Search for Cellname
		IVDirectory[n][1]=SelectString((V_Value>-1),"",w2text(w,V_Value+13));
		seqData={88,32,83,95,100,121}; FindSequence/S=(V_Value)/I=seqData w																	// Search for Dye
		IVDirectory[n][2]=SelectString((V_Value>-1),"",w2text(w,V_Value+8))
		seqData={88,32,83,95,101,108}; FindSequence/S=(V_Value)/I=seqData w																	// Search for Electrolyte
		IVDirectory[n][3]=SelectString((V_Value>-1),"",w2text(w,V_Value+16))
		Close file
		n+=1
	while (n<nfiles)
	Variable i,ncols=DimSize(IVDirectory,1)
	for (i=0; i<ncols; i+=1)
		SetDimLabel 1,i,$StringFromList(i,"Filename;  Cellname;  Dye;  Electrolyte"),IVDirectory
	endfor
	SetDimLabel 2,1,foreColors,sjack; SetDimLabel 2,2,backColors,sjack																				// Colour determined by DimLabel
	sjack[][][1]=3; sjack[][][2]=1																												// Set colours from ColourWave
	KillWaves w
end
	
Function IVSetFile(ctrlName,row,col,event)
	String ctrlName; 	Variable row,col,event
	WAVE/T w=IVDirectory
	WAVE sjack
	NVAR V_modeFile,V_seltFile,V_max
	SVAR gXDataName=root:Packages:WMmpFitting:gXDataName,gYDataName=root:Packages:WMmpFitting:gYDataName
	SVAR gFitDataName=root:Packages:WMmpFitting:gFitDataName,gResidsName=root:Packages:WMmpFitting:gResidsName
	SVAR allspectra,S_ExptType,S_Filename1
	variable a,i,n,nfiles,flg; String str
	S_Filename1=""; allspectra=""
	switch (event)
	case 2:																																	// Mouseup
		V_modeFile=row
		if (V_seltFile)
			for (i=0; i<DimSize(w,0); i+=1)
				if (sjack[i][0][0]>0)
					allspectra+=w[i][0]+";"																									// Get a list of selected spectra
				endif
			endfor
			allspectra=allspectra[0,strlen(allspectra)-2]																							// strip off the ';'
		else
			S_Filename1=SelectString(strlen(w[row][0][0])>0,"",w[row][i]+",")
			S_Filename1=S_Filename1[0,strlen(S_Filename1)-2]; allspectra=S_Filename1
		endif
		nfiles=ItemsinList(allspectra)
		do
			strswitch (S_ExptType)
			case ".sIV":
				if (n==0)
					LoadIVData()
				else
					AppendIVData()
				endif
				break
			case ".pPT":
				LoadPPTData()
				break
			endswitch
			n+=1
		while (n<nfiles)
		break
	case 4:																																	// Cell Selection
		V_seltFile=0
		break
	case 5:																																	// Shift + Mouse
		V_seltFile=1
		break
	endswitch
end

Proc DataPaths()
	PathInfo home
	String s=StringFromList(0,S_Path,":")+":Users"
	NewPath/O/Q DataPath,s+":Shared:Cell's folder:"
	NewPath/O/Q PDFpath,s+":Shared:IV PDF files:"
//	NewPath/O/Q ExportPath,s+":FileMaker Pro:"
	NewPath/O/Q MoleculePath S_Path+"Molecules:"
	print "Packages",SpecialDirPath("Packages",0,0,0)
	print "Documents",SpecialDirPath("Documents",0,0,0)
	print "Preferences",SpecialDirPath("Preferences",0,0,0)
	print "Temporary",SpecialDirPath("Temporary",0,0,0)
	print "Igor Application",SpecialDirPath("Igor Application",0,0,0)
	print "Igor Preferences",SpecialDirPath("Igor Preferences",0,0,0)
	print "Igor Pro User Files",SpecialDirPath("Igor Pro User Files",0,0,0)
EndMacro

	String s=StringFromList(0,S_Path,":")+":"+StringFromList(1,S_Path,":")+":"+StringFromList(2,S_Path,":")+":"+StringFromList(3,S_Path,":")

Function SaveSpexInits()																														// Store System calibrations
	WAVE refdiodes,offset,offsetOrange
	SVAR S_Filename1
	S_Filename1="SunTest"
	Save/T/O/P=DataPath refdiodes,offset,offsetOrange as S_Filename1
End

Function LoadSpexInits()
	SVAR S_Filename1
	S_Filename1="SunTest"
	LoadWave/Q/O/T/P=DataPath S_Filename1
End

Function/S w2text(w,p0)
	wave w; variable p0
	Variable n; String str=""
	do
		if (w[p0+n]==13)
			break
		endif
		str+=num2char(w[p0+n])
		n+=1
	while(1)
	return str[1,strlen(str)-2]
End

/////////////////////////////////////////////////// DATA I/O ////////////////////////////////////////////////////

Function SetUpSystem()
	WAVE PSUSettings
	NVAR V_BufferGain,V_endVolt,V_supos,V_defaultVoc,V_navg,V_pulsedMode,V_refNum,V_delay,V_run,V_scanDir,V_dutyCycle,V_loadFlag,V_voltFlag
	SVAR S_system,option1,option2
	PathInfo home
	S_system=StringFromList(0,S_Path,":")
	if (!CmpStr(S_system,"Solar Lab"))
	endif
	if (!str2num(StringbyKey("IGORVERS",IgorInfo(0)))>=5.05)
		Abort "Igor Pro version 6.0 or better is required. You have Igor Pro "+StringbyKey("IGORVERS",IgorInfo(0))
	endif
	TitleBox msg,win=configPanel,title="\F'Chicago'\Z12Initialising Keithley 2400"; ControlUpdate/W=configPanel msg
	SetupGPIBKeithley()
//	TitleBox msg,win=configPanel,title="\F'Chicago'\Z12Initialising Arduino"; ControlUpdate/W=configPanel msg
//	SetupArduino()
	Init()
	ClearGraphs(WinList("*",";","win:3"))	
	V_endVolt=0; V_supos=-1; V_loadFlag=0; V_defaultVoc=1.1; V_navg=8; V_refNum=9; V_delay=0; V_pulsedMode=0; V_run=1; V_scanDir=1; V_scanDir=1; V_dutyCycle=50; V_voltFlag=0
	Popupmenu user win=configpanel,mode=1; User("user",1,"Visitor")																				// Set Default user
	Popupmenu filter0 win=configpanel,mode=1; LampControl("Filter",PSUSettings(10),4)
	PopupMenu cell0,win=configpanel,mode=2; // SelectCell("Cell",2,"Test Cell")	
	CellNumber("ncell",1,"1") 
	IVSpectrum()
	option1="NIDAQ ..."; option2="Cell Diagnostics"; BuildMenu "Macros"
End

Function TranslationStage(ctrlName,varNum,varStr) : PopupMenuControl																				// 3 Positions; 1, 2 & 3
	String ctrlName,varStr; Variable varNum																										//
	NVAR NIDAQ_board1
	NVAR V_d1,V_d2,V_Position
	variable delta																																// Optimise distances V_d1,V_d2
	delta=V_d1*((V_Position>0)-(varNum>0))+V_d2*((varNum>1)-(V_Position>1))
//	print V_d1,V_d2,varNum,V_position,delta
	if (delta==0)
		return 0
	endif
	ArduinoDrive(160,delta)																													// -ve Moves away from motor
	V_Position=varNum; PopupMenu cell0,win=ConfigPanel,mode=varNum
End

Function TestMotor(n)
	Variable n
	Variable i,delta=200
	for(i=1;i<n+1;i+=1)
		ArduinoDrive(160,delta)
	endfor
End

Function SetupArduino()
	STRUCT ArduinoSeqSettings ards
	ARDSetSeqSettings(ards)
	SVAR S_bootver,S_mainver,S_response
	Variable i,n,num; string port,S_value
	VDTGetPortList2
	port=StringfromList(0,ListMatch(S_VDT,"usbmodem*"))
	if (strlen(port)>0)
								// print "Found Port#0",port
	else
		print S_VDT
		abort "No Arduino USB board found"
	endif
	ards.gWhichComStr1=port
	print "USB2 Arduino:",ards.gWhichComStr1
	VDT2/P=$ards.gWhichComStr1 baud=115200,stopbits=1,databits=8,parity=0,in=0,out=0															//baud=115200 JT20140815
	VDTOperationsPort2 $ards.gWhichComStr1
End

Function ArduinoReadAnalog(pin)
	Variable pin
	STRUCT ArduinoSeqSettings ards
	ARDSetSeqSettings(ards)
	SVAR S_response
	Variable Attempts,cmd=7,success
	String ArduinoStr= "Waiting ... ",outStr= ""
	sprintf outStr,"%d,%d;",cmd,pin
	VDTOperationsPort2 $ards.gWhichComStr1
	do	
		VDT2 killIO
		VDTWrite2/O=0.1 outStr
		VDTRead2/N=255/O=0.1/Q/T="\r"ArduinoStr
		ards.gVDT2Message=ArduinoStr
		if (stringmatch(ArduinoStr,"*1,Analog Read cmd received*")==1)
			sprintf ards.gMessageStr,"Analog read after %g attempts",attempts
			attempts=20
			success=1
		else
			attempts+=1
		endif
	while (attempts<20)		
	if (success!=1)
		sprintf ards.gMessageStr,"Failed to send Analog Read after %g attempts",Attempts
		return -1
	endif
	VDTRead2/N=255/O=0.1/Q/T="\r" S_Response; print S_Response[1,strlen(S_response)-1]
	VDTRead2/N=255/O=0.1/Q/T="\r" S_Response
	return 1
end

Function ArduinoReadWaveAnalog(pin)
	Variable pin
	STRUCT ArduinoSeqSettings ards
	ARDSetSeqSettings(ards)
	WAVE Bufferwave,wave2,wave3
	SVAR S_response
	Variable a,attempts,i,npnts=512,cmd=16,success
	String ArduinoStr="Waiting ... ",outStr="",value
	Redimension/I/U/N=(npnts) Bufferwave,wave2,wave3
	sprintf outStr,"%d,%d,%d;",cmd,pin,npnts
	VDTOperationsPort2 $ards.gWhichComStr1
	do	
		VDT2 killIO
		VDTWrite2/O=0.1 outStr
		VDTRead2/N=255/O=0.1/Q/T="\r"ArduinoStr
		ards.gVDT2Message=ArduinoStr
		if (stringmatch(ArduinoStr,"*16,Analog cmd received*")==1)
			sprintf ards.gMessageStr,"Analog Wave after %g attempts",attempts
			attempts=20
			success=1
		else
			attempts+=1
		endif
	while (attempts<20)		
	if (success!=1)
		sprintf ards.gMessageStr,"Analog cmd failed after %g attempts",Attempts
		return -1
	endif
	VDTRead2/N=255/O=0.1/Q/T="\r" S_Response
	VDTReadWave2/N=(npnts)/T="," wave2,wave3
	VDTRead2/N=255/O=0.1/Q/T="\r" S_Response																								// Check for Function finished
	Interpolate2/T=1/N=(npnts)/Y=Bufferwave wave2,wave3
	a=(wave2[npnts-1]-wave2[0])/(npnts-1)*1e-6
	SetScale/P x 0,a,"s",Bufferwave
	return 1
end

Function ArduinoDigital(pin,value)
	Variable pin,value
	STRUCT ArduinoSeqSettings ards
	ARDSetSeqSettings(ards)
	SVAR S_response
	Variable Attempts,cmd=6,success=0
	String ArduinoStr= "Waiting ... ",outStr= ""
	sprintf outStr,"%d,%d,%d;",cmd,pin,value
	VDTOperationsPort2 $ards.gWhichComStr1
	do	
		VDT2 killIO
		VDTWrite2/O=0.1 outStr
		VDTRead2/N=255/O=0.1/Q/T="\r"ArduinoStr
		ards.gVDT2Message=ArduinoStr
		if (stringmatch(ArduinoStr,"*1,Digital cmd received*")==1)
			sprintf ards.gMessageStr,"Digital out sent after %g attempts",attempts
			attempts=20
			success=1
		else
			attempts+=1
		endif
	while (attempts<20)		
	if (success!=1)
		sprintf ards.gMessageStr,"Failed to send Digital out after %g attempts",Attempts
		return -1
	endif
	VDTRead2/N=255/O=0.1/Q/T="\r" S_Response,S_Response
	VDTRead2/N=255/O=0.1/Q/T="\r" S_Response																								//; print S_Response[1,strlen(S_response)-1]
	VDTRead2/N=255/O=0.1/Q/T="\r" S_Response																								// Check for Function finished
	return 1
end

Function ArduinoOutAnalog(pin,value)																											// Only DAC0 & DAC1, Value: 0->4095, 
	Variable pin,value
	STRUCT ArduinoSeqSettings ards
	ARDSetSeqSettings(ards)
	SVAR S_response
	Variable Attempts,cmd=5,success=0
	String ArduinoStr= "Waiting ... ",outStr= ""
	sprintf outStr,"%d,%d,%d;",cmd,pin,value
	VDTOperationsPort2 $ards.gWhichComStr1
	do	
		VDT2 killIO
		VDTWrite2/O=0.1 outStr
		VDTRead2/N=255/O=0.1/Q/T="\r"ArduinoStr
		ards.gVDT2Message=ArduinoStr
		if (stringmatch(ArduinoStr,"*1,Analog cmd received*")==1)
			sprintf ards.gMessageStr,"Analog out sent after %g attempts",attempts
			attempts=20
			success=1
		else
			attempts+=1
		endif
	while (attempts<20)		
	if (success!=1)
		sprintf ards.gMessageStr,"Failed to send Analog out after %g attempts",Attempts
		return -1
	endif
	VDTRead2/N=255/O=0.1/Q/T="\r" S_Response,S_Response
	VDTRead2/N=255/O=0.1/Q/T="\r" S_Response 																								//; print S_response
	VDTRead2/N=255/O=0.1/Q/T="\r" S_Response
	return 1
end

Function ArduinoDrive(speed,steps)																												// Optimum Speed:160 @ 8V
	Variable speed,steps
	STRUCT ArduinoSeqSettings ards
	ARDSetSeqSettings(ards)
	SVAR S_response
	Variable Attempts,cmd=15,success=0
	String ArduinoStr= "Waiting ... ",outStr= ""
	sprintf outStr,"%d,%d,%d;",cmd,steps,speed
	VDTOperationsPort2 $ards.gWhichComStr1
	do	
		VDT2 killIO
		VDTWrite2/O=0.1 outStr
		VDTRead2/N=255/O=0.1/Q/T="\r"ArduinoStr
		ards.gVDT2Message=ArduinoStr
		if (stringmatch(ArduinoStr,"*15,Motor Started*")==1)
			sprintf ards.gMessageStr,"Motor signal sent after %g attempts",attempts
			attempts=20
			success=1
		else
			attempts+=1
		endif
	while (attempts<20)		
	if (success!=1)
		sprintf ards.gMessageStr,"Failed to send Motor signal after %g attempts",Attempts
		return -1
	endif
	VDTRead2/N=255/O=0.1/Q/T="\r" S_Response,S_Response
	VDTRead2/N=255/O=0.1/Q/T="\r" S_Response
	Sleep/S 5+1*60*abs(steps)/48/speed
	VDTRead2/N=255/O=0.1/Q/T="\r" S_Response																								// Check for Function finished
	return 1
end

Function ArduinoDrive1(speed,steps)																											// Optimum Speed:160 @ 8V
	Variable speed,steps
	STRUCT ArduinoSeqSettings ards
	ARDSetSeqSettings(ards)
	SVAR S_response
	Variable Attempts,cmd=18,success=0
	String ArduinoStr= "Waiting ... ",outStr= ""
	sprintf outStr,"%d,%d,%d;",cmd,steps,speed
	VDTOperationsPort2 $ards.gWhichComStr1
	do	
		VDT2 killIO
		VDTWrite2/O=0.1 outStr
		VDTRead2/N=255/O=0.1/Q/T="\r"ArduinoStr
		ards.gVDT2Message=ArduinoStr
		if (stringmatch(ArduinoStr,"*18,Motor Started*")==1)
			sprintf ards.gMessageStr,"Motor signal sent after %g attempts",attempts
			attempts=20
			success=1
		else
			attempts+=1
		endif
	while (attempts<20)		
	if (success!=1)
		sprintf ards.gMessageStr,"Failed to send Motor signal after %g attempts",Attempts
		return -1
	endif
	VDTRead2/N=255/O=0.1/Q/T="\r" S_Response,S_Response
	VDTRead2/N=255/O=0.1/Q/T="\r" S_Response; print S_Response
	Sleep/S 5+1*60*abs(steps)/48/speed
	VDTRead2/N=255/O=0.1/Q/T="\r" S_Response; print S_Response																				// Check for Function finished
	return 1
end

Function Init()
	SetIgorMenuMode "File", "Save Experiment",disableItem
	SetIgorMenuMode "File", "Save Experiment As",disableItem
	SetIgorMenuMode "File", "Save Experiment Copy",disableItem
	SetIgorMenuMode "File", "Revert Experiment",disableItem
	SetIgorMenuMode "Edit", "",disableItem
	SetIgorMenuMode "Data", "",disableAllItems
	SetIgorMenuMode "Analysis", "",disableItem
	SetIgorMenuMode "Windows", "Procedure Windows",disableItem
	SetIgorMenuMode "Windows", "Panel Macros",disableItem
	SetIgorMenuMode "Misc", "",disableItem
	SetIgorMenuMode "Table", "",disableItem
	SetIgorMenuMode "Procedure", "",disableItem
	SetIgorMenuMode "Panel", "",disableItem
End

Function Antidote()
	PauseUpdate; Silent 1
	SetIgorMenuMode "File", "",enableItem
	SetIgorMenuMode "File", "Save Experiment",enableItem
	SetIgorMenuMode "File", "Save Experiment As",enableItem
	SetIgorMenuMode "File", "Save Experiment Copy",enableItem
	SetIgorMenuMode "File", "Revert Experiment",enableItem
	SetIgorMenuMode "Edit", "",enableItem
	SetIgorMenuMode "Data", "",enableAllItems
	SetIgorMenuMode "Analysis", "",enableItem
	SetIgorMenuMode "Windows", "Procedure Windows",enableItem
	SetIgorMenuMode "Windows", "Layout Macros",enableItem
	SetIgorMenuMode "Windows", "Panel Macros",enableItem
	SetIgorMenuMode "Misc", "",enableItem
	SetIgorMenuMode "Table", "",enableItem
	SetIgorMenuMode "Procedure", "",enableItem
	SetIgorMenuMode "Panel", "",enableItem
End

Function SetupGPIBKeithley()
	NVAR gpib_bus,sourcemeter,boardindex
	Variable V_Flag
	NI4882 ibfind={"gpib0"}; gpib_bus=V_flag; boardindex=7&V_Flag
	GPIB2 board=gpib_bus
	NI4882 ibsic={gpib_bus}
	NI4882 ibln={gpib_bus,24,0}																												// Address 24
	if (V_flag==0)
		abort " No Keithley SourceMeter at this address. Check power and cables"
	endif
	NI4882 ibdev={boardindex,24,0,12,1,0}; sourceMeter=V_Flag
	GPIB2 device=SourceMeter
	GPIB2 InterfaceClear
	Command("*RST;*CLS")
	print "USB1 GPIB:",sourceMeter; Sleep/S 1
	NI4882 ibtmo={sourcemeter,12}																											// 12:- 3s timeout
	Command("*ESE 255;*SRE 48")																											// SRQ & MAV registers
	Command(":SENS:FUNC:CONC OFF")																											// Turn off concurrent functions
	Command(":SENS:FUNC 'CURR:DC'")																											// Current is sense function
	Command(":SENS:CURR:PROT 0.0001")																										// 100uA current compliance
//	Command(":SOUR:FUNC:MODE VOLT")																										// Set by default on Power On
	Command(":SOUR:VOLT:MODE FIX")																											// Fixed operation mode
	Command(":FORM:ELEM VOLT,CURR")																										// Data output format
	Command(":FORM:BORD SWAP")																											// Intel Byte Order
	Command(":FORM:DATA REAL,32")																											// Binary output format: IEEE 32 bit
	Command(":SOUR:CLE:AUTO OFF")																											// Auto Output ON/OFF
	Command(":SOUR:DEL 0.04")																												// 40 ms source delay
	Command(":SOUR2:TTL:LEV 0")																											// Set Auxillary TTL output
	Command(":SYST:BEEP:STAT OFF")																											// Turn OFF beeper
End

Function Command(cmd)
	string cmd
	GPIBWrite2 cmd
	SRQSourceMeter(1)
End

Function SRQSourceMeter(flg)
	Variable flg
	NVAR sourcemeter
	SVAR S_response
	Variable a,err,status,mask,V_Flag
	do
		NI4882 ibrsp={sourcemeter}; status=V_Flag
		if ((status%&32)==32)
		do
			GPIBWrite2 "*ESR?"; GPIBRead2 err																									// GPIBRead2/Q/T="\n" err
			if ((err%&1)==1)
				print "End of Data Acquisition"
			endif
			if ((err%&4)==4)
				print "Query Error"
			endif
			if ((err%&8)==8)
				print "Device Error"
			endif
			if ((err%&16)==16)
				print "Execution Error"
			endif
			if ((err%&32)==32)
				print "Command Error"
			endif
			if ((err%&128)==128)
				GPIBWrite2 "*IDN?"; GPIBRead2 S_response; print S_response
			endif
		while (err!=0)
		endif
		if ((status%&16)==16)
			GPIBRead2 S_response; print strlen(S_response),S_response
		endif
		if ((status%&4)==4)																													// Read the
			GPIBWrite2 ":SYST:ERR?"
			GPIBRead2/Q/T="\n" S_response; print "Error number: ",S_response
		endif
	while ((flg!=1)|(status>8))
End

Function ReadResponse(maxChars)
	variable maxChars
	SVAR S_response
	GPIBReadBinary2/Q/S=(maxChars)/T="•" S_response
	print strlen(S_response),S_response
End

Function ReadData(flg)																														// 0:- Voltage value, 1:- Current value
	variable flg
	NVAR sourcemeter
	variable a,b,v0,v1,n
	GPIBWrite2 ":READ?"																														// also consider GPIBWrite2 ":READ?"
	do
		NI4882 ibrsp={sourcemeter}
		sleep/S 0.1
		if (V_flag>63)																														// ((status%&64)==64)
			break
		endif
		n+=1
	while (1)
	GPIBReadBinary2/TYPE=8 a,b; GPIBReadBinary2/TYPE=2 v0,v1; GPIBReadBinary2/TYPE=8 a
	return (flg)?v1 :v0
End

Function ReadDataT()																															// Current & Time values
	WAVE Datawave
	NVAR sourcemeter
	variable a,b,v0,v1,n
	GPIBWrite2 ":READ?"																														// also consider GPIBWrite2 ":READ?"
	do
		NI4882 ibrsp={sourcemeter}
		sleep/S 0.1
		if (V_flag>63)																														// ((status%&64)==64)
			break
		endif
		n+=1
	while (1)
	GPIBReadBinary2/TYPE=8 a,b; GPIBReadBinary2/TYPE=2 v0,v1; GPIBReadBinary2/TYPE=8 a
	DataWave={v0,v1}
End

Function ReadDataWave(cellarea,sense,source,bias)
	variable cellarea,bias; string sense,source
	WAVE Datawave,transient0,transient4,transient5
	NVAR V_numCell,V_numpnts,sourcemeter
	Variable a,b,n; String str
	Redimension/N=(2*V_numpnts) Datawave; Redimension/N=(V_numpnts) transient0,transient4,transient5; transient0=0
	Command(":STAT:MEAS:ENAB 512")																										// Set SRQ
	Command("*SRE 1")
	Command(":FORM:ELEM "+sense+",TIME")																									// Output format
	Command(":SENS:FUNC '"+sense+":DC'")																									// Define sense function
	Command(":SOUR:FUNC:MODE "+source)
	Command(":SOUR:"+source+":MODE FIX;:SOUR:DEL 0.01")																						// Fixed operation mode
	a=min(1,ceil(32*cellarea)/1e3)																												// Check for max Compliance
	if (!CmpStr(sense,"CURR"))
		Command(":SOUR:VOLT:LEV:IMM:AMPL "+num2str(bias))	
		Command(":SENS:CURR:PROT "+num2str(a))																								// Set current compliance
//		Command(":SENS:CURR:RANGE:UPP 10e-3")
	else
		Command(":SOUR:CURR:LEV:IMM:AMPL "+num2str(bias))	
		Command(":SENS:VOLT:PROT "+num2str(V_numCell*1))																					// Set voltage compliance
		Command(":SENS:VOLT:RANGE:UPP 1")
	endif
	Command(":SENS:"+sense+":NPLC 0.28")
	Command(":TRAC:CLE")
	Command(":TRAC:POIN "+num2str(V_numpnts)+";:TRIG:COUN "+num2str(V_numpnts))
	Command(":TRAC:FEED:CONT NEXT")
	Command(":DISP:ENAB OFF")
	Command(":OUTP:STAT ON")																												// Switch Output ON
	Sleep/S 5
	Command(":INIT")																															// Start measurements
	do
		NI4882 ibrsp={sourcemeter}
		if (V_flag>32)																														// ((status%&32)==32)
			break
		endif
		n+=1
	while (1)
	GPIBWrite2 ":TRAC:DATA?"																													// also consider GPIBWrite2 ":READ?"
	GPIBReadBinary2/TYPE=8 a,b; GPIBReadBinaryWave2/TYPE=2 Datawave; GPIBReadBinary2/TYPE=8 a													// IEEE Single precision Floating point
	FlushKeithley()
	Command(":DISP:ENAB ON")
	transient4=Datawave[2*p]; transient5=Datawave[2*p+1]
	Variable p1=transient5[0],p2=transient5[V_numpnts-1]
	Interpolate2/T=1/N=(V_numpnts)/Y=transient0 transient5,transient4
	SetScale/I x p1,p2,"s" transient0; WaveStats/Q transient0
	sprintf str"IT:%g;LP:%s" 0.5,"Xelamp"
	Note/K transient0,str
	return V_avg
End

////////////////////////////////////////////////////// GRAPHS ///////////////////////////////////////////////////////

Window IVGraph() : Graph
	PauseUpdate; Silent 1
	String str
	sprintf str,"Display/K=1/W=(4,276,720,512) %s as \"I-V characteristic\"",allwaves
	Execute str
	Graph_Style0()
	ModifyGraph/Z zero(left)=1,mirror(left)=2,lblMargin(right)=56,mirror(bottom)=2
	ModifyGraph/Z lstyle(PhotoCurrent0)=0,lstyle(PhotoCurrent1)=2,lstyle(PhotoCurrent2)=3,lstyle(PhotoCurrent3)=4,lstyle(PhotoCurrent4)=5,lstyle(PhotoCurrent5)=6,lstyle(PhotoCurrent6)=7
	ModifyGraph/Z lstyle(darkcurrent)=0,rgb(darkcurrent)=(0,65535,0)
	SetAxis/A/R left; SetAxis/A bottom
	Label left "\F'Times'\Z12\f01Current [\U]"
	Label bottom "\F'Times'\Z12\f01Potential [\U]"
	Legend/N=textL/J/F=0/A=MC/X=60/Y=0 Legendtext(allwaves,1)
	SetWindow kwTopWin,hook=UpdateDisplay
EndMacro

Function UpdateDisplay(infoStr)																													// Use to control parameters, dependencies etc.
	String infoStr
	if (StrSearch(infoStr,"EVENT:activate;",0) > 0 )
	endif
	if (StrSearch(infoStr,"EVENT:kill;",0) > 0 )
		DoWindow/K TransientCGraph; DoWindow/K GraphHysteresis; DoWindow/K GraphStability
		return 0
	endif
End

Window CellStability() : Graph																													// Currents now all +ve
	PauseUpdate; Silent 1
	Variable a,i; String s,s1="\Z12\f01\s",w
	sprintf s,"Display/W=(4,276,720,616) %s vs Input0 as \"Cell Stability with time\"",ReplaceString(";",allspectra,","); Execute s
	GraphOverlayStyle()
	ModifyGraph gbRGB=(61166,61166,61166)
	SetAxis/A/E=1 bottom; Label bottom "\F'Times'\Z12\f01Time [\U]"
EndMacro

Window BarGraph() : Graph
	PauseUpdate; Silent 1
	Variable flg,n,npt; String cmd,s0,s1="\Z12\s",title,w
	do
		w=StringfromList(n,allspectra); npt=str2num(w[5])-1
		flg=CmpStr(w,"")
		if (flg)
			sprintf s0,"%s%s,",s0,w
			sprintf s1,"%s(%s) %s\r\s",s1,w,StringByKey("TITLE",TableInfo("Table1",npt+2))
			sprintf title,"%s%s, ",title,StringByKey("TITLE",TableInfo("Table1",npt+2))
		endif
		n+=1
	while (n<ItemsinList(allspectra))
	sprintf cmd,"Display/K=1/W=(4,276,720,616) %s vs InputText as \"BarGraph of %s\"",s0[0,strlen(s0)-2],InputText[0]; Execute cmd
	ModifyGraph gbRGB=(61166,61166,61166)
	ModifyGraph/Z rgb(Input1)=(56000,0,8000),rgb(Input2)=(48000,0,16000),rgb(Input3)=(40000,0,24000),rgb(Input4)=(32000,0,32000),rgb(Input5)=(24000,0,40000),rgb(Input6)=(16000,0,48000),rgb(Input7)=(8000,0,56000)
	ModifyGraph hbFill=2,mirror=2,grid(left)=2,gridstyle(left)=1,fSize(left)=12,tkLblRot(bottom)=90
	SetAxis/A/E=1/N=1 left
	Label left "\F'Times'\Z12\f01"+S_yaxislabel; Label bottom "\F'Times'\Z12\f01"+S_xaxislabel
	Legend/N=text0/J/B=1/F=0/A=LC/X=1/Y=-42 s1[0,strlen(s1)-4]
EndMacro

Function/S Legendtext(allwaves,m)																												// also Updates Ref diode values
	string allwaves; variable m
	WAVE IVparams
	NVAR V_supos
	Variable n,m1,flag; String str,s0,s1,s2,list="\Z09;\Z09;\Z09;\Z10Voltage decay:\r;\Z10Capacitance:\r;\Z10Transistor:\r;\Z10Scan Rates:\r\s(PhotoCurrentHR_0) Backward\s(PhotoCurrentHF_0) Forward\r"
	s0=StringfromList(m-1,list); s1=SelectString(m==4,"","Transport lifetime II:\r"); s2=SelectString(m==4,"","Transport lifetime:\r")
	do
		str=StringFromList(n,allwaves,",")																										// Array counter
		flag=CmpStr(str,"")
		if (flag)
			switch (m)
			case 1:
				if (cmpstr("DarkCurrent",str)==0)
					sprintf s0,"%s\s(%s) DarkCurrent \r",s0,str
				else
					m1=12*str2num(str[strlen(str)-1,strlen(str)])+1
					sprintf s0,"%s\s(%s) Current @%.3f Sun\r",s0,str,10*IVparams[m1][V_supos+1]
				endif
				break
			case 2:
				m1=12*str2num(str[strlen(str)-1,strlen(str)])+1
				sprintf s0,"%s\s(%s) %s\r",s0,str,str[0]+" "+str[1,strlen(str)]
				break
			case 3:																															// for Deffs
				sprintf s0,"%s\s(%s) %s\r",s0,str,str[0]+"\B"+str[1,3]+"\M\Z09"+str[4,strlen(str)]
				break
			case 4:																															// for Voltage & Current Decays
				switch (mod(n,3))
				case 0:
					sprintf s0,"%s\s(%s) %s\r",s0,PossiblyQuoteName(str),str[6,strlen(str)]
					break
				case 1:
					sprintf s1,"%s\s(%s) %s\r",s1,PossiblyQuoteName(str),str[6,strlen(str)]
					break
				case 2:
					sprintf s2,"%s\s(%s) %s\r",s2,PossiblyQuoteName(str),str[6,strlen(str)]
					break
				endswitch
				break
			case 5:																															// for Capacitance
				sprintf s0,"%s\s(%s) %s\r",s0,PossiblyQuoteName(str),str[6,strlen(str)]
				break
			case 6:																															// for Transistor
				m1=12*str2num(str[strlen(str)-1,strlen(str)])
				sprintf s0,"%s\s(%s) Current @%.1f Gate\r",s0,str,IVparams[m1][V_supos+1]
				break
			case 7:																															// for Hysterisis
				m1=12*str2num(str[strlen(str)-1,strlen(str)])+1				
				sprintf s0,"\s(%s) Backward Sweep\r\s(%s) Forward Sweep","PhotoCurrent0","PhotoCurrent1"
				break
			endswitch
		endif
		n+=1
	while (flag)
	s0=s0+s1+s2
	return s0[0,strlen(s0)-2]																													// Remove CR
End

Function TranslateDate(s)																														// Translate date
	string s
	String list="Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec;"
	variable p1=strsearch(s,"/",0)+1,p2=strsearch(s,", ",0),p3=strsearch(s,", ",p2+1)
	if (p1==-1)
		beep
		return 0
	endif
	string month=s[p2+2,p2+4],year=s[p3+2,p1-2]; variable day=str2num(s[p2+5,p3-1])
	return date2secs(str2num(year),WhichListItem(month,list)+1,day)																				// secs from 1/1/1904
End

Function/S WaveChoice(allwaves,type)
	String allwaves; variable type
	WAVE IVParams
	NVAR V_supos
	Variable n,m1,flg; String str,s0=""
	do
		str=StringFromList(n,allwaves,","); m1=12*str2num(str[strlen(str)-1,strlen(str)])+1															// Array counter
		flg=CmpStr(str,"")
		if (flg)
			if (numtype(m1))
				s0="DarkCurrent;"
			else
				sprintf s0,"%sCellCurrent @%.3f Sun;",s0,10*IVParams[m1][V_supos]																// Add attenuation value
				if (type)
					sprintf s0,"%sPhotoCurrent @%.3f Sun;",s0,10*IVParams[m1][V_supos]
				endif
			endif
		endif
		n+=1
	while (flg)
	return s0
End

Window TransientCGraph() : Graph
	PauseUpdate; Silent 1
	Display/K=1/W=(4,280,720,516) transient0,transient1,transient2,transient3,transient4,transient5,transient6 as "PhotoCurrent Dynamics"
	AppendtoGraph/T ywav
	Graph_Style0()
	ModifyGraph zero(left)=1,mirror(left)=2,tick(top)=3,grid(top)=0,noLabel(top)=2
	ModifyGraph/Z lstyle=3,lstyle(transient0)=0,lsize(transient0)=1,rgb=(0,0,65535),rgb(transient0)=(65535,0,0)
	ModifyGraph/Z lstyle(ywav)=2,rgb(ywav)=(0,0,0)
	SetAxis/A/E=0/R left; SetAxis/A bottom
	Label left "\F'Times'\Z12\f01Current [\U]"
	Label bottom "\F'Times'\Z12\f01Time [\U]"
EndMacro

Window TransientVGraph() : Graph
	PauseUpdate; Silent 1
	Display/K=1/W=(4,280,720,516) transient0 as "PhotoVoltage Dynamics"
	AppendtoGraph/T ywav
	Graph_Style0()
	ModifyGraph zero(left)=1,mirror(left)=2,tick(top)=3,grid(top)=0,noLabel(top)=2
	ModifyGraph/Z lstyle=0,lsize=1,rgb=(65535,0,0)
	ModifyGraph/Z lstyle(ywav)=2,rgb(ywav)=(0,0,0)
	SetAxis/A/E=0 left; SetAxis/A bottom
	Label left "\F'Times'\Z12\f01Voltage [\U]"
	Label bottom "\F'Times'\Z12\f01Time [\U]"
EndMacro

Window IPCEGraph() : Graph
	PauseUpdate; Silent 1
	Display/W=(4,284,720,520) ipce_t as "Transient IPCE"
	Append/R Photodiode
	Graph_Style0()
	ModifyGraph grid(right)=0,zero(left)=1,lblMargin(right)=56,rgb(Photodiode)=(0,0,65535)
	SetAxis/A/E=0/R left; SetAxis/A right; SetAxis/A
	Label left "\F'Times'\Z12\f01PhotoCurrent [\U]"
	Label right "\F'Times'\Z12\f01PhotoDiode [\U]"
	Label bottom "\F'Times'\Z12\f01Time [\U]"
	Legend/N=text0/J/F=0/A=MC/X=64/Y=-48 "\s(PhotoDiode) PhotoDiode\r\s(ipce_t) IPCE"
	SetWindow kwTopWin,hook=UpdateDisplay1
EndMacro

Function UpdateDisplay1(infoStr)																												// Use to control parameters, dependencies etc.
String infoStr
if (StrSearch(infoStr,"EVENT:kill;",0) > 0 )
	DoWindow/K IPCEPlot
	return 0
endif
End

Window PhotoResponse() : Graph
	PauseUpdate; Silent 1
	Display/K=1/W=(4,40,608,300) intensity as "Photo Response"
	Append/R=right photocurrent
	Graph_Style0()
	ModifyGraph grid(right)=0,rgb(photocurrent)=(0,0,65535)
	SetAxis/A/E=1 left; SetAxis/A/E=1 right
	Label left "\F'Times'\Z12\f01Thermopile [\U]"
	Label right "\F'Times'\Z12\f01Cellcurrent [\U]"
	Label bottom "\F'Times'\Z12\f01Wavelength [\U]"
	Legend/J/N=text0/F=0/A=MC/X=64/Y=-48 "\s(intensity) Thermopile\r\s(photocurrent) CellCurrent"
EndMacro

Window IPCEPlot() : Graph
	PauseUpdate; Silent 1
	Display/K=1/W=(4,300,608,482) ipce as "IPCE"
	Graph_Style0()
	ModifyGraph mirror=2
	SetAxis left,0,90
	Label left "\F'Times'\Z12\f01IPCE [\U]"
	Label bottom "\F'Times'\Z12\f01Wavelength [\U]"
EndMacro

Window Potentiostat() : Graph
	Display/W=(4,276,668,512) PhotoCurrent,PhotoCurrent1 as "Potentiostat"
	Graph_Style0()
	ModifyGraph/Z lsize[0]=2,rgb(PhotoCurrent1)=(0,65535,0)
	SetAxis/A/R left; SetAxis/A bottom
	Label left "\F'Times'\Z12\f01Current [\U]"
	Label bottom "\F'Times'\Z12\f01Potential [\U]"
	Legend/N=text0/J/F=0/A=MC/X=62/Y=-36 "\s(PhotoCurrent) Forward Sweep\r\s(PhotoCurrent1) Backward Sweep"
EndMacro

Window GraphTStability() : Graph
	PauseUpdate; Silent 1
	Display/W=(12,276,616,616) Input1,Input3
	Append/R Input0,Input2; Append/L=ref Input4
	Graph_Style0()
	ModifyGraph/Z axisEnab(left)={0,0.78},axisEnab(right)={0,0.78},axisEnab(ref)={0.8,1}
	ModifyGraph/Z grid(right)=0,zero(left)=1,lblMargin(right)=56,mirror(bottom)=2
	ModifyGraph/Z freePos(ref)=0,zero(ref)=1,lblPos(ref)=54,mirror(ref)=1
	ModifyGraph/Z rgb(Input1)=(0,0,65535),rgb(Input3)=(0,0,65535)
	ModifyGraph/Z lstyle(Input2)=2,lstyle(Input3)=3
	SetAxis/A/E=1/N=1/R left; SetAxis/A/E=1/N=1 right; SetAxis/A/E=1 bottom
	Label left "\F'Times'\Z12\f01Current [\U]"
	Label right "\F'Times'\Z12\f01Voltage [\U]"
	Label bottom "\F'Times'\Z12\f01Time [\U]"
	Label ref "\F'Times'\Z12\f01Thermopile [\U]"
	Legend/N=text0/J/F=0/A=LC/X=1/Y=-42 "\s(Input1) Isc\r\s(Input3) Ipmax\r\s(Input0) Uoc\r\s(Input2) Upmax"
EndMacro

Window GraphPPT() : Graph
	Display/K=1/W=(4,276,720,512) Input8; AppendToGraph/R Input3
	ModifyGraph rgb(Input8)=(65535,0,0),rgb(Input3)=(0,0,65535)
	ModifyGraph margin(left)=56,margin(right)=56,margin(bottom)=32,margin(top)=8
	ModifyGraph lsize=1.5,mirror(bottom)=1,grid(left)=2,grid(bottom)=2,gbRGB=(61166,61166,61166)
	SetAxis/A/N=2 right
	Label left "\Z14\F'Times New Roman'Efficiency \Z10(\U)"; Label right "\Z14\F'Times New Roman'Fill Factor (\U)"; Label bottom "\Z14\F'Times New Roman'Time (\U)"
	Legend/C/N=text0/J/F=0 "\s(Input8) Efficiency\r\s(Input3) Fill Factor"
	SetWindow kwTopWin,hook=UpdateDisplay
EndMacro

Window GraphIV() : Graph																														// Simple IV Graph for PPT routines
	Display/K=1/W=(4,284,720,520) Input6; AppendToGraph/R Input7
	ModifyGraph rgb(Input6)=(65535,0,0),rgb(Input7)=(0,0,65535)
	ModifyGraph margin(left)=56,margin(right)=56,margin(bottom)=32,margin(top)=8
	ModifyGraph lsize=1.5,mirror(bottom)=1,grid(left)=2,grid(bottom)=2,gbRGB=(61166,61166,61166)
	SetAxis/A/R right
	Label left "\Z14\F'Times New Roman'Voltage\Bpp\M(\U)"; Label right "\Z14\F'Times New Roman'Current\Bpp\M(\U)"; Label bottom "\Z14\F'Times New Roman'Time (\U)"
	Legend/C/N=text0/J/F=0 "\s(Input6) Voltage\r\s(Input7) Current"
EndMacro

Window GraphStability() : Graph
	Display/K=1/W=(4,280,668,848) Input5,Input8 as "Perovskite Diagnostics"																		// Power Out
	AppendToGraph/L=imax Input4,Input7																										// Ipmax
	AppendToGraph/L=vmax Input3,Input6																										// Vpmax
	AppendToGraph/L=voc Input9,Input10																										// Voc
	AppendToGraph/L=jsc Input1,Input2																										// Jsc
	AppendToGraph/L=pin Input0																												// Power In
	ModifyGraph rgb(Input1)=(0,0,65535),rgb(Input2)=(0,0,65535),rgb(Input3)=(65535,32764,16385),rgb(Input4)=(0,65535,0),rgb(Input6)=(65535,32764,16385),rgb(Input7)=(0,65535,0),rgb(Input9)=(65535,32764,16385),rgb(Input10)=(65535,32764,16385)
	ModifyGraph lstyle(Input2)=2,lstyle(Input6)=2,lstyle(Input7)=2,lstyle(Input8)=2,lstyle(Input10)=2
	ModifyGraph axisEnab(left)={0,0.18},axisEnab(imax)={0.18,0.36},axisEnab(vmax)={0.36,0.54},axisEnab(voc)={0.54,0.72},axisEnab(jsc)={0.72,0.9},axisEnab(pin)={0.9,1}
	ModifyGraph lsize=1.5,freePos=0,grid=2,mirror=2,lblPos=84
	SetAxis/A; SetAxis/A/R jsc; SetAxis/A/R imax
	Label left "Eff \Z10(\U)"; Label vmax "V\Bmax\M\Z10 (\U)"; Label imax "J\Bmax\M \Z10(\U)"
	Label pin "P\Bin\M \Z10(\U)"; Label jsc "J\Bsc\M \Z10(\U)"; ; Label voc "V\Boc\M \Z10(\U)"
	Label bottom "\Z14\F'Times New Roman'Time (\U)"
	Legend/C/N=text0/J/F=0/X=0/Y=0 "\s(Input5) Efficiency(1)\r\s(Input8) Efficiency(2)\r\s(Input4) Peak Power Current(1)\r\s(Input7) Peak Power Current(2)\r\s(Input3) Peak Power Voltage(1)\r\s(Input6) Peak Power Voltage(2)\r\s(Input9) Voc(1)\r\s(Input10) Voc(2)\r\s(Input1) Jsc(1)\r\\s(Input2) Jsc(2)\r\s(Input0) Input Power"
End

Window GraphHysteresis() : Graph
	Display/K=1/W=(4,280,668,512) PhotoCurrent0,PhotoCurrent1 as "Hysteresis"
	Graph_Style0()
	ModifyGraph mirror=2,rgb(PhotoCurrent0)=(65535,0,0),rgb(PhotoCurrent1)=(0,65535,0)
	SetAxis/A/R left
	Label bottom "\F'Times'\Z12Potential (\U)"; Label left "\F'Times'\Z12Current (\U)"
	Legend/N=textL/J/F=0/A=MC/X=60/Y=-32
End

Window Graph_Profile() : Graph
	PauseUpdate; Silent 1
	Display/W=(5,42,523,383) Current vs distance
	Append/R photoVoltage vs distance
	Graph_Style0()
	ModifyGraph/Z rgb(photoVoltage)=(0,0,65535)
	Label left "\Z12\f01CellCurrent [\U]"
	Label bottom "\Z12\f01Distance [\U]"
	Label right "\Z12\f01PhotoVoltage [\U]"
	Legend/J/N=text0/F=0/A=MC/X=34.48/Y=-35.77 "\s(current) Current\r\s(photoVoltage) Voltage"
EndMacro

Window PowerPlot() : Graph																													// Isc, Voc vs Radient Power
	PauseUpdate; Silent 1
	Display/K=1/W=(12,284,320,512) IscPower,Res_IscPower vs RadPower as "Radiant Power"
	AppendToGraph fit_IscPower
	Append/R VocPower vs RadPower
	Graph_Style0()
	ModifyGraph margin(bottom)=36,margin(right)=56,margin(top)=8,standoff=0
	ModifyGraph/Z grid(right)=0,mirror(bottom)=2,mode=3
	ModifyGraph/Z marker(IscPower)=19,marker(Res_IscPower)=14,mode(VocPower)=4,marker(VocPower)=18,mode(fit_IscPower)=0
	ModifyGraph/Z rgb(VocPower)=(0,0,65535),rgb(Res_IscPower)=(39321,1,1)
	SetAxis/A/R/E=1 left; SetAxis/A/N=1 right; SetAxis/A/N=0/E=1 bottom
	Label left "\Z12\f01Isc [\U]"
	Label bottom "\Z12\f01Radiant Power [\U]"
	Label right "\Z12\f01Voc [\U]"
	Legend/N=text0/J/F=0/A=MC/X=16/Y=-32 "\s(IscPower) Isc\r\s(Res_IscPower) Norm. Isc\r\s(VocPower) Voc"
EndMacro

Window LnPowerPlot() : Graph																													// Voc vs ln(Radient Power)
	PauseUpdate; Silent 1
	Display/K=1/W=(328,284,616,512) VocPower,fit_VocPower vs RadPower as "Log(Radiant Power)"
	AppendToGraph/L=Resid Res_VocPower vs RadPower
	Graph_Style0()
	ModifyGraph margin(bottom)=36,margin(right)=16,margin(top)=8
	ModifyGraph mirror=2,log(bottom)=1,mirror(Resid)=2,grid(Resid)=1,zero(Resid)=1,standoff=0
	ModifyGraph/Z mode=4,marker(VocPower)=18,mode(Res_VocPower)=3,marker(Res_VocPower)=18,rgb(VocPower)=(0,0,65535)
	ModifyGraph freePos(Resid)=0,nticks(resid)=2
	ModifyGraph axisEnab(left)={0,0.8},axisEnab(Resid)={0.8,1}
	SetAxis/A/N=1 left; SetAxis/A/N=1/E=1 bottom
	Label left "\Z12\f01Voc [\U]"
	Label Resid "\Z12\f01[\U]"
	Label bottom "\Z12\f01Radiant Power [\U]"
EndMacro

Window FfPlot() : Graph
	PauseUpdate; Silent 1
	Display/K=1/W=(12,284,320,512) Ff vs RadPower as "Fill Factor"
	Graph_Style0()
	ModifyGraph margin(bottom)=36,margin(right)=16,margin(top)=8
	ModifyGraph mode=4,marker=17,mirror=2,log(bottom)=1
	SetAxis left 0,1; SetAxis/A/N=1/E=1 bottom
	Label left "\Z12\f01Ff [\U]"; Label bottom "\Z12\f01Radiant Power [\U]"
EndMacro

Window ChargeGraph() : Graph
	PauseUpdate; Silent 1
	Display/W=(368,280,656,516) charge as "Charge Accumalation"
	Graph_Style0()
	ModifyGraph/Z mirror=2,margin(right)=16
	Label left "\F'Times'\Z12\f01Charge [\U]"
	Label bottom "\F'Times'\Z12\f01Potential [\U]"
EndMacro

Window ChronoAmpGraph() : Graph
	PauseUpdate; Silent 1
	Display/W=(4,280,612,516) PhotoCurrent as "Chrono Amperometry"
	AppendToGraph/R Voltage
	Graph_Style0()
	ModifyGraph/Z grid(right)=0,mirror(bottom)=2,margin(right)=56,rgb(PhotoCurrent)=(0,0,65535)
	SetAxis right 0,1.2
	Label left "\F'Times'\Z12\f01Current [\U]"
	Label right "\Z12\f01Potential [\U]"
	Label bottom "\F'Times'\Z12\f01Time [s]"
EndMacro

Window Graph0() : Graph
	Display/W=(711,360,1174,575) RefCurrent vs XeLightIntensities
	AppendToGraph fit_RefCurrent
	ModifyGraph rgb(fit_RefCurrent)=(4369,4369,4369)
	ModifyGraph mode(RefCurrent)=3,marker(RefCurrent)=19,grid=2,mirror=2
	SetAxis bottom 0,100
	Cursor/P A fit_RefCurrent 180
	ShowInfo
	TextBox/C/N=CF_RefCurrent/X=25.93/Y=1.95 "Coefficient values ± one standard deviation\r\ta\t=0.104 ± 0.0213\r\tb\t=0.46145 ± 0.000593"
EndMacro

Window Graph1() : Graph																														// For Diagnostic purposes
	PauseUpdate; Silent 1
	Display/W=(5,269,400,477) PhotoCurrent,Thermopile,PhotoDiode,Potential
	Graph_Style0()
	ModifyGraph/Z rgb[2]=(0,65535,0),rgb[3]=(65535,0,52428)
	ModifyGraph/Z mirror(left)=2,margin(right)=16
	SetAxis/A left; SetAxis/A bottom
	Legend/N=text0/J/F=0/A=MC/X=16/Y=-32 "\s(PhotoCurrent) CellCurrent\r\s(Thermopile) Thermopile\r\s(PhotoDiode) PhotoDiode\r\s(Potential) Potential"
EndMacro

Proc Graph_Style0() : GraphStyle
	PauseUpdate; Silent 1
	ModifyGraph margin(left)=54,margin(right)=108,margin(bottom)=32,margin(top)=4
	ModifyGraph/Z grid=2,lblPos=52,minor=1,lsize=0.5
	ModifyGraph/Z font="Times",fSize=12,sep=8
	ModifyGraph/Z rgb=(65535,0,0),gbRGB=(61166,61166,61166)
EndMacro

Proc Graph_Style1() : GraphStyle
	S_layoutname="Layout5()"
	ModifyGraph log(left)=1
	SetAxis/A left
EndMacro

Proc AcquireStyle1() : GraphStyle
	ModifyGraph margin(right)=108,lblmargin(right)=60
	ModifyGraph wbRGB=(49151,49151,65535)
	ControlInfo/W=ConfigPanel tab0																											// Now have data, so have to allow possibility of a layout
	if (V_Value==4)
		Button sp_layout,win=ConfigPanel,disable=0
	endif
EndMacro

Function DisplayAddons()
	NewPanel/EXT=0/HOST=IVGraph/N=Utilities/W=(-8,64,288,96) as "I-V Diagnostics"
	ModifyPanel cbRGB=(45535,45535,50535)
	SetDrawEnv fsize=14,fstyle=1,textrgb=(65535,65532,16385); DrawText 72,16,"Evaluated Parameters"
	ValDisplay param0,pos={4,20},size={280,16},title="Short Circuit Current:",font="Helvetica",fSize=12,format="%.2W0PA/cm2",frame=3,labelBack=(45535,45535,50535),limits={-5e-4,5e-5,0},barmisc={0,88},value=#"V_Jsc"
	ValDisplay param1,pos={4,36},size={280,16},title="Open Circuit Voltage:",font="Helvetica",fSize=12,format="%.2W0PV",frame=3,labelBack=(45535,45535,50535),limits={-5e-5,1,0},barmisc={0,88},value=#"V_Voc"
	ValDisplay param2,pos={24,52},size={260,16},title="Output Power     :",font="Helvetica",fSize=12,format="%.2W0PW",frame=3,labelBack=(45535,45535,50535),limits={0,8e-3,0},barmisc={0,88},value=#"V_pwr"
	ValDisplay param3,pos={36,68},size={248,16},title="Fill Factor       :",font="Helvetica",fSize=12,format="%2.2f  %",frame=1,labelBack=(45535,45535,50535),limits={0,100,0},barmisc={0,88},value=#"V_ff"
End

Function GraphStyle(ctrlName,popNum,popStr) : PopupMenuControl
	String ctrlName,popStr; Variable popNum
	switch (popNum)
		case 1:
			GraphOverlayStyle()
			break
		case 2:
			GraphStaggeredStyle()
			break
	endswitch
End

Function GraphStaggeredStyle() : GraphStyle
	WAVE/T Expt_parameters
	WAVE Input0
	SVAR allspectra
	String cmd,slabel,slegend="\Z10\s",wname,list="Isc;Voc;Power;Fill Factor"
	Variable n,nWaves=ItemsInList(allspectra)
	Variable offset=floor(100/nWaves)/100
	GetAxis/W=GraphTStability/Q left; SetAxis left,V_min,V_max
	Label left " ";// Legend/K/N=text0
	do
		slabel="left"+num2str(n)
		wname=PossiblyQuoteName(StringFromList(n,allspectra))
		WAVE w=TraceNameToWaveRef("",wname)
		RemovefromGraph $NameofWave(w)
		AppendToGraph/L=$slabel w vs Input0
		ModifyGraph/Z grid($slabel)=2,rgb($wname)=(65535*((n==0)|(n==3)),0,65535*((n==1)|(n==2))),lstyle($wname)=n
		ModifyGraph freePos($slabel)=0,axisEnab($slabel)={n*offset,(n+1)*offset},mirror($slabel)=1
		Label $slabel "\Z12\f01"+StringFromList(str2num(wname[5])-1,list)+" \U"																	// To remove default label junk
		SetAxis/A/N=1 $slabel
		sprintf slegend,"%s(%s) %s\r\s",slegend,wname,StringFromList(str2num(wname[5])-1,list)
		n+=1
	while (n<nWaves)
	ModifyGraph margin(left)=56,margin(right)=32
	ModifyGraph minor=1,font="Times",fSize=12,lblPos=48,mirror=1,nticks=4,mode=4,marker=19
	Legend/C/N=text0 slegend[0,strlen(slegend)-4]																								// Trim last CR/LF
End

Function GraphOverlayStyle() : GraphStyle
	SVAR allspectra
	String str,slegend="\Z10\s",wname
	Variable a,i
	do
		wname=PossiblyQuoteName(StringfromList(i,allspectra)); a=2^(str2num(wname[5])-1)
		WAVE w=TraceNameToWaveRef("",wname)
		RemovefromGraph $NameofWave(w)
		if (a==1)
			sprintf str,"Append/L=left %s vs Input0",wname; Execute str
			sprintf slegend,"%s(%s) %s\r\s",slegend,wname,"Isc"
			ModifyGraph/Z grid(left)=2,rgb(Input1)=(0,0,65535),marker=19
			SetAxis/A/N=1 left; 	Label left "\F'Times'\Z12\f01Current Density [\U]"
		endif
		if (a==2)
			sprintf str,"Append/R=right %s vs Input0",wname; Execute str
			sprintf slegend,"%s(%s) %s\r\s",slegend,wname,"Uoc"
			ModifyGraph/Z grid(right)=0,margin(right)=56,rgb(Input2)=(65535,0,0),lstyle(Input2)=2,marker(Input2)=18
			SetAxis/A/N=1 right; Label right "\F'Times'\Z12\f01Potential [\U]"
		endif
		if (a==4)
			sprintf str,"Append/R=right1 %s vs Input0",wname; Execute str
			sprintf slegend,"%s(%s) %s\r\s",slegend,wname,"Fill Factor"
			ModifyGraph/Z axisEnab(left)={0,0.75},axisEnab(right)={0,0.75},axisEnab(right1)={0.75,1},freePos(right1)=0
			ModifyGraph/Z grid(right1)=0,rgb(Input4)=(0,0,65535),lstyle(Input4)=4,marker(Input4)=17
			SetAxis/A/N=1 right1; Label right1 "\F'Times'\Z12\f01Fill Factor [\U]"
		endif
		if (a==8)
			sprintf str,"Append/L=left1 %s vs Input0",wname; Execute str
			sprintf slegend,"%s(%s) %s\r\s",slegend,wname,"Power"
			ModifyGraph/Z axisEnab(left)={0,0.75},axisEnab(right)={0,0.75},axisEnab(left1)={0.75,1},freePos(left1)=0
			ModifyGraph/Z zero(left1)=1,grid(left1)=2,rgb(Input3)=(0,0,65535),lstyle(Input3)=3,marker(Input3)=16
			Label left1 "\F'Times'\Z12\f01Power [\U]"
		endif
		if (a==16)
			sprintf str,"Append/L=left1 %s vs Input0",wname; Execute str
			sprintf slegend,"%s(%s) %s\r\s",slegend,wname,"Efficiency"
			ModifyGraph/Z axisEnab(left)={0,0.75},axisEnab(right)={0,0.75},axisEnab(left1)={0.75,1},freePos(left1)=0
			ModifyGraph/Z zero(left1)=1,grid(left1)=2,rgb(Input5)=(65535,0,0),lstyle(Input5)=5,marker(Input5)=16
			Label left1 "\F'Times'\Z12\f01Efficiency [\U]"
		endif
		if (a==32)
			sprintf str,"Append/R=right1 %s vs Input0",wname; Execute str
			sprintf slegend,"%s(%s) %s\r\s",slegend,wname,"Intensity"
			ModifyGraph/Z axisEnab(left)={0,0.75},axisEnab(right)={0,0.75},axisEnab(left1)={0.75,1},axisEnab(right1)={0.75,1},freePos(right1)=0
			ModifyGraph/Z zero(left1)=1,rgb(Input6)=(65535,0,0),lstyle(Input6)=5,marker(Input6)=16
			SetAxis/A/N=1 right1; Label right1 "\F'Times'\Z12\f01Intensity [\U]"
		endif
		i+=1
	while (i<ItemsinList(allspectra))
	ModifyGraph/Z mirror(bottom)=2,grid(bottom)=2,fSize=12,lblPos=48,mode=4
	Legend/C/N=text0/X=0/Y=48 slegend[0,strlen(slegend)-4]																					// Trim last CR/LF
End

Proc GraphPubl_Style0() : GraphStyle
	PauseUpdate; Silent 1
	ModifyGraph margin(bottom)=56,margin(bottom)=16,margin(bottom)=48,margin(top)=16
	ModifyGraph/Z grid=2,lblPos=52
	ModifyGraph/Z font="Times",fSize=14
	ModifyGraph/Z minor=1,lsize=1.5,sep=8
	ModifyGraph/Z rgb=(65535,0,0),gbRGB=(61166,61166,61166)
	Label left "\F'Times'\Z14\f01Current Density [\U/cm\\S2\\M]";DelayUpdate
	Label bottom "\F'Times'\Z14\f01Potential [\\U]"
EndMacro

Function CellParams()
	WAVE/T Electrolytes
	NVAR V_area,V_complianceI,V_delay,V_incrVolt,V_length,V_Porosity,V_modeElectrolyte,V_settlingtime,V_scanDir
	SVAR d_t,S_dye,S_electrolyte,S_Filename,S_lamp,S_layer,S_temp,S_type,S_specification,S_warning,S_WE,S_CE
	AppendText "\Z10\f00Measurement Date\t\t\[0: "+d_t
	AppendText "Cell Active Area\X0: "+num2str(V_area)+" cm\S\Z082\Z10"
	AppendText "Light Source\X0: "+S_lamp
	AppendText "Working Temperature\X0: "+S_temp+" K"
	AppendText "Data File Name\X0: "+S_Filename
	AppendText "Current Compliance\X0: "+num2str(V_complianceI*1e3)+" mA"
	AppendText "Settling Time, ∂V, Meas. Delay\X0: "+SelectString(V_settlingtime,"AUTO, "+num2str(-V_scanDir*V_incrVolt*1e3)+" mV","",num2str(V_settlingTime)+" s,  "+num2str(-V_scanDir*V_incrVolt*1e3)+" mV, "+num2str(V_delay)+"s")
End

Function Expt_Params(a,b)
	Variable a,b
	WAVE/T StringArray
	WAVE cw,IVParams,M_Covar
	NVAR V_area,V_beta,V_FitNumIters,V_IPCE550,V_numCell,V_supos,hysteresisFlag
	SVAR allwaves,S_username
	Variable flg,n,nwaves=ItemsInList(allwaves,","),m,m1; String str,s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13
	Redimension/N=(nwaves) StringArray
	if (nwaves>0)
		StringArray=StringFromList(p,allwaves,","); Sort/R StringArray StringArray
		flg=!cmpStr((StringArray[0])[12],"H")																									// flg for Hysteresis data
	endif
	CellParams()
	do
		if (nwaves==0)																														// If zero waves, therefore DarkCurrent
			m1=7
		else
			m1=str2num((StringArray[n])[strlen(StringArray[n])-1])																				// m1 is # of appended waves counter
		endif
		if (n==0)
			str="\t\f01   "
			sprintf s0,"\Z10\F'Palatino'\f00Thermopile\Bref\M"
			sprintf s1,"Current\Bref\M"
			sprintf s2,"Power\Bin\M"
			sprintf s3,"Norm. Std. Dev. "
			sprintf s4,"Module U\Boc\M"
			sprintf s5,"Cell U\Boc\M"
			sprintf s6,"I\Bsc\M"
			sprintf s7,"J\Bsc\M"
			sprintf s8,"U\Bpmax\M"
			sprintf s9,"I\Bpmax\M"
			sprintf s10,"Power\Bout\M"
			sprintf s11,"Total Power\Bout\M"
			sprintf s12,"Fill Factor"
			sprintf s13,"Efficiency \F'Symbol'h\F'Palatino'"
		endif
		if (hysteresisFlag)																														// Hysteresis data
			str=str+"\t\["+num2str(m)+"   "+num2str(round(1e4*IVparams[12*m1+1][V_supos])/10)+"% Sun"
			sprintf s0,s0+"\X%d %2.3W1PSun ",m,IVparams[12*m1+11][V_supos]
			sprintf s1,s1+"\X%d %2.3W1PA ",m,IVparams[12*m1][V_supos]
			sprintf s2,s2+"\X%d %2.3W1PW/cm\S\Z082\M ",m,IVparams[12*m1+1][V_supos]
			sprintf s3,s3+"\X%d %2.2f ",m,IVparams[12*m1+2][V_supos]
			sprintf s4,s4+"\X%d %2.3W1PV ",m,IVparams[12*m1+3][V_supos]
			sprintf s5,s5+"\X%d %2.3W1PV ",m,IVparams[12*m1+3][V_supos]/V_numCell
			sprintf s6,s6+"\X%d %2.3W1PA ",m,IVparams[12*m1+4][V_supos]
			sprintf s7,s7+"\X%d %2.3W1PA/cm\S\Z082\M ",m,IVparams[12*m1+5][V_supos]
			sprintf s8,s8+"\X%d %2.2W1PV ",m,IVparams[12*m1+6][V_supos]
			sprintf s9,s9+"\X%d %2.1W1PA/cm\S\Z082\M ",m,IVparams[12*m1+8][V_supos]
			sprintf s10,s10+"\X%d %2.2W1PW/cm\S\Z082\M ",m,IVparams[12*m1+9][V_supos]
			sprintf s11,s11+"\X%d %2.2W1PW ",m,IVparams[12*m1+9][V_supos]*V_area
			sprintf s12,s12+"\X%d %2.3f ",m,IVparams[12*m1+10][V_supos]
			sprintf s13,"%s\X%d %2.2f%s ",s13,m,100*IVparams[12*m1+9][V_supos]/IVparams[12*m1+1][V_supos],"%"
			m+=1																															// m is tab counter
		else
			if ((nwaves<5)%|((m1!=2*abs(CmpStr(S_username,"Marie")))%&(m1!=1*abs(CmpStr(S_username,"Paul")))%&(m1!=3)))
				str=str+"\t\["+num2str(m)+"   "+num2str(round(1e4*IVparams[12*m1+1][V_supos])/10)+"% Sun"
				sprintf s0,s0+"\X%d %2.3W1PSun ",m,IVparams[12*m1+11][V_supos]
				sprintf s1,s1+"\X%d %2.3W1PA ",m,IVparams[12*m1][V_supos]
				sprintf s2,s2+"\X%d %2.3W1PW/cm\S\Z082\M ",m,IVparams[12*m1+1][V_supos]
				sprintf s3,s3+"\X%d %2.2f ",m,IVparams[12*m1+2][V_supos]
				sprintf s4,s4+"\X%d %2.3W1PV ",m,IVparams[12*m1+3][V_supos]
				sprintf s5,s5+"\X%d %2.3W1PV ",m,IVparams[12*m1+3][V_supos]/V_numCell
				sprintf s6,s6+"\X%d %2.3W1PA ",m,IVparams[12*m1+4][V_supos]
				sprintf s7,s7+"\X%d %2.3W1PA/cm\S\Z082\M ",m,IVparams[12*m1+5][V_supos]
				sprintf s8,s8+"\X%d %2.2W1PV ",m,IVparams[12*m1+6][V_supos]
				sprintf s9,s9+"\X%d %2.1W1PA/cm\S\Z082\M ",m,IVparams[12*m1+8][V_supos]
				sprintf s10,s10+"\X%d %2.2W1PW/cm\S\Z082\M ",m,IVparams[12*m1+9][V_supos]
				sprintf s11,s11+"\X%d %2.2W1PW ",m,IVparams[12*m1+9][V_supos]*V_area
				sprintf s12,s12+"\X%d %2.3f ",m,IVparams[12*m1+10][V_supos]
				sprintf s13,"%s\X%d %2.2f%s ",s13,m,100*IVparams[12*m1+9][V_supos]/IVparams[12+1][V_supos],"%"
				m+=1																														// m is tab counter
			endif
		endif
		n+=1
	while (n<nwaves)
	Textbox/N=text2/B=1/F=0/A=LC/X=(a)/Y=(b-10) str
	AppendText s0+"\r"+s1+"\r"+s2+"\r"+s3+"\r"+s4+"\r"+s5+"\r"+s6+"\r"+s7+"\r"+s8+"\r"+s9+"\r"+s10+"\r"+s11+"\r"+s12+"\r"+s13
	sprintf s0,"Ideality Factor @ 1 Sun\X0: %2.3g\r",cw[3]
	sprintf s1,"Series Resistance @ 1 Sun\X0: %2.2W1PΩ ± %.2g %",-cw[2],-100*sqrt(M_Covar[2][2])/cw[2]
	sprintf s2,",\t(%2.2W1PΩ/cm\S\Z082\M)",-cw[2]/V_area
	if (V_FitNumIters>255)
		s2+=", Max. Iterations limit"
	endif
	Textbox/N=text3/F=0/A=LC/X=(a)/Y=(b-36)"IPCE @ 550 nm\t\t\[0: "+num2str(V_IPCE550)+" %"
//	AppendText "IPCE @ 700 nm  :\X0"+num2str(V_IPCE700/V_area)
	AppendText "Slope ∂V\Boc\M/∂log(I\Bo\M)\X0: "+num2str(V_beta*1e3*2.30259)+ " mV"
	n=str2num(StringFromList(0,allwaves,",")[12])
	if ((V_numCell==1)%&(IVParams[4][V_supos]<-0.001))
		AppendText s0+s1+s2+s3
	endif
End

Function IV_Results()
	WAVE cw,M_Covar,residual
	NVAR V_chisq,V_FitNumIters,V_ms
	SVAR S_Value
	String str,Start=num2str(hcsr(A)),Finish=num2str(hcsr(B))
	WaveStats/Q/R=(xcsr(B),xcsr(A)) residual
	string s0,s1,s2,s3,s4
	sprintf s0,"\Z10\f00PhotoCurrent\t  \[0 : %2.2W1PA ± %.2g %\r",-cw[0],-100*sqrt(M_Covar[0][0])/cw[0]
	sprintf s1,"I\Bsat\M\X0 : %2.2W1PA ± %.2g %\r",-cw[1],-100*sqrt(M_Covar[1][1])/cw[1]
	sprintf s2,"Ideality Factor\X0 : %2.3g ± %.2g %\r",cw[3],100*sqrt(M_Covar[3][3])/cw[3]
	sprintf s3,"Series Resistance\X0 : %2.2W1PΩ ± %.2g %\r",-cw[2],-100*sqrt(M_Covar[2][2])/cw[2]
	Textbox/N=text6/F=0/A=LT/X=52/Y=80 "\Z10\f05Fitted Model Parameters to "+S_Value+":"
	AppendText s0+s1+s2+s3
	if (numpnts(cw)==5)
		sprintf s4,"Parallel Resistance\X0 : %2.2W1PΩ ± %.3g %",cw[4],100*sqrt(M_Covar[4][4])/cw[4]
		AppendText s4
	endif
	Textbox/N=text7/F=0/A=LT/X=80/Y=21 "Fit: "+Start+" - "+Finish+" eV"
	AppendText "\Z10Chisqr = "+num2str(V_chisq)+"\rRmsqr = "+num2str(V_rms)+"\r# of iterations = "+num2str(V_FitNumIters)
End

////////////////////////////////////////////////////// TABLES ///////////////////////////////////////////////////////

Window Table0() : Table
	PauseUpdate; Silent 1
	Edit/W=(5,42,375,403) Voltage,Thermopile,PhotoDiode,Potential,PhotoCurrent
	ModifyTable size=9,width=64,sigDigits=4
	ModifyTable alignment(Point)=1,width(Point)=32
EndMacro

Window Table1() : Table
	PauseUpdate; Silent 1
	Edit/W=(260,42,784,255) InputText,Input0,Input1,Input2,Input3,Input4,Input5,Input6,Input7
	ModifyTable size=9,width=64,sigDigits=4
	ModifyTable alignment(Point)=1,width(Point)=32,width(InputText)=80
	ModifyTable title(InputText)="Text Parameter",title(Input0)="Time",title(Input1)="Isc",title(Input2)="Uoc",title(Input3)="Fillfactor",title(Input4)="Power",title(Input5)="Efficiency",title(Input7)="Capacitance"
EndMacro

Window TableSystem() : Table
	PauseUpdate; Silent 1
	Edit/W=(4,42,384,224) RefDiodes,Offset,OffsetOrange,OffsetGreen
	ModifyTable size=9,width=64,sigDigits=4
	ModifyTable alignment(Point)=1,width(Point)=32
EndMacro

Window TableFitParams() : Table
	PauseUpdate; Silent 1
	Edit/W=(400,160,592,296) cw
	ModifyTable size=9,width=64,sigDigits=4
	ModifyTable alignment(Point)=1,width(Point)=32
EndMacro

Window ListElectrolytes() : Table
	PauseUpdate; Silent 1
	Edit/W=(28,57,544,622) Electrolytes
	ModifyTable size=9,width(Point)=24,alignment(Electrolytes)=1,width(Electrolytes)=64
	ModifyTable rgb[1]=(65535,0,0),width[6]=80,width[7]=80
	ModifyTable title[1]="Electrolyte",title[2]="Conc",title[3]="Molten Salt",title[4]="[I2]",title[5]="[Base]",title[6]="Additives",title[7]="Solvent"
EndMacro

Window ReferenceDiodes() : Table
	PauseUpdate; Silent 1
	Edit/W=(4,40,628,368) Diodes,RefDiodes
	ModifyTable size=9,width=64,sigDigits=5,width(Diodes)=120
	ModifyTable alignment(Point)=1,width(Point)=32
	ModifyTable rgb(Diodes)=(65535,0,0),rgb(RefDiodes)=(0,0,65535)
	ModifyTable title[1]="Diode Name",title[2]="0.1% Sun",title[3]="1% Sun",title[4]="10% Sun",title[5]="30% Sun",title[6]="53% Sun",title[7]="64% Sun",title[8]="100% Sun"
EndMacro

////////////////////////////////////////////////////// LAYOUTS ///////////////////////////////////////////////////////

Function Layout_All_Data() : Layout																											// General IV. Use 'Window' structure so that it appearsunder 'Layout Macros'
	WAVE cw,IVParams,PhotoCurrent0,PhotoCurrent1
	NVAR V_beta,V_complianceI,V_numCell,V_FitQuitReason,V_run,V_supos
	SVAR allwaves,allwaves,S_Filename,S_number,S_layoutname,option3,option5,option6,option9
	DoWindow/F IVGraph	
	ModifyGraph margin(right)=48,margin(bottom)=40,wbRGB=(65535,65535,65535)
	if (V_supos>0)
		Legend/C/N=text0/J/F=0/A=LC/X=1/Y=4
		GetAxis/Q power; SetAxis power,2e-5,V_max
		Layout2()
	else
		Variable a,n
		Legend/K/N=textL
		do
			if ((cmpstr(StringFromList(0,allwaves,","),"DarkCurrent")==0)&(ItemsinList(allwaves,",")==1))
				cw[2]=NaN; cw[3]=NaN																										// If no fit set to NaN
				allwaves=SortList(WaveList("PhotoCurrent*",",","win:IVGraph"),",",16)																// Refresh allwaves again
			else
				allwaves=SortList(WaveList("PhotoCurrent*",",","win:IVGraph"),",",16)																// Get Parameters from waves in top graph
				SummariseData()
				if (CmpStr(S_layoutname,"Layout3()")!=0)
					n=str2num(StringFromList(0,allwaves,",")[strlen(StringFromList(0,allwaves,","))-1])												// Get first wave
					if ((V_numCell==1)&(IVParams[12*n+10]>0.55)&(IVParams[12*n+4]<-0.001))													// Calculate Series Resistance only if Isc > 1mA
						DoWindow/F IVGraph; DoUpdate
						DataFit("IV",a=0)
					else
						FindLevel/Q/B=3 PhotoCurrent0,V_complianceI/2; a=V_LevelX																// Estimate Series Resistance @Voc
						if (!V_Flag)
							FindLevel/Q/B=3 PhotoCurrent1,-V_complianceI/2
							cw[2]=-(V_LevelX-a)/V_complianceI
						endif
					endif
					V_beta=VocvsIo()
				endif
			endif
			if (V_supos>0)
				break
			endif
			Filename()
			if (CmpStr(S_number,S_Filename)!=0)
				S_Filename=S_number
				break
			else
				beep; DoAlert 0, "This file name '"+S_Filename+"' is already in use. Please update Cell N°"
				V_run+=1
			endif
		while(1)
		if (CmpStr(S_layoutname,"Layout3()")!=0)
			SetAxis/A/R left; DoUpdate; GetAxis/Q left; SetAxis left,min(V_complianceI,-V_max/2),V_max
		else
			Execute "RemoveTags(1)"
		endif
		DoWindow/F TransientCGraph
		ModifyGraph margin(right)=48,margin(bottom)=40,wbRGB=(65535,65535,65535)
		Legend/C/N=text0/J/F=0/A=MC/X=32/Y=-40
		Execute S_layoutname
	endif
	ModifyLayout mag=1
	option3="(Data Fit..."; option5="(Layout..."; option6="Print & Save"; option9="Save IV Data"; Buildmenu "Macros"
EndMacro

Proc Layout_Results() : Layout
	PauseUpdate; Silent 1
	String s; Variable n,ncols=DimSize(Expt_parameters,1)-1,p1
	S_layoutname="Layout5()"
	DoWindow/F IVGraph	
	ModifyGraph margin(right)=16,margin(bottom)=40,wbRGB=(65535,65535,65535)
	Legend/W=IVGraph/K/N=textL; Legend/W=IVGraph/N=textL/J/F=0/A=MC/X=-28/Y=0															// Kill old legend, then make a new one with no text
	do
		s=GetDimLabel(Expt_parameters,1,n+1); p1=strsearch(s,"_",0)																				// Filename held in DimLabel
		AppendText/N=textL "\s('Power"+s[p1+1,strlen(s)]+"') "+s
		n+=1
	while (n<ncols)
	DoWindow/F $S_windowname
	ModifyGraph margin(right)=48,margin(bottom)=40,wbRGB=(65535,65535,65535)
	Layout5()
	option4="(Data Extract"; option5="(Layout..."; option6="Print & Save"; Buildmenu "Macros"
EndMacro

Window Layout0() : Layout
	PauseUpdate; Silent 1
	String str
	sprintf str,"Layout/K=1/C=1/W=(4,42,936,680) %s(388,128,816,424)/O=1/F=0",S_windowname
	Execute str
	Textbox/N=text0/F=1/S=3/A=LC/X=16/Y=45 "\Z14\f01Current Voltage characteristics of Cell: "+S_Filename
	Textbox/N=text1/F=0/A=LC/X=2/Y=26
	Expt_params(2,0)
	Textbox/N=text4/F=0/A=MC/X=40/Y=-48.5 "\Z10\f02Date: "+date()
	Textbox/N=text5/F=0/A=LC/X=0/Y=-48.5 "\Z10\f02© RAHB: "+IgorInfo(1)+"\tMeasured by "+S_Username
	Append EPFL_Logo(10,12,166,56)/O=8/F=0
	if (cmpstr(S_windowname,"GraphTStability"))
		IV_Results()
		Textbox/N=text8/F=0/X=52/Y=8
		if (numpnts(cw)==4)
			AppendText "\JC\F'Times'\Z14Model: i = I\Bpc\M\Z14 - I\Bsat\M\Z14[exp(\[0\f04q(V+Ri)\f00)-1]"
			AppendText "\X0     nkT "
		else
			AppendText "\JC\F'Times'\Z14Model: i = I\Bpc\M\Z14 - I\Bsat\M\Z14[exp(\[0\f04q(V+Ri)\f00)-1] - \[1\f04V+Ri\f00"
			AppendText "\X0     nkT\X1  R\Bshunt "
		endif
	else
		Textbox/N=text8/F=0/X=8/Y=24
		AppendText "\JC\F'Times'\Z12\f01Cell Stability under "+S_Status
		AppendText "\f01Total Time of Exposure :"+num2str(V_TotalTime)+" hrs"
		AppendText "\f01Sun Exposure :"+"Continuous"
	endif
	ModifyLayout mag=1
EndMacro

Window Layout1() : Layout																													// Basic Data Layout
	PauseUpdate; Silent 1
	Layout/K=1/C=1/W=(4,42,936,680) IVGraph(388,32,816,328)/O=1/F=0,TransientCGraph(388,328,816,568)/O=1/F=0
	Textbox/N=text0/F=1/S=3/A=LC/X=20/Y=45 "\Z14\f01Cell Name: "+ParseFilePath(3, S_Filename, ":", 0, 0)
	Textbox/N=text1/F=0/A=LC/X=2/Y=26
	Expt_params(2,0)
	Textbox/N=text4/F=0/A=LC/X=2/Y=-44 "Calibration File: "+S_Calibrationfile
	Textbox /N=text5/F=0/A=MC/X=40/Y=-48 "\Z10\f02Date: "+date()
	Textbox/N=text6/F=0/A=LC/X=2/Y=-48 "\Z10\f02© RAHB: "+IgorInfo(1)+"\tMeasured by "+S_Username+" on IV old"
	Append EPFL_Logo(10,12,166,56)/O=8/F=0
EndMacro

Function Layout2() : Layout																													// Appended Data layout
	WAVE/T Expt_parameters
	WAVE RefDiodes
	NVAR V_supos
	SVAR S_Calibrationfile,S_cellname,S_Username,S_YDataName
	variable a=round(1000*RefDiodes[15][6-str2num(S_YDataName[12,13])])/10,n,m; String str
	NewLayout/K=1/C=1/W=(4,42,936,544) 
	AppendLayoutObject/R=(32,232,560,616)/F=0 GRAPH IVGraph
	Textbox/N=text0/F=0/S=3/A=MC/X=-4/Y=43 "\JC\Z14\f01"+S_YDataName[0,11]+" Voltage characteristics of Cell: "+S_cellname
	AppendText "\Z12at "+num2str(a)+"% Sun\f00\r"
	AppendText "Experimental Parameters"
	Textbox/N=text1/F=0/A=MT/X=0/Y=11
	do
		m=0; str=""																															// m is # of appended waves counter
		do
			if (n==0)																														// First line
				if (m==0)
					str+=Expt_parameters[n][m]+"\t\t\[0: "
				else
					str+=PadString((Expt_parameters[n][m])[0,27],28,0x20)+"\["+num2str(m)+": "
				endif
			else
				str+=Expt_parameters[n][m]+"\X"+num2str(m)+": "
			endif
			m+=1
		while (m<=(V_supos))
		AppendText str
		n+=1
	while (n<9)
	Textbox/N=text2/F=0/A=MT/X=0/Y=76"\Z12\f01Measured Parameters"
	Textbox/N=text3/F=0/A=MT/X=0/Y=78
	n=10
	do
		m=0; str=""
		do
			if (n==10)
				str+=Expt_parameters[n][m]+"        \["+num2str(m)+": "
			else
				str+=Expt_parameters[n][m]+"\X"+num2str(m)+": "
			endif
			m+=1
		while (m<=(V_supos))
		AppendText str
		n+=1
	while (n<20)
	Textbox/N=text4/F=0/A=LC/X=4/Y=-46 "Calibration File: "+S_Calibrationfile
	Textbox/N=text5/F=0/A=MC/X=40/Y=-48 "\Z10\f02Date: "+date()
	Textbox/N=text6/F=0/A=LC/X=4/Y=-48 "\Z10\f02© RAHB: "+IgorInfo(1)+"\tMeasured by "+S_Username
	AppendLayoutObject/F=0/R=(10,12,166,56) Picture EPFL_Logo
End

Window Layout3() : Layout																													// Basic Data Layout
	PauseUpdate; Silent 1
	DoWindow/F ChronoAmpGraph
	ModifyGraph margin(right)=48,margin(bottom)=40,wbRGB=(65535,65535,65535)
	NewLayout/K=2/C=1/W=(4,42,936,680)
	AppendLayoutObject/R=(388,32,816,328)/F=0 GRAPH ChronoAmpGraph; AppendLayoutObject/R=(388,328,784,568)/F=0 GRAPH ChargeGraph
	Textbox/N=text0/F=1/S=3/A=LC/X=18/Y=45 "\Z14\f01Cell Name: "+S_Filename
	Textbox/N=text1/F=0/A=LC/X=2/Y=26
	CellParams()
	Textbox/N=text2/F=0/A=LT/X=16/Y=76"\Z12\f01Measured Parameters"
	Textbox/N=text3/F=0/A=LT/X=16/Y=78"Total Accumalated Charge: "+num2str(V_max)+" C"
	AppendText "Charge X section : "+num2str(V_chargeDensity)+" C/cm\S\Z082\Z10"
	Textbox/N=text4/F=0/A=LC/X=2/Y=-44 "Calibration File: "+S_Calibrationfile
	Textbox /N=text5/F=0/A=MC/X=40/Y=-48 "\Z10\f02Date: "+date()
	Textbox/N=text6/F=0/A=LC/X=2/Y=-48 "\Z10\f02© RAHB: "+IgorInfo(1)+"\tMeasured by "+S_Username
	Append EPFL_Logo(10,12,166,56)/O=8/F=0
	ModifyLayout mag=1
EndMacro

Window Layout4() : Layout
	PauseUpdate; Silent 1
	NewLayout/K=2/C=1/W=(4,42,480,544)
	AppendLayoutObject/R=(388,32,816,328)/F=0 GRAPH IVGraph
	AppendLayoutObject/R=(388,328,644,568)/F=0 GRAPH PowerPlot; AppendLayoutObject/R=(602,328,816,568)/F=0 GRAPH LnPowerPlot
	Textbox/N=text0/F=1/S=3/A=LC/X=20/Y=45 "\Z14\f01Cell Name: "+S_Filename
	Textbox/N=text1/F=0/A=LC/X=2/Y=27
	Expt_params(2,0)
	Textbox/N=text4/F=0/A=LC/X=2/Y=-44 "Calibration File: "+S_Calibrationfile
	Textbox /N=text5/F=0/A=MC/X=40/Y=-48 "\Z10\f02Date: "+date()
	Textbox/N=text6/F=0/A=LC/X=2/Y=-48 "\Z10\f02© RAHB: "+IgorInfo(1)+"\tMeasured by "+S_Username
	Append EPFL_Logo(10,12,166,56)/O=8/F=0
EndMacro

Window Layout5() : Layout
	PauseUpdate; Silent 1
	String str
	NewLayout/K=2/W=(4,42,480,544)
	AppendLayoutObject/R=(388,32,816,320)/F=0 GRAPH IVGraph
	sprintf str,"AppendLayoutObject/R=(388,328,816,568)/F=0 GRAPH %s",S_windowname
	Execute str
	Textbox/N=text0/F=1/S=3/A=LC/X=18/Y=45 "\Z14\f01PV characteristics of Class of Cells: "+S_Filename[0,strsearch(S_Filename,"_",0)-1]
	Textbox/N=text1/F=0/A=LC/X=2/Y=24
	Expt_params(2,0)
	Textbox/N=text4/F=0/A=LC/X=2/Y=-44 "Calibration File: "+S_Calibrationfile
	Textbox/N=text5/F=0/A=MC/X=40/Y=-48 "\Z10\f02Date: "+date()
	Textbox/N=text6/F=0/A=LC/X=2/Y=-48 "\Z10\f02© RAHB: "+IgorInfo(1)+"\tMeasured by "+S_Username
	Append EPFL_Logo(10,12,166,56)/O=8/F=0
	ModifyLayout mag=1	
EndMacro

Window Layout_PPT() : Layout
	PauseUpdate; Silent 1
	DoWindow/F IVGraph	
	ModifyGraph margin(right)=48,margin(bottom)=40,wbRGB=(65535,65535,65535)
	if (V_supos==0)
		Filename()
		if (CmpStr(S_number,S_Filename))!=0)
			S_Filename=S_number
		else
			beep; DoAlert 0, "This file name '"+S_Filename+"' is already in use. Please update Cell N¬∞"
			V_run+=1
		endif
	endif
	Layout/P='Landscape'/K=1/C=1/W=(4,42,936,680)
	Textbox/N=Text0/F=0/S=3/A=LC/X=20/Y=46 "\Z14\F'Times New Roman'\t\t	" + ParseFilePath(3, S_Filename, ":", 0, 0)
	Textbox/N=text1/F=0/A=LC/X=2/Y=24
	CellParams()
	AppendLayoutObject/F=0/R=(312,312,800,560) GRAPH GraphIV
	AppendLayoutObject/F=0/T=0/R=(312,32,800,280) GRAPH $S_windowName
	Textbox/N=Text2/F=0/A=LC/X=2/Y=-16 "\Z16\F'Times New Roman'Initial I-V diagnostics"
	AppendText "\Z10Active area\t\[0: "+num2str(V_area)+" cm\S2\M"
	AppendText "Power\Bin\M\X0: "+num2str(1000*V_powerIn1) + " mW cm\S-2\M"
	AppendText "J\Bsc\M\X0: "+num2str(1000*V_Jsc) + " mA cm\S-2\M"
	AppendText "V\Boc\M \X0: " +num2str(V_voc) + " V"
	AppendText "FF \X0: " + num2str(V_ff) + " %"
	AppendText "J\Bpmax\M\X0: "+ num2str(1000*V_Jpp) + " mA cm\S-2\M"
	AppendText "U\Bpmax\M\X0: "+ num2str(V_Vpp) + "  V"
	AppendText "PCE \X0: "+ num2str(1000*V_pwr) + " %"
	WaveStats/Q/M=1 input8; AppendText "PCE (MPPT)\X0: "+ num2str(V_max) + " %"
	Textbox/N=text5/F=0/A=MC/X=40/Y=-48 "\Z10\f02Date: "+date()
	Textbox/N=text6/F=0/A=LC/X=4/Y=-48 "\Z10\f02¬© RAHB: "+IgorInfo(1)+"\tMeasured by "+S_Username
	AppendLayoutObject/F=0/R=(10,12,166,56) picture EPFL_Logo
	ModifyLayout mag=1	
	option3="(Data Analysis ..."; option5="(Layout..."; option6="Print & Save"; Buildmenu "Macros"	
End

Proc Layout_PPTStability() : Layout
	PauseUpdate; Silent 1
	if (V_supos==0)
		Filename()
		if (CmpStr(S_number,S_Filename))!=0)
			S_Filename=S_number
		else
			beep; DoAlert 0, "This file name '"+S_Filename+"' is already in use. Please update Cell N¬∞"
			V_run+=1
		endif
	endif
	DoWindow/F IVGraph	
	ModifyGraph margin(right)=48,margin(bottom)=40,wbRGB=(65535,65535,65535)
	NewLayout/K=1/P='Landscape'/W=(4,42,936,660)
	AppendLayoutObject/F=0/R=(16,312,548,544) GRAPH IVGraph
	AppendLayoutObject/F=0/R=(424,16,792,400)/T=0 GRAPH $S_windowName
	Textbox/N=Text0/F=0/S=3/A=LC/X=2/Y=46 "\Z16\F'Times New Roman'\t\t	" + ParseFilePath(3, S_Filename, ":", 0, 0)
	Textbox/N=text1/F=0/A=LC/X=2/Y=24
	CellParams()
	Textbox/N=Text2/F=0/A=LC/X=72/Y=-24 "\Z10\F'Times New Roman'Active area\t\[0: "+num2str(V_area)+" cm\S2\M"
	WaveStats/Q/M=1Input0; AppendText "Power\Bin\M\X0: "+num2str(V_avg*1000) + " mW cm\S-2\M"
	WaveStats/Q/M=1 input1; AppendText "J\Bsc\M\X0: "+num2str(V_avg*1000) + " mA cm\S-2\M"
	AppendText "V\Boc\M \X0: " +num2str(V_voc) + " V"
	AppendText "FF \X0: " + num2str(V_ff) + " %"
	WaveStats/Q/M=1 input4; AppendText "J\Bmax\M\X0: "+ num2str(-V_avg*1000) + " mA cm\S-2\M"
	WaveStats/Q/M=1 input3; AppendText "V\Bmax\M \X0: "+ num2str(V_avg) + "  V"
	AppendText "PCE (jV)\X0: "+ num2str(V_pwr*1000) + " %"
	WaveStats/Q/M=1 input5; AppendText "PCE (MPPT)\X0: "+ num2str(-V_avg*1000) + " %"
	Textbox/N=text5/F=0/A=MC/X=40/Y=-48 "\Z10\f02Date: "+date()
	Textbox/N=text6/F=0/A=LC/X=4/Y=-48 "\Z10\f02© RAHB: "+IgorInfo(1)+"\tMeasured by "+S_Username
	AppendLayoutObject/R=(42,19,132,60) picture EPFL_Logo
	ModifyLayout mag=1	
	option3="(Data Fit..."; option5="(Layout..."; option6="Print & Save"; Buildmenu "Macros"	
End

